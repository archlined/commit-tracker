/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GitHub API Root
         * @description Get Hypermedia links to resources accessible in GitHub's REST API
         */
        get: operations["meta/root"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List global webhooks */
        get: operations["enterprise-admin/list-global-webhooks"];
        put?: never;
        /** Create a global webhook */
        post: operations["enterprise-admin/create-global-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/hooks/{hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a global webhook */
        get: operations["enterprise-admin/get-global-webhook"];
        put?: never;
        post?: never;
        /** Delete a global webhook */
        delete: operations["enterprise-admin/delete-global-webhook"];
        options?: never;
        head?: never;
        /**
         * Update a global webhook
         * @description Parameters that are not provided will be overwritten with the default value or removed if no default exists.
         */
        patch: operations["enterprise-admin/update-global-webhook"];
        trace?: never;
    };
    "/admin/hooks/{hook_id}/pings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ping a global webhook
         * @description This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the webhook.
         */
        post: operations["enterprise-admin/ping-global-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List public keys */
        get: operations["enterprise-admin/list-public-keys"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/keys/{key_ids}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a public key */
        delete: operations["enterprise-admin/delete-public-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ldap/teams/{team_id}/mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update LDAP mapping for a team
         * @description Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.
         *
         *     If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
         */
        patch: operations["enterprise-admin/update-ldap-mapping-for-team"];
        trace?: never;
    };
    "/admin/ldap/teams/{team_id}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync LDAP mapping for a team
         * @description Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
         */
        post: operations["enterprise-admin/sync-ldap-mapping-for-team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/ldap/users/{username}/mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update LDAP mapping for a user */
        patch: operations["enterprise-admin/update-ldap-mapping-for-user"];
        trace?: never;
    };
    "/admin/ldap/users/{username}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync LDAP mapping for a user
         * @description Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
         */
        post: operations["enterprise-admin/sync-ldap-mapping-for-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an organization */
        post: operations["enterprise-admin/create-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/organizations/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update an organization name */
        patch: operations["enterprise-admin/update-org-name"];
        trace?: never;
    };
    "/admin/pre-receive-environments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List pre-receive environments */
        get: operations["enterprise-admin/list-pre-receive-environments"];
        put?: never;
        /** Create a pre-receive environment */
        post: operations["enterprise-admin/create-pre-receive-environment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a pre-receive environment */
        get: operations["enterprise-admin/get-pre-receive-environment"];
        put?: never;
        post?: never;
        /**
         * Delete a pre-receive environment
         * @description If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.
         *
         *     The possible error messages are:
         *
         *     *   _Cannot modify or delete the default environment_
         *     *   _Cannot delete environment that has hooks_
         *     *   _Cannot delete environment when download is in progress_
         */
        delete: operations["enterprise-admin/delete-pre-receive-environment"];
        options?: never;
        head?: never;
        /**
         * Update a pre-receive environment
         * @description You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
         */
        patch: operations["enterprise-admin/update-pre-receive-environment"];
        trace?: never;
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a pre-receive environment download
         * @description Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.
         *
         *     If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.
         *
         *     The possible error messages are:
         *
         *     * _Cannot modify or delete the default environment_
         *     * _Can not start a new download when a download is in progress_
         */
        post: operations["enterprise-admin/start-pre-receive-environment-download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the download status for a pre-receive environment
         * @description In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
         */
        get: operations["enterprise-admin/get-download-status-for-pre-receive-environment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/pre-receive-hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List pre-receive hooks */
        get: operations["enterprise-admin/list-pre-receive-hooks"];
        put?: never;
        /** Create a pre-receive hook */
        post: operations["enterprise-admin/create-pre-receive-hook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/pre-receive-hooks/{pre_receive_hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a pre-receive hook */
        get: operations["enterprise-admin/get-pre-receive-hook"];
        put?: never;
        post?: never;
        /** Delete a pre-receive hook */
        delete: operations["enterprise-admin/delete-pre-receive-hook"];
        options?: never;
        head?: never;
        /** Update a pre-receive hook */
        patch: operations["enterprise-admin/update-pre-receive-hook"];
        trace?: never;
    };
    "/admin/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List personal access tokens
         * @description Lists personal access tokens for all users, including admin users.
         */
        get: operations["enterprise-admin/list-personal-access-tokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/tokens/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a personal access token
         * @description Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
         */
        delete: operations["enterprise-admin/delete-personal-access-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a user
         * @description If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.
         *
         *     The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.
         *
         *     If the login name or email address is already associated with an account, the server will return a `422` response.
         */
        post: operations["enterprise-admin/create-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a user
         * @description Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#suspend-a-user) is often a better option.
         *
         *     You can delete any user account except your own.
         */
        delete: operations["enterprise-admin/delete-user"];
        options?: never;
        head?: never;
        /** Update the username for a user */
        patch: operations["enterprise-admin/update-username-for-user"];
        trace?: never;
    };
    "/admin/users/{username}/authorizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create an impersonation OAuth token */
        post: operations["enterprise-admin/create-impersonation-o-auth-token"];
        /** Delete an impersonation OAuth token */
        delete: operations["enterprise-admin/delete-impersonation-o-auth-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the authenticated app
         * @description Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/enterprise-server@3.0/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-authenticated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app-manifests/{code}/conversions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a GitHub App from a manifest
         * @description Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
         */
        post: operations["apps/create-from-manifest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/hook/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a webhook configuration for an app
         * @description Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-webhook-config-for-app"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a webhook configuration for an app
         * @description Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        patch: operations["apps/update-webhook-config-for-app"];
        trace?: never;
    };
    "/app/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List installations for the authenticated app
         * @description You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         *
         *     The permissions the installation has are included under the `permissions` key.
         */
        get: operations["apps/list-installations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/installations/{installation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an installation for the authenticated app
         * @description Enables an authenticated GitHub App to find an installation's information using the installation id.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-installation"];
        put?: never;
        post?: never;
        /**
         * Delete an installation for the authenticated app
         * @description Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/enterprise-server@3.0/rest/reference/apps/#suspend-an-app-installation)" endpoint.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        delete: operations["apps/delete-installation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/installations/{installation_id}/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an installation access token for an app
         * @description Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        post: operations["apps/create-installation-access-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/installations/{installation_id}/suspended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Suspend an app installation
         * @description Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        put: operations["apps/suspend-installation"];
        post?: never;
        /**
         * Unsuspend an app installation
         * @description Removes a GitHub App installation suspension.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        delete: operations["apps/unsuspend-installation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/grants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List your grants
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
         */
        get: operations["oauth-authorizations/list-grants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/grants/{grant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single grant
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        get: operations["oauth-authorizations/get-grant"];
        put?: never;
        post?: never;
        /**
         * Delete a grant
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
         */
        delete: operations["oauth-authorizations/delete-grant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/{client_id}/grant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an app authorization
         * @description OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
         *     Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
         */
        delete: operations["apps/delete-authorization"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/{client_id}/grants/{access_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke a grant for an application
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
         *
         *     OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
         *
         *     Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub Enterprise Server](https://github.com/settings/applications#authorized).
         */
        delete: operations["apps/revoke-grant-for-application"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/{client_id}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check a token
         * @description OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
         */
        post: operations["apps/check-token"];
        /**
         * Delete an app token
         * @description OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
         */
        delete: operations["apps/delete-token"];
        options?: never;
        head?: never;
        /**
         * Reset a token
         * @description OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
         */
        patch: operations["apps/reset-token"];
        trace?: never;
    };
    "/applications/{client_id}/token/scoped": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a scoped access token
         * @description Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
         */
        post: operations["apps/scope-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/applications/{client_id}/tokens/{access_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check an authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
         *
         *     OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
         */
        get: operations["apps/check-authorization"];
        put?: never;
        /**
         * Reset an authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
         *
         *     OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
         */
        post: operations["apps/reset-authorization"];
        /**
         * Revoke an authorization for an application
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
         *
         *     OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
         */
        delete: operations["apps/revoke-authorization-for-application"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/apps/{app_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an app
         * @description **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
         *
         *     If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
         */
        get: operations["apps/get-by-slug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List your authorizations
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        get: operations["oauth-authorizations/list-authorizations"];
        put?: never;
        /**
         * Create a new authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
         *
         *     Creates OAuth tokens using [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
         *
         *     To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
         *
         *     You can also create tokens on GitHub Enterprise Server from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://docs.github.com/articles/creating-an-access-token-for-command-line-use).
         *
         *     Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
         */
        post: operations["oauth-authorizations/create-authorization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/clients/{client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Get-or-create an authorization for a specific app
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
         *
         *     Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
         *
         *     If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
         *
         *     **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        put: operations["oauth-authorizations/get-or-create-authorization-for-app"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/clients/{client_id}/{fingerprint}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Get-or-create an authorization for a specific app and fingerprint
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     **Warning:** Apps must use the [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
         *
         *     This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
         *
         *     If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
         */
        put: operations["oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorizations/{authorization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        get: operations["oauth-authorizations/get-authorization"];
        put?: never;
        post?: never;
        /**
         * Delete an authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         */
        delete: operations["oauth-authorizations/delete-authorization"];
        options?: never;
        head?: never;
        /**
         * Update an existing authorization
         * @deprecated
         * @description **Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
         *
         *     If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
         *
         *     You can only send one of these scope keys at a time.
         */
        patch: operations["oauth-authorizations/update-authorization"];
        trace?: never;
    };
    "/codes_of_conduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all codes of conduct */
        get: operations["codes-of-conduct/get-all-codes-of-conduct"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/codes_of_conduct/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a code of conduct */
        get: operations["codes-of-conduct/get-conduct-code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/emojis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get emojis
         * @description Lists all the emojis available to use on GitHub Enterprise Server.
         */
        get: operations["emojis/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/announcement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the global announcement banner
         * @description Gets the current message and expiration date of the global announcement banner in your enterprise.
         */
        get: operations["enterprise-admin/get-announcement"];
        put?: never;
        post?: never;
        /**
         * Remove the global announcement banner
         * @description Removes the global announcement banner in your enterprise.
         */
        delete: operations["enterprise-admin/remove-announcement"];
        options?: never;
        head?: never;
        /**
         * Set the global announcement banner
         * @description Sets the message and expiration time for the global announcement banner in your enterprise.
         */
        patch: operations["enterprise-admin/set-announcement"];
        trace?: never;
    };
    "/enterprise/settings/license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get license information */
        get: operations["enterprise-admin/get-license-information"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all statistics */
        get: operations["enterprise-admin/get-all-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get comment statistics */
        get: operations["enterprise-admin/get-comment-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/gists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get gist statistics */
        get: operations["enterprise-admin/get-gist-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get hooks statistics */
        get: operations["enterprise-admin/get-hooks-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get issue statistics */
        get: operations["enterprise-admin/get-issue-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get milestone statistics */
        get: operations["enterprise-admin/get-milestone-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get organization statistics */
        get: operations["enterprise-admin/get-org-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get pages statistics */
        get: operations["enterprise-admin/get-pages-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/pulls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get pull request statistics */
        get: operations["enterprise-admin/get-pull-request-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get repository statistics */
        get: operations["enterprise-admin/get-repo-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprise/stats/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get users statistics */
        get: operations["enterprise-admin/get-user-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get GitHub Actions permissions for an enterprise
         * @description Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/get-github-actions-permissions-enterprise"];
        /**
         * Set GitHub Actions permissions for an enterprise
         * @description Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/set-github-actions-permissions-enterprise"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/permissions/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List selected organizations enabled for GitHub Actions in an enterprise
         * @description Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise"];
        /**
         * Set selected organizations enabled for GitHub Actions in an enterprise
         * @description Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable a selected organization for GitHub Actions in an enterprise
         * @description Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/enable-selected-organization-github-actions-enterprise"];
        post?: never;
        /**
         * Disable a selected organization for GitHub Actions in an enterprise
         * @description Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        delete: operations["enterprise-admin/disable-selected-organization-github-actions-enterprise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/permissions/selected-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get allowed actions for an enterprise
         * @description Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/get-allowed-actions-enterprise"];
        /**
         * Set allowed actions for an enterprise
         * @description Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/set-allowed-actions-enterprise"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runner groups for an enterprise
         * @description Lists all self-hosted runner groups for an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-self-hosted-runner-groups-for-enterprise"];
        put?: never;
        /**
         * Create a self-hosted runner group for an enterprise
         * @description Creates a new self-hosted runner group for an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        post: operations["enterprise-admin/create-self-hosted-runner-group-for-enterprise"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a self-hosted runner group for an enterprise
         * @description Gets a specific self-hosted runner group for an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/get-self-hosted-runner-group-for-enterprise"];
        put?: never;
        post?: never;
        /**
         * Delete a self-hosted runner group from an enterprise
         * @description Deletes a self-hosted runner group for an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        delete: operations["enterprise-admin/delete-self-hosted-runner-group-from-enterprise"];
        options?: never;
        head?: never;
        /**
         * Update a self-hosted runner group for an enterprise
         * @description Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        patch: operations["enterprise-admin/update-self-hosted-runner-group-for-enterprise"];
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization access to a self-hosted runner group in an enterprise
         * @description Lists the organizations with access to a self-hosted runner group.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise"];
        /**
         * Set organization access for a self-hosted runner group in an enterprise
         * @description Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add organization access to a self-hosted runner group in an enterprise
         * @description Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise"];
        post?: never;
        /**
         * Remove organization access to a self-hosted runner group in an enterprise
         * @description Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        delete: operations["enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runners in a group for an enterprise
         * @description Lists the self-hosted runners that are in a specific enterprise group.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-self-hosted-runners-in-group-for-enterprise"];
        /**
         * Set self-hosted runners in a group for an enterprise
         * @description Replaces the list of self-hosted runners that are part of an enterprise runner group.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        put: operations["enterprise-admin/set-self-hosted-runners-in-group-for-enterprise"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add a self-hosted runner to a group for an enterprise
         * @description Adds a self-hosted runner to a runner group configured in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise`
         *     scope to use this endpoint.
         */
        put: operations["enterprise-admin/add-self-hosted-runner-to-group-for-enterprise"];
        post?: never;
        /**
         * Remove a self-hosted runner from a group for an enterprise
         * @description Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        delete: operations["enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runners for an enterprise
         * @description Lists all self-hosted runners configured for an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-self-hosted-runners-for-enterprise"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runners/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List runner applications for an enterprise
         * @description Lists binaries for the runner application that you can download and run.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/list-runner-applications-for-enterprise"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runners/registration-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a registration token for an enterprise
         * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         *
         *     #### Example using registration token
         *
         *     Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
         *
         *     ```
         *     ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
         *     ```
         */
        post: operations["enterprise-admin/create-registration-token-for-enterprise"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runners/remove-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a remove token for an enterprise
         * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         *
         *     #### Example using remove token
         *
         *     To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
         *     endpoint.
         *
         *     ```
         *     ./config.sh remove --token TOKEN
         *     ```
         */
        post: operations["enterprise-admin/create-remove-token-for-enterprise"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/enterprises/{enterprise}/actions/runners/{runner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a self-hosted runner for an enterprise
         * @description Gets a specific self-hosted runner configured in an enterprise.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        get: operations["enterprise-admin/get-self-hosted-runner-for-enterprise"];
        put?: never;
        post?: never;
        /**
         * Delete a self-hosted runner from an enterprise
         * @description Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
         *
         *     You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
         */
        delete: operations["enterprise-admin/delete-self-hosted-runner-from-enterprise"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public events
         * @description We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
         */
        get: operations["activity/list-public-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get feeds
         * @description GitHub Enterprise Server provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
         *
         *     *   **Timeline**: The GitHub Enterprise Server global public timeline
         *     *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia)
         *     *   **Current user public**: The public timeline for the authenticated user
         *     *   **Current user**: The private timeline for the authenticated user
         *     *   **Current user actor**: The private timeline for activity created by the authenticated user
         *     *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
         *     *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.
         *
         *     **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
         */
        get: operations["activity/get-feeds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List gists for the authenticated user
         * @description Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
         */
        get: operations["gists/list"];
        put?: never;
        /**
         * Create a gist
         * @description Allows you to add a new gist with one or more files.
         *
         *     **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
         */
        post: operations["gists/create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public gists
         * @description List public gists sorted by most recently updated to least recently updated.
         *
         *     Note: With [pagination](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
         */
        get: operations["gists/list-public"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/starred": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List starred gists
         * @description List the authenticated user's starred gists:
         */
        get: operations["gists/list-starred"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/{gist_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a gist */
        get: operations["gists/get"];
        put?: never;
        post?: never;
        /** Delete a gist */
        delete: operations["gists/delete"];
        options?: never;
        head?: never;
        /**
         * Update a gist
         * @description Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
         */
        patch: operations["gists/update"];
        trace?: never;
    };
    "/gists/{gist_id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List gist comments */
        get: operations["gists/list-comments"];
        put?: never;
        /** Create a gist comment */
        post: operations["gists/create-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/{gist_id}/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a gist comment */
        get: operations["gists/get-comment"];
        put?: never;
        post?: never;
        /** Delete a gist comment */
        delete: operations["gists/delete-comment"];
        options?: never;
        head?: never;
        /** Update a gist comment */
        patch: operations["gists/update-comment"];
        trace?: never;
    };
    "/gists/{gist_id}/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List gist commits */
        get: operations["gists/list-commits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/{gist_id}/forks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List gist forks */
        get: operations["gists/list-forks"];
        put?: never;
        /**
         * Fork a gist
         * @description **Note**: This was previously `/gists/:gist_id/fork`.
         */
        post: operations["gists/fork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/{gist_id}/star": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a gist is starred */
        get: operations["gists/check-is-starred"];
        /**
         * Star a gist
         * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["gists/star"];
        post?: never;
        /** Unstar a gist */
        delete: operations["gists/unstar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gists/{gist_id}/{sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a gist revision */
        get: operations["gists/get-revision"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gitignore/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all gitignore templates
         * @description List all templates available to pass as an option when [creating a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-repository-for-the-authenticated-user).
         */
        get: operations["gitignore/get-all-templates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/gitignore/templates/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a gitignore template
         * @description The API also allows fetching the source of a single template.
         *     Use the raw [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) to get the raw contents.
         */
        get: operations["gitignore/get-template"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/installation/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories accessible to the app installation
         * @description List repositories that an app installation can access.
         *
         *     You must use an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
         */
        get: operations["apps/list-repos-accessible-to-installation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/installation/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke an installation access token
         * @description Revokes the installation token you're using to authenticate as an installation and access this endpoint.
         *
         *     Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/enterprise-server@3.0/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
         *
         *     You must use an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
         */
        delete: operations["apps/revoke-installation-access-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List issues assigned to the authenticated user
         * @description List issues assigned to the authenticated user across all visible repositories including owned repositories, member
         *     repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
         *     necessarily assigned to you.
         *
         *
         *     **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
         *     reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
         *     the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
         *     request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
         */
        get: operations["issues/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/licenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all commonly used licenses */
        get: operations["licenses/get-all-commonly-used"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/licenses/{license}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a license */
        get: operations["licenses/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/markdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Render a Markdown document */
        post: operations["markdown/render"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/markdown/raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Render a Markdown document in raw mode
         * @description You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
         */
        post: operations["markdown/render-raw"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meta": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get GitHub Enterprise Server meta information */
        get: operations["meta/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{owner}/{repo}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List public events for a network of repositories */
        get: operations["activity/list-public-events-for-repo-network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List notifications for the authenticated user
         * @description List all notifications for the current user, sorted by most recently updated.
         */
        get: operations["activity/list-notifications-for-authenticated-user"];
        /**
         * Mark notifications as read
         * @description Marks all notifications as "read" removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
         */
        put: operations["activity/mark-notifications-as-read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/threads/{thread_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a thread */
        get: operations["activity/get-thread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark a thread as read */
        patch: operations["activity/mark-thread-as-read"];
        trace?: never;
    };
    "/notifications/threads/{thread_id}/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a thread subscription for the authenticated user
         * @description This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#get-a-repository-subscription).
         *
         *     Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
         */
        get: operations["activity/get-thread-subscription-for-authenticated-user"];
        /**
         * Set a thread subscription
         * @description If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
         *
         *     You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
         *
         *     Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#delete-a-thread-subscription) endpoint.
         */
        put: operations["activity/set-thread-subscription"];
        post?: never;
        /**
         * Delete a thread subscription
         * @description Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
         */
        delete: operations["activity/delete-thread-subscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/octocat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Octocat
         * @description Get the octocat as ASCII art
         */
        get: operations["meta/get-octocat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations
         * @description Lists all organizations, in the order that they were created on GitHub Enterprise Server.
         *
         *     **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
         */
        get: operations["orgs/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization
         * @description To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
         *
         *     GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
         */
        get: operations["orgs/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an organization
         * @description **Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
         *
         *     Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
         */
        patch: operations["orgs/update"];
        trace?: never;
    };
    "/orgs/{org}/actions/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get GitHub Actions permissions for an organization
         * @description Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        get: operations["actions/get-github-actions-permissions-organization"];
        /**
         * Set GitHub Actions permissions for an organization
         * @description Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
         *
         *     If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        put: operations["actions/set-github-actions-permissions-organization"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/permissions/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List selected repositories enabled for GitHub Actions in an organization
         * @description Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        get: operations["actions/list-selected-repositories-enabled-github-actions-organization"];
        /**
         * Set selected repositories enabled for GitHub Actions in an organization
         * @description Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        put: operations["actions/set-selected-repositories-enabled-github-actions-organization"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/permissions/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable a selected repository for GitHub Actions in an organization
         * @description Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        put: operations["actions/enable-selected-repository-github-actions-organization"];
        post?: never;
        /**
         * Disable a selected repository for GitHub Actions in an organization
         * @description Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        delete: operations["actions/disable-selected-repository-github-actions-organization"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/permissions/selected-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get allowed actions for an organization
         * @description Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        get: operations["actions/get-allowed-actions-organization"];
        /**
         * Set allowed actions for an organization
         * @description Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
         *
         *     If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
         *
         *     To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
         */
        put: operations["actions/set-allowed-actions-organization"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runner groups for an organization
         * @description Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/list-self-hosted-runner-groups-for-org"];
        put?: never;
        /**
         * Create a self-hosted runner group for an organization
         * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
         *
         *     Creates a new self-hosted runner group for an organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        post: operations["actions/create-self-hosted-runner-group-for-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups/{runner_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a self-hosted runner group for an organization
         * @description Gets a specific self-hosted runner group for an organization.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/get-self-hosted-runner-group-for-org"];
        put?: never;
        post?: never;
        /**
         * Delete a self-hosted runner group from an organization
         * @description Deletes a self-hosted runner group for an organization.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        delete: operations["actions/delete-self-hosted-runner-group-from-org"];
        options?: never;
        head?: never;
        /**
         * Update a self-hosted runner group for an organization
         * @description Updates the `name` and `visibility` of a self-hosted runner group in an organization.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        patch: operations["actions/update-self-hosted-runner-group-for-org"];
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository access to a self-hosted runner group in an organization
         * @description The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
         *
         *     Lists the repositories with access to a self-hosted runner group configured in an organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/list-repo-access-to-self-hosted-runner-group-in-org"];
        /**
         * Set repository access for a self-hosted runner group in an organization
         * @description Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        put: operations["actions/set-repo-access-to-self-hosted-runner-group-in-org"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add repository access to a self-hosted runner group in an organization
         * @description Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        put: operations["actions/add-repo-access-to-self-hosted-runner-group-in-org"];
        post?: never;
        /**
         * Remove repository access to a self-hosted runner group in an organization
         * @description Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        delete: operations["actions/remove-repo-access-to-self-hosted-runner-group-in-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runners in a group for an organization
         * @description Lists self-hosted runners that are in a specific organization group.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/list-self-hosted-runners-in-group-for-org"];
        /**
         * Set self-hosted runners in a group for an organization
         * @description Replaces the list of self-hosted runners that are part of an organization runner group.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        put: operations["actions/set-self-hosted-runners-in-group-for-org"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add a self-hosted runner to a group for an organization
         * @description Adds a self-hosted runner to a runner group configured in an organization.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        put: operations["actions/add-self-hosted-runner-to-group-for-org"];
        post?: never;
        /**
         * Remove a self-hosted runner from a group for an organization
         * @description Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        delete: operations["actions/remove-self-hosted-runner-from-group-for-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runners for an organization
         * @description Lists all self-hosted runners configured in an organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/list-self-hosted-runners-for-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runners/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List runner applications for an organization
         * @description Lists binaries for the runner application that you can download and run.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/list-runner-applications-for-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runners/registration-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a registration token for an organization
         * @description Returns a token that you can pass to the `config` script. The token expires after one hour.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         *
         *     #### Example using registration token
         *
         *     Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
         *
         *     ```
         *     ./config.sh --url https://github.com/octo-org --token TOKEN
         *     ```
         */
        post: operations["actions/create-registration-token-for-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runners/remove-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a remove token for an organization
         * @description Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         *
         *     #### Example using remove token
         *
         *     To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
         *     endpoint.
         *
         *     ```
         *     ./config.sh remove --token TOKEN
         *     ```
         */
        post: operations["actions/create-remove-token-for-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/runners/{runner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a self-hosted runner for an organization
         * @description Gets a specific self-hosted runner configured in an organization.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        get: operations["actions/get-self-hosted-runner-for-org"];
        put?: never;
        post?: never;
        /**
         * Delete a self-hosted runner from an organization
         * @description Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
         *
         *     You must authenticate using an access token with the `admin:org` scope to use this endpoint.
         */
        delete: operations["actions/delete-self-hosted-runner-from-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization secrets
         * @description Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        get: operations["actions/list-org-secrets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/secrets/public-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization public key
         * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        get: operations["actions/get-org-public-key"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/secrets/{secret_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization secret
         * @description Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        get: operations["actions/get-org-secret"];
        /**
         * Create or update an organization secret
         * @description Creates or updates an organization secret with an encrypted value. Encrypt your secret using
         *     [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
         *     token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
         *     use this endpoint.
         *
         *     #### Example encrypting a secret using Node.js
         *
         *     Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
         *
         *     ```
         *     const sodium = require('tweetsodium');
         *
         *     const key = "base64-encoded-public-key";
         *     const value = "plain-text-secret";
         *
         *     // Convert the message and key to Uint8Array's (Buffer implements that interface)
         *     const messageBytes = Buffer.from(value);
         *     const keyBytes = Buffer.from(key, 'base64');
         *
         *     // Encrypt using LibSodium.
         *     const encryptedBytes = sodium.seal(messageBytes, keyBytes);
         *
         *     // Base64 the encrypted secret
         *     const encrypted = Buffer.from(encryptedBytes).toString('base64');
         *
         *     console.log(encrypted);
         *     ```
         *
         *
         *     #### Example encrypting a secret using Python
         *
         *     Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
         *
         *     ```
         *     from base64 import b64encode
         *     from nacl import encoding, public
         *
         *     def encrypt(public_key: str, secret_value: str) -> str:
         *       """Encrypt a Unicode string using the public key."""
         *       public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
         *       sealed_box = public.SealedBox(public_key)
         *       encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
         *       return b64encode(encrypted).decode("utf-8")
         *     ```
         *
         *     #### Example encrypting a secret using C#
         *
         *     Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
         *
         *     ```
         *     var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
         *     var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
         *
         *     var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
         *
         *     Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
         *     ```
         *
         *     #### Example encrypting a secret using Ruby
         *
         *     Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
         *
         *     ```ruby
         *     require "rbnacl"
         *     require "base64"
         *
         *     key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
         *     public_key = RbNaCl::PublicKey.new(key)
         *
         *     box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
         *     encrypted_secret = box.encrypt("my_secret")
         *
         *     # Print the base64 encoded secret
         *     puts Base64.strict_encode64(encrypted_secret)
         *     ```
         */
        put: operations["actions/create-or-update-org-secret"];
        post?: never;
        /**
         * Delete an organization secret
         * @description Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        delete: operations["actions/delete-org-secret"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List selected repositories for an organization secret
         * @description Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        get: operations["actions/list-selected-repos-for-org-secret"];
        /**
         * Set selected repositories for an organization secret
         * @description Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        put: operations["actions/set-selected-repos-for-org-secret"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add selected repository to an organization secret
         * @description Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        put: operations["actions/add-selected-repo-to-org-secret"];
        post?: never;
        /**
         * Remove selected repository from an organization secret
         * @description Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
         */
        delete: operations["actions/remove-selected-repo-from-org-secret"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List public organization events */
        get: operations["activity/list-public-org-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization webhooks */
        get: operations["orgs/list-webhooks"];
        put?: never;
        /**
         * Create an organization webhook
         * @description Here's how you can create a hook that posts payloads in JSON format:
         */
        post: operations["orgs/create-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/hooks/{hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization webhook
         * @description Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
         */
        get: operations["orgs/get-webhook"];
        put?: never;
        post?: never;
        /** Delete an organization webhook */
        delete: operations["orgs/delete-webhook"];
        options?: never;
        head?: never;
        /**
         * Update an organization webhook
         * @description Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
         */
        patch: operations["orgs/update-webhook"];
        trace?: never;
    };
    "/orgs/{org}/hooks/{hook_id}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a webhook configuration for an organization
         * @description Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
         *
         *     Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
         */
        get: operations["orgs/get-webhook-config-for-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a webhook configuration for an organization
         * @description Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
         *
         *     Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
         */
        patch: operations["orgs/update-webhook-config-for-org"];
        trace?: never;
    };
    "/orgs/{org}/hooks/{hook_id}/pings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ping an organization webhook
         * @description This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
         */
        post: operations["orgs/ping-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/installation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an organization installation for the authenticated app
         * @description Enables an authenticated GitHub App to find the organization's installation information.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-org-installation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List app installations for an organization
         * @description Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
         */
        get: operations["orgs/list-app-installations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization issues assigned to the authenticated user
         * @description List issues in an organization assigned to the authenticated user.
         *
         *     **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
         *     reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
         *     the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
         *     request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
         */
        get: operations["issues/list-for-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization members
         * @description List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
         */
        get: operations["orgs/list-members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/members/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check organization membership for a user
         * @description Check if a user is, publicly or privately, a member of the organization.
         */
        get: operations["orgs/check-membership-for-user"];
        put?: never;
        post?: never;
        /**
         * Remove an organization member
         * @description Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
         */
        delete: operations["orgs/remove-member"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/memberships/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization membership for a user
         * @description In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
         */
        get: operations["orgs/get-membership-for-user"];
        /**
         * Set organization membership for a user
         * @description Only authenticated organization owners can add a member to the organization or update the member's role.
         *
         *     *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
         *
         *     *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
         *
         *     **Rate limits**
         *
         *     To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
         */
        put: operations["orgs/set-membership-for-user"];
        post?: never;
        /**
         * Remove organization membership for a user
         * @description In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
         *
         *     If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
         */
        delete: operations["orgs/remove-membership-for-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/outside_collaborators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List outside collaborators for an organization
         * @description List all users who are outside collaborators of an organization.
         */
        get: operations["orgs/list-outside-collaborators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/outside_collaborators/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Convert an organization member to outside collaborator
         * @description When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
         */
        put: operations["orgs/convert-member-to-outside-collaborator"];
        post?: never;
        /**
         * Remove outside collaborator from an organization
         * @description Removing a user from this list will remove them from all the organization's repositories.
         */
        delete: operations["orgs/remove-outside-collaborator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/pre-receive-hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pre-receive hooks for an organization
         * @description List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
         */
        get: operations["enterprise-admin/list-pre-receive-hooks-for-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a pre-receive hook for an organization */
        get: operations["enterprise-admin/get-pre-receive-hook-for-org"];
        put?: never;
        post?: never;
        /**
         * Remove pre-receive hook enforcement for an organization
         * @description Removes any overrides for this hook at the org level for this org.
         */
        delete: operations["enterprise-admin/remove-pre-receive-hook-enforcement-for-org"];
        options?: never;
        head?: never;
        /**
         * Update pre-receive hook enforcement for an organization
         * @description For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
         */
        patch: operations["enterprise-admin/update-pre-receive-hook-enforcement-for-org"];
        trace?: never;
    };
    "/orgs/{org}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization projects
         * @description Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        get: operations["projects/list-for-org"];
        put?: never;
        /**
         * Create an organization project
         * @description Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        post: operations["projects/create-for-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/public_members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public organization members
         * @description Members of an organization can choose to have their membership publicized or not.
         */
        get: operations["orgs/list-public-members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/public_members/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check public organization membership for a user */
        get: operations["orgs/check-public-membership-for-user"];
        /**
         * Set public organization membership for the authenticated user
         * @description The user can publicize their own membership. (A user cannot publicize the membership for another user.)
         *
         *     Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["orgs/set-public-membership-for-authenticated-user"];
        post?: never;
        /** Remove public organization membership for the authenticated user */
        delete: operations["orgs/remove-public-membership-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization repositories
         * @description Lists repositories for the specified organization.
         */
        get: operations["repos/list-for-org"];
        put?: never;
        /**
         * Create an organization repository
         * @description Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
         *
         *     **OAuth scope requirements**
         *
         *     When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
         *
         *     *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
         *     *   `repo` scope to create a private repository
         */
        post: operations["repos/create-in-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List teams
         * @description Lists all teams in an organization that are visible to the authenticated user.
         */
        get: operations["teams/list"];
        put?: never;
        /**
         * Create a team
         * @description To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
         *
         *     When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
         */
        post: operations["teams/create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a team by name
         * @description Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
         */
        get: operations["teams/get-by-name"];
        put?: never;
        post?: never;
        /**
         * Delete a team
         * @description To delete a team, the authenticated user must be an organization owner or team maintainer.
         *
         *     If you are an organization owner, deleting a parent team will delete all of its child teams as well.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
         */
        delete: operations["teams/delete-in-org"];
        options?: never;
        head?: never;
        /**
         * Update a team
         * @description To edit a team, the authenticated user must either be an organization owner or a team maintainer.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
         */
        patch: operations["teams/update-in-org"];
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discussions
         * @description List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
         */
        get: operations["teams/list-discussions-in-org"];
        put?: never;
        /**
         * Create a discussion
         * @description Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
         */
        post: operations["teams/create-discussion-in-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a discussion
         * @description Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
         */
        get: operations["teams/get-discussion-in-org"];
        put?: never;
        post?: never;
        /**
         * Delete a discussion
         * @description Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
         */
        delete: operations["teams/delete-discussion-in-org"];
        options?: never;
        head?: never;
        /**
         * Update a discussion
         * @description Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
         */
        patch: operations["teams/update-discussion-in-org"];
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discussion comments
         * @description List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
         */
        get: operations["teams/list-discussion-comments-in-org"];
        put?: never;
        /**
         * Create a discussion comment
         * @description Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
         */
        post: operations["teams/create-discussion-comment-in-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a discussion comment
         * @description Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
         */
        get: operations["teams/get-discussion-comment-in-org"];
        put?: never;
        post?: never;
        /**
         * Delete a discussion comment
         * @description Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
         */
        delete: operations["teams/delete-discussion-comment-in-org"];
        options?: never;
        head?: never;
        /**
         * Update a discussion comment
         * @description Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
         */
        patch: operations["teams/update-discussion-comment-in-org"];
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a team discussion comment
         * @description List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
         */
        get: operations["reactions/list-for-team-discussion-comment-in-org"];
        put?: never;
        /**
         * Create reaction for a team discussion comment
         * @description Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
         */
        post: operations["reactions/create-for-team-discussion-comment-in-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete team discussion comment reaction
         * @description **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
         *
         *     Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["reactions/delete-for-team-discussion-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a team discussion
         * @description List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
         */
        get: operations["reactions/list-for-team-discussion-in-org"];
        put?: never;
        /**
         * Create reaction for a team discussion
         * @description Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
         */
        post: operations["reactions/create-for-team-discussion-in-org"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete team discussion reaction
         * @description **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
         *
         *     Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["reactions/delete-for-team-discussion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team members
         * @description Team members will include the members of child teams.
         *
         *     To list members in a team, the team must be visible to the authenticated user.
         */
        get: operations["teams/list-members-in-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team membership for a user
         * @description Team members will include the members of child teams.
         *
         *     To get a user's membership with a team, the team must be visible to the authenticated user.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
         *
         *     **Note:**
         *     The response contains the `state` of the membership and the member's `role`.
         *
         *     The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team).
         */
        get: operations["teams/get-membership-for-user-in-org"];
        /**
         * Add or update team membership for a user
         * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         *
         *     An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
         *
         *     If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
         */
        put: operations["teams/add-or-update-membership-for-user-in-org"];
        post?: never;
        /**
         * Remove team membership for a user
         * @description Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
         */
        delete: operations["teams/remove-membership-for-user-in-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team projects
         * @description Lists the organization projects for a team.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
         */
        get: operations["teams/list-projects-in-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check team permissions for a project
         * @description Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
         */
        get: operations["teams/check-permissions-for-project-in-org"];
        /**
         * Add or update team project permissions
         * @description Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
         */
        put: operations["teams/add-or-update-project-permissions-in-org"];
        post?: never;
        /**
         * Remove a project from a team
         * @description Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
         */
        delete: operations["teams/remove-project-in-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team repositories
         * @description Lists a team's repositories visible to the authenticated user.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
         */
        get: operations["teams/list-repos-in-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check team permissions for a repository
         * @description Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
         *
         *     You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
         *
         *     If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
         */
        get: operations["teams/check-permissions-for-repo-in-org"];
        /**
         * Add or update team repository permissions
         * @description To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
         *
         *     For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
         */
        put: operations["teams/add-or-update-repo-permissions-in-org"];
        post?: never;
        /**
         * Remove a repository from a team
         * @description If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
         */
        delete: operations["teams/remove-repo-in-org"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org}/teams/{team_slug}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List child teams
         * @description Lists the child teams of the team specified by `{team_slug}`.
         *
         *     **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
         */
        get: operations["teams/list-child-in-org"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/columns/cards/{card_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a project card */
        get: operations["projects/get-card"];
        put?: never;
        post?: never;
        /** Delete a project card */
        delete: operations["projects/delete-card"];
        options?: never;
        head?: never;
        /** Update an existing project card */
        patch: operations["projects/update-card"];
        trace?: never;
    };
    "/projects/columns/cards/{card_id}/moves": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move a project card */
        post: operations["projects/move-card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/columns/{column_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a project column */
        get: operations["projects/get-column"];
        put?: never;
        post?: never;
        /** Delete a project column */
        delete: operations["projects/delete-column"];
        options?: never;
        head?: never;
        /** Update an existing project column */
        patch: operations["projects/update-column"];
        trace?: never;
    };
    "/projects/columns/{column_id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List project cards */
        get: operations["projects/list-cards"];
        put?: never;
        /** Create a project card */
        post: operations["projects/create-card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/columns/{column_id}/moves": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move a project column */
        post: operations["projects/move-column"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a project
         * @description Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        get: operations["projects/get"];
        put?: never;
        post?: never;
        /**
         * Delete a project
         * @description Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
         */
        delete: operations["projects/delete"];
        options?: never;
        head?: never;
        /**
         * Update a project
         * @description Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        patch: operations["projects/update"];
        trace?: never;
    };
    "/projects/{project_id}/collaborators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List project collaborators
         * @description Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
         */
        get: operations["projects/list-collaborators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/collaborators/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add project collaborator
         * @description Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
         */
        put: operations["projects/add-collaborator"];
        post?: never;
        /**
         * Remove user as a collaborator
         * @description Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
         */
        delete: operations["projects/remove-collaborator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/collaborators/{username}/permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project permission for a user
         * @description Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
         */
        get: operations["projects/get-permission-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/columns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List project columns */
        get: operations["projects/list-columns"];
        put?: never;
        /** Create a project column */
        post: operations["projects/create-column"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rate_limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rate limit status for the authenticated user
         * @description **Note:** Accessing this endpoint does not count against your REST API rate limit.
         *
         *     **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
         */
        get: operations["rate-limit/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a reaction (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
         *
         *     OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments).
         */
        delete: operations["reactions/delete-legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository
         * @description When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
         *
         *     The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
         */
        get: operations["repos/get"];
        put?: never;
        post?: never;
        /**
         * Delete a repository
         * @description Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
         *
         *     If an organization owner has configured the organization to prevent members from deleting organization-owned
         *     repositories, you will get a `403 Forbidden` response.
         */
        delete: operations["repos/delete"];
        options?: never;
        head?: never;
        /**
         * Update a repository
         * @description **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#replace-all-repository-topics) endpoint.
         */
        patch: operations["repos/update"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/artifacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List artifacts for a repository
         * @description Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/list-artifacts-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an artifact
         * @description Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/get-artifact"];
        put?: never;
        post?: never;
        /**
         * Delete an artifact
         * @description Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        delete: operations["actions/delete-artifact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download an artifact
         * @description Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
         *     the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
         *     the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
         *     GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/download-artifact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a job for a workflow run
         * @description Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/get-job-for-workflow-run"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download job logs for a workflow run
         * @description Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
         *     for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
         *     use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
         *     have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/download-job-logs-for-workflow-run"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get GitHub Actions permissions for a repository
         * @description Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
         *
         *     You must authenticate using an access token with the `repo` scope to use this
         *     endpoint. GitHub Apps must have the `administration` repository permission to use this API.
         */
        get: operations["actions/get-github-actions-permissions-repository"];
        /**
         * Set GitHub Actions permissions for a repository
         * @description Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
         *
         *     If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
         */
        put: operations["actions/set-github-actions-permissions-repository"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/permissions/selected-actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get allowed actions for a repository
         * @description Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
         */
        get: operations["actions/get-allowed-actions-repository"];
        /**
         * Set allowed actions for a repository
         * @description Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
         *
         *     If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
         *
         *     To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
         */
        put: operations["actions/set-allowed-actions-repository"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List self-hosted runners for a repository
         * @description Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
         */
        get: operations["actions/list-self-hosted-runners-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runners/downloads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List runner applications for a repository
         * @description Lists binaries for the runner application that you can download and run.
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint.
         */
        get: operations["actions/list-runner-applications-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runners/registration-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a registration token for a repository
         * @description Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
         *     using an access token with the `repo` scope to use this endpoint.
         *
         *     #### Example using registration token
         *
         *     Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
         *
         *     ```
         *     ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
         *     ```
         */
        post: operations["actions/create-registration-token-for-repo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runners/remove-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a remove token for a repository
         * @description Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
         *     You must authenticate using an access token with the `repo` scope to use this endpoint.
         *
         *     #### Example using remove token
         *
         *     To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
         *
         *     ```
         *     ./config.sh remove --token TOKEN
         *     ```
         */
        post: operations["actions/create-remove-token-for-repo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a self-hosted runner for a repository
         * @description Gets a specific self-hosted runner configured in a repository.
         *
         *     You must authenticate using an access token with the `repo` scope to use this
         *     endpoint.
         */
        get: operations["actions/get-self-hosted-runner-for-repo"];
        put?: never;
        post?: never;
        /**
         * Delete a self-hosted runner from a repository
         * @description Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
         *
         *     You must authenticate using an access token with the `repo`
         *     scope to use this endpoint.
         */
        delete: operations["actions/delete-self-hosted-runner-from-repo"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workflow runs for a repository
         * @description Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).
         *
         *     Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/list-workflow-runs-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a workflow run
         * @description Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/get-workflow-run"];
        put?: never;
        post?: never;
        /**
         * Delete a workflow run
         * @description Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
         *     private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
         *     this endpoint.
         */
        delete: operations["actions/delete-workflow-run"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workflow run artifacts
         * @description Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/list-workflow-run-artifacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a workflow run
         * @description Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        post: operations["actions/cancel-workflow-run"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List jobs for a workflow run
         * @description Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).
         */
        get: operations["actions/list-jobs-for-workflow-run"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download workflow run logs
         * @description Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
         *     `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
         *     this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
         *     the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/download-workflow-run-logs"];
        put?: never;
        post?: never;
        /**
         * Delete workflow run logs
         * @description Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        delete: operations["actions/delete-workflow-run-logs"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Re-run a workflow
         * @deprecated
         * @description Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        post: operations["actions/re-run-workflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository secrets
         * @description Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
         */
        get: operations["actions/list-repo-secrets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/secrets/public-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository public key
         * @description Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
         */
        get: operations["actions/get-repo-public-key"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository secret
         * @description Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
         */
        get: operations["actions/get-repo-secret"];
        /**
         * Create or update a repository secret
         * @description Creates or updates a repository secret with an encrypted value. Encrypt your secret using
         *     [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
         *     token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
         *     this endpoint.
         *
         *     #### Example encrypting a secret using Node.js
         *
         *     Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
         *
         *     ```
         *     const sodium = require('tweetsodium');
         *
         *     const key = "base64-encoded-public-key";
         *     const value = "plain-text-secret";
         *
         *     // Convert the message and key to Uint8Array's (Buffer implements that interface)
         *     const messageBytes = Buffer.from(value);
         *     const keyBytes = Buffer.from(key, 'base64');
         *
         *     // Encrypt using LibSodium.
         *     const encryptedBytes = sodium.seal(messageBytes, keyBytes);
         *
         *     // Base64 the encrypted secret
         *     const encrypted = Buffer.from(encryptedBytes).toString('base64');
         *
         *     console.log(encrypted);
         *     ```
         *
         *
         *     #### Example encrypting a secret using Python
         *
         *     Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.
         *
         *     ```
         *     from base64 import b64encode
         *     from nacl import encoding, public
         *
         *     def encrypt(public_key: str, secret_value: str) -> str:
         *       """Encrypt a Unicode string using the public key."""
         *       public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
         *       sealed_box = public.SealedBox(public_key)
         *       encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
         *       return b64encode(encrypted).decode("utf-8")
         *     ```
         *
         *     #### Example encrypting a secret using C#
         *
         *     Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
         *
         *     ```
         *     var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
         *     var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
         *
         *     var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
         *
         *     Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
         *     ```
         *
         *     #### Example encrypting a secret using Ruby
         *
         *     Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
         *
         *     ```ruby
         *     require "rbnacl"
         *     require "base64"
         *
         *     key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
         *     public_key = RbNaCl::PublicKey.new(key)
         *
         *     box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
         *     encrypted_secret = box.encrypt("my_secret")
         *
         *     # Print the base64 encoded secret
         *     puts Base64.strict_encode64(encrypted_secret)
         *     ```
         */
        put: operations["actions/create-or-update-repo-secret"];
        post?: never;
        /**
         * Delete a repository secret
         * @description Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
         */
        delete: operations["actions/delete-repo-secret"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository workflows
         * @description Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/list-repo-workflows"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a workflow
         * @description Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
         */
        get: operations["actions/get-workflow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable a workflow
         * @description Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        put: operations["actions/disable-workflow"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a workflow dispatch event
         * @description You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
         *
         *     You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
         */
        post: operations["actions/create-workflow-dispatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable a workflow
         * @description Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
         *
         *     You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
         */
        put: operations["actions/enable-workflow"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workflow runs
         * @description List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).
         *
         *     Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
         */
        get: operations["actions/list-workflow-runs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/assignees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List assignees
         * @description Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
         */
        get: operations["issues/list-assignees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/assignees/{assignee}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a user can be assigned
         * @description Checks if a user has permission to be assigned to an issue in this repository.
         *
         *     If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
         *
         *     Otherwise a `404` status code is returned.
         */
        get: operations["issues/check-user-can-be-assigned"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List branches */
        get: operations["repos/list-branches"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a branch */
        get: operations["repos/get-branch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["repos/get-branch-protection"];
        /**
         * Update branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Protecting a branch requires admin or owner permissions to the repository.
         *
         *     **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
         *
         *     **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        put: operations["repos/update-branch-protection"];
        post?: never;
        /**
         * Delete branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        delete: operations["repos/delete-branch-protection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get admin branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["repos/get-admin-branch-protection"];
        put?: never;
        /**
         * Set admin branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
         */
        post: operations["repos/set-admin-branch-protection"];
        /**
         * Delete admin branch protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
         */
        delete: operations["repos/delete-admin-branch-protection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pull request review protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["repos/get-pull-request-review-protection"];
        put?: never;
        post?: never;
        /**
         * Delete pull request review protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        delete: operations["repos/delete-pull-request-review-protection"];
        options?: never;
        head?: never;
        /**
         * Update pull request review protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
         *
         *     **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
         */
        patch: operations["repos/update-pull-request-review-protection"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commit signature protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
         *
         *     **Note**: You must enable branch protection to require signed commits.
         */
        get: operations["repos/get-commit-signature-protection"];
        put?: never;
        /**
         * Create commit signature protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
         */
        post: operations["repos/create-commit-signature-protection"];
        /**
         * Delete commit signature protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
         */
        delete: operations["repos/delete-commit-signature-protection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status checks protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["repos/get-status-checks-protection"];
        put?: never;
        post?: never;
        /**
         * Remove status check protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        delete: operations["repos/remove-status-check-protection"];
        options?: never;
        head?: never;
        /**
         * Update status check protection
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
         */
        patch: operations["repos/update-status-check-protection"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all status check contexts
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["repos/get-all-status-check-contexts"];
        /**
         * Set status check contexts
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        put: operations["repos/set-status-check-contexts"];
        /**
         * Add status check contexts
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        post: operations["repos/add-status-check-contexts"];
        /**
         * Remove status check contexts
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        delete: operations["repos/remove-status-check-contexts"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Lists who has access to this protected branch.
         *
         *     **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
         */
        get: operations["repos/get-access-restrictions"];
        put?: never;
        post?: never;
        /**
         * Delete access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Disables the ability to restrict who can push to this branch.
         */
        delete: operations["repos/delete-access-restrictions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get apps with access to the protected branch
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
         */
        get: operations["repos/get-apps-with-access-to-protected-branch"];
        /**
         * Set app access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
         *
         *     | Type    | Description                                                                                                                                                |
         *     | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        put: operations["repos/set-app-access-restrictions"];
        /**
         * Add app access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
         *
         *     | Type    | Description                                                                                                                                                |
         *     | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        post: operations["repos/add-app-access-restrictions"];
        /**
         * Remove app access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
         *
         *     | Type    | Description                                                                                                                                                |
         *     | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        delete: operations["repos/remove-app-access-restrictions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get teams with access to the protected branch
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Lists the teams who have push access to this branch. The list includes child teams.
         */
        get: operations["repos/get-teams-with-access-to-protected-branch"];
        /**
         * Set team access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
         *
         *     | Type    | Description                                                                                                                                |
         *     | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
         *     | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        put: operations["repos/set-team-access-restrictions"];
        /**
         * Add team access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Grants the specified teams push access for this branch. You can also give push access to child teams.
         *
         *     | Type    | Description                                                                                                                                |
         *     | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
         *     | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        post: operations["repos/add-team-access-restrictions"];
        /**
         * Remove team access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Removes the ability of a team to push to this branch. You can also remove push access for child teams.
         *
         *     | Type    | Description                                                                                                                                         |
         *     | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        delete: operations["repos/remove-team-access-restrictions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users with access to the protected branch
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Lists the people who have push access to this branch.
         */
        get: operations["repos/get-users-with-access-to-protected-branch"];
        /**
         * Set user access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
         *
         *     | Type    | Description                                                                                                                   |
         *     | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        put: operations["repos/set-user-access-restrictions"];
        /**
         * Add user access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Grants the specified people push access for this branch.
         *
         *     | Type    | Description                                                                                                                   |
         *     | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        post: operations["repos/add-user-access-restrictions"];
        /**
         * Remove user access restrictions
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Removes the ability of a user to push to this branch.
         *
         *     | Type    | Description                                                                                                                                   |
         *     | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
         *     | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
         */
        delete: operations["repos/remove-user-access-restrictions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a check run
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
         *
         *     Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
         *
         *     In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
         */
        post: operations["checks/create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a check run
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
         *
         *     Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
         */
        get: operations["checks/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a check run
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
         *
         *     Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
         */
        patch: operations["checks/update"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List check run annotations
         * @description Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
         */
        get: operations["checks/list-annotations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-suites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a check suite
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
         *
         *     By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
         */
        post: operations["checks/create-suite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-suites/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update repository preferences for check suites
         * @description Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
         */
        patch: operations["checks/set-suites-preferences"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a check suite
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
         *
         *     Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
         */
        get: operations["checks/get-suite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List check runs in a check suite
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
         *
         *     Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
         */
        get: operations["checks/list-for-suite"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rerequest a check suite
         * @description Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
         *
         *     To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
         */
        post: operations["checks/rerequest-suite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/code-scanning/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List code scanning alerts for a repository
         * @description Lists all open code scanning alerts for the default branch (usually `main`
         *     or `master`). You must use an access token with the `security_events` scope to use
         *     this endpoint. GitHub Apps must have the `security_events` read permission to use
         *     this endpoint.
         *
         *     The response includes a `most_recent_instance` object.
         *     This provides details of the most recent instance of this alert
         *     for the default branch or for the specified Git reference
         *     (if you used `ref` in the request).
         */
        get: operations["code-scanning/list-alerts-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a code scanning alert
         * @description Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
         *
         *     **Deprecation notice**:
         *     The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
         */
        get: operations["code-scanning/get-alert"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a code scanning alert
         * @description Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
         */
        patch: operations["code-scanning/update-alert"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/code-scanning/analyses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List code scanning analyses for a repository
         * @description Lists the details of all code scanning analyses for a repository,
         *     starting with the most recent.
         *     The response is paginated and you can use the `page` and `per_page` parameters
         *     to list the analyses you're interested in.
         *     By default 30 analyses are listed per page.
         *
         *     The `rules_count` field in the response give the number of rules
         *     that were run in the analysis.
         *     For very old analyses this data is not available,
         *     and `0` is returned in this field.
         *
         *     You must use an access token with the `security_events` scope to use this endpoint.
         *     GitHub Apps must have the `security_events` read permission to use this endpoint.
         *
         *     **Deprecation notice**:
         *     The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
         */
        get: operations["code-scanning/list-recent-analyses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/code-scanning/sarifs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload an analysis as SARIF data
         * @description Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
         *
         *     There are two places where you can upload code scanning results.
         *      - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
         *      - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
         *
         *     You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
         *
         *     ```
         *     gzip -c analysis-data.sarif | base64 -w0
         *     ```
         *
         *     SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
         *
         *     The `202 Accepted`, response includes an `id` value.
         *     You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
         *     For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
         */
        post: operations["code-scanning/upload-sarif"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/collaborators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository collaborators
         * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
         *
         *     Team members will include the members of child teams.
         *
         *     You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
         *     endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
         *     endpoint.
         */
        get: operations["repos/list-collaborators"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/collaborators/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a user is a repository collaborator
         * @description For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
         *
         *     Team members will include the members of child teams.
         *
         *     You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
         *     endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
         *     endpoint.
         */
        get: operations["repos/check-collaborator"];
        /**
         * Add a repository collaborator
         * @description This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         *
         *     For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:
         *
         *     ```
         *     Cannot assign {member} permission of {role name}
         *     ```
         *
         *     Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         *
         *     The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#invitations).
         *
         *     **Rate limits**
         *
         *     You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
         */
        put: operations["repos/add-collaborator"];
        post?: never;
        /** Remove a repository collaborator */
        delete: operations["repos/remove-collaborator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/collaborators/{username}/permission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get repository permissions for a user
         * @description Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
         */
        get: operations["repos/get-collaborator-permission-level"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List commit comments for a repository
         * @description Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/).
         *
         *     Comments are ordered by ascending ID.
         */
        get: operations["repos/list-commit-comments-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a commit comment */
        get: operations["repos/get-commit-comment"];
        put?: never;
        post?: never;
        /** Delete a commit comment */
        delete: operations["repos/delete-commit-comment"];
        options?: never;
        head?: never;
        /** Update a commit comment */
        patch: operations["repos/update-commit-comment"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a commit comment
         * @description List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
         */
        get: operations["reactions/list-for-commit-comment"];
        put?: never;
        /**
         * Create reaction for a commit comment
         * @description Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
         */
        post: operations["reactions/create-for-commit-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a commit comment reaction
         * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
         *
         *     Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
         */
        delete: operations["reactions/delete-for-commit-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List commits
         * @description **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        get: operations["repos/list-commits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List branches for HEAD commit
         * @description Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
         */
        get: operations["repos/list-branches-for-head-commit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List commit comments
         * @description Use the `:commit_sha` to specify the commit that will have its comments listed.
         */
        get: operations["repos/list-comments-for-commit"];
        put?: never;
        /**
         * Create a commit comment
         * @description Create a comment for a commit using its `:commit_sha`.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["repos/create-commit-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pull requests associated with a commit
         * @description Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests) endpoint.
         */
        get: operations["repos/list-pull-requests-associated-with-commit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a commit
         * @description Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
         *
         *     **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
         *
         *     You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
         *
         *     To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
         *
         *     **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        get: operations["repos/get-commit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List check runs for a Git reference
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
         *
         *     Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
         */
        get: operations["checks/list-for-ref"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List check suites for a Git reference
         * @description **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
         *
         *     Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
         */
        get: operations["checks/list-suites-for-ref"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{ref}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the combined status for a specific reference
         * @description Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
         *
         *
         *     Additionally, a combined `state` is returned. The `state` is one of:
         *
         *     *   **failure** if any of the contexts report as `error` or `failure`
         *     *   **pending** if there are no statuses or a context is `pending`
         *     *   **success** if the latest status for all contexts is `success`
         */
        get: operations["repos/get-combined-status-for-ref"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/commits/{ref}/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List commit statuses for a reference
         * @description Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
         *
         *     This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
         */
        get: operations["repos/list-commit-statuses-for-ref"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/compare/{basehead}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Compare two commits
         * @description The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
         *
         *     The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
         *
         *     The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
         *
         *     **Working with large comparisons**
         *
         *     The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) to enumerate all commits in the range.
         *
         *     For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
         *     to generate. You can typically resolve this error by using a smaller commit range.
         *
         *     **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        get: operations["repos/compare-commits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a content attachment
         * @description Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#content_reference) to create an attachment.
         *
         *     The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/enterprise-server@3.0/apps/using-content-attachments/)" for details about content attachments.
         *
         *     You must use an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
         */
        post: operations["apps/create-content-attachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/contents/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get repository content
         * @description Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
         *     `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
         *
         *     Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for
         *     retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
         *     type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
         *     object format.
         *
         *     **Note**:
         *     *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.0/rest/reference/git#trees).
         *     *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
         *     API](https://docs.github.com/enterprise-server@3.0/rest/reference/git#get-a-tree).
         *     *   This API supports files up to 1 megabyte in size.
         *
         *     #### If the content is a directory
         *     The response will be an array of objects, one object for each item in the directory.
         *     When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
         *     _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
         *     In the next major version of the API, the type will be returned as "submodule".
         *
         *     #### If the content is a symlink
         *     If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
         *     API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
         *     describing the symlink itself.
         *
         *     #### If the content is a submodule
         *     The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
         *     commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
         *     the submodule at that specific commit.
         *
         *     If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
         *     github.com URLs (`html_url` and `_links["html"]`) will have null values.
         */
        get: operations["repos/get-content"];
        /**
         * Create or update file contents
         * @description Creates a new file or replaces an existing file in a repository.
         */
        put: operations["repos/create-or-update-file-contents"];
        post?: never;
        /**
         * Delete a file
         * @description Deletes a file in a repository.
         *
         *     You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
         *
         *     The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
         *
         *     You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
         */
        delete: operations["repos/delete-file"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository contributors
         * @description Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
         *
         *     GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
         */
        get: operations["repos/list-contributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List deployments
         * @description Simple filtering of deployments is available via query parameters:
         */
        get: operations["repos/list-deployments"];
        put?: never;
        /**
         * Create a deployment
         * @description Deployments offer a few configurable parameters with certain defaults.
         *
         *     The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
         *     before we merge a pull request.
         *
         *     The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
         *     multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
         *     makes it easier to track which environments have requested deployments. The default environment is `production`.
         *
         *     The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
         *     the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
         *     the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
         *     return a failure response.
         *
         *     By default, [commit statuses](https://docs.github.com/enterprise-server@3.0/rest/reference/commits#commit-statuses) for every submitted context must be in a `success`
         *     state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
         *     specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
         *     not require any contexts or create any commit statuses, the deployment will always succeed.
         *
         *     The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
         *     field that will be passed on when a deployment event is dispatched.
         *
         *     The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
         *     be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
         *     application with debugging enabled.
         *
         *     Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
         *
         *     #### Merged branch response
         *     You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
         *     a deployment. This auto-merge happens when:
         *     *   Auto-merge option is enabled in the repository
         *     *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
         *     *   There are no merge conflicts
         *
         *     If there are no new commits in the base branch, a new request to create a deployment should give a successful
         *     response.
         *
         *     #### Merge conflict response
         *     This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
         *     be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
         *
         *     #### Failed commit status checks
         *     This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
         *     status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
         */
        post: operations["repos/create-deployment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/deployments/{deployment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a deployment */
        get: operations["repos/get-deployment"];
        put?: never;
        post?: never;
        /**
         * Delete a deployment
         * @description If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.
         *
         *     To set a deployment as inactive, you must:
         *
         *     *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
         *     *   Mark the active deployment as inactive by adding any non-successful deployment status.
         *
         *     For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deployment-status)."
         */
        delete: operations["repos/delete-deployment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List deployment statuses
         * @description Users with pull access can view deployment statuses for a deployment:
         */
        get: operations["repos/list-deployment-statuses"];
        put?: never;
        /**
         * Create a deployment status
         * @description Users with `push` access can create deployment statuses for a given deployment.
         *
         *     GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
         */
        post: operations["repos/create-deployment-status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a deployment status
         * @description Users with pull access can view a deployment status for a deployment:
         */
        get: operations["repos/get-deployment-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/dispatches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a repository dispatch event
         * @description You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#repository_dispatch)."
         *
         *     The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
         *
         *     This endpoint requires write access to the repository by providing either:
         *
         *       - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
         *       - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
         *
         *     This input example shows how you can use the `client_payload` as a test to debug your workflow.
         */
        post: operations["repos/create-dispatch-event"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repository events */
        get: operations["activity/list-repo-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/forks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List forks */
        get: operations["repos/list-forks"];
        put?: never;
        /**
         * Create a fork
         * @description Create a fork for the authenticated user.
         *
         *     **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
         */
        post: operations["repos/create-fork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/blobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a blob */
        post: operations["git/create-blob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a blob
         * @description The `content` in the response will always be Base64 encoded.
         *
         *     _Note_: This API supports blobs up to 100 megabytes in size.
         */
        get: operations["git/get-blob"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a commit
         * @description Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
         *
         *     **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        post: operations["git/create-commit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a commit
         * @description Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
         *
         *     **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        get: operations["git/get-commit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List matching references
         * @description Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
         *
         *     When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
         *
         *     **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
         *
         *     If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
         */
        get: operations["git/list-matching-refs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/ref/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a reference
         * @description Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
         *
         *     **Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
         */
        get: operations["git/get-ref"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/refs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a reference
         * @description Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
         */
        post: operations["git/create-ref"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/refs/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a reference */
        delete: operations["git/delete-ref"];
        options?: never;
        head?: never;
        /** Update a reference */
        patch: operations["git/update-ref"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a tag object
         * @description Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
         *
         *     **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        post: operations["git/create-tag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tag
         * @description **Signature verification object**
         *
         *     The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
         *
         *     | Name | Type | Description |
         *     | ---- | ---- | ----------- |
         *     | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
         *     | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
         *     | `signature` | `string` | The signature that was extracted from the commit. |
         *     | `payload` | `string` | The value that was signed. |
         *
         *     These are the possible values for `reason` in the `verification` object:
         *
         *     | Value | Description |
         *     | ----- | ----------- |
         *     | `expired_key` | The key that made the signature is expired. |
         *     | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
         *     | `gpgverify_error` | There was an error communicating with the signature verification service. |
         *     | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
         *     | `unsigned` | The object does not include a signature. |
         *     | `unknown_signature_type` | A non-PGP signature was found in the commit. |
         *     | `no_user` | No user was associated with the `committer` email address in the commit. |
         *     | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
         *     | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
         *     | `unknown_key` | The key that made the signature has not been registered with any user's account. |
         *     | `malformed_signature` | There was an error parsing the signature. |
         *     | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
         *     | `valid` | None of the above errors applied, so the signature is considered to be verified. |
         */
        get: operations["git/get-tag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/trees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a tree
         * @description The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
         *
         *     If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.0/rest/reference/git#update-a-reference)."
         */
        post: operations["git/create-tree"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a tree
         * @description Returns a single tree using the SHA1 value for that tree.
         *
         *     If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
         */
        get: operations["git/get-tree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repository webhooks */
        get: operations["repos/list-webhooks"];
        put?: never;
        /**
         * Create a repository webhook
         * @description Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
         *     share the same `config` as long as those webhooks do not have any `events` that overlap.
         */
        post: operations["repos/create-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/hooks/{hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository webhook
         * @description Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
         */
        get: operations["repos/get-webhook"];
        put?: never;
        post?: never;
        /** Delete a repository webhook */
        delete: operations["repos/delete-webhook"];
        options?: never;
        head?: never;
        /**
         * Update a repository webhook
         * @description Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
         */
        patch: operations["repos/update-webhook"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/hooks/{hook_id}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a webhook configuration for a repository
         * @description Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
         *
         *     Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
         */
        get: operations["repos/get-webhook-config-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a webhook configuration for a repository
         * @description Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
         *
         *     Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
         */
        patch: operations["repos/update-webhook-config-for-repo"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ping a repository webhook
         * @description This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
         */
        post: operations["repos/ping-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test the push repository webhook
         * @description This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
         *
         *     **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
         */
        post: operations["repos/test-push-webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/installation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository installation for the authenticated app
         * @description Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-repo-installation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository invitations
         * @description When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
         */
        get: operations["repos/list-invitations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/invitations/{invitation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a repository invitation */
        delete: operations["repos/delete-invitation"];
        options?: never;
        head?: never;
        /** Update a repository invitation */
        patch: operations["repos/update-invitation"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository issues
         * @description List issues in a repository.
         *
         *     **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
         *     reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
         *     the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
         *     request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
         */
        get: operations["issues/list-for-repo"];
        put?: never;
        /**
         * Create an issue
         * @description Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["issues/create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List issue comments for a repository
         * @description By default, Issue Comments are ordered by ascending ID.
         */
        get: operations["issues/list-comments-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an issue comment */
        get: operations["issues/get-comment"];
        put?: never;
        post?: never;
        /** Delete an issue comment */
        delete: operations["issues/delete-comment"];
        options?: never;
        head?: never;
        /** Update an issue comment */
        patch: operations["issues/update-comment"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for an issue comment
         * @description List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
         */
        get: operations["reactions/list-for-issue-comment"];
        put?: never;
        /**
         * Create reaction for an issue comment
         * @description Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
         */
        post: operations["reactions/create-for-issue-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an issue comment reaction
         * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
         *
         *     Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
         */
        delete: operations["reactions/delete-for-issue-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List issue events for a repository */
        get: operations["issues/list-events-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an issue event */
        get: operations["issues/get-event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an issue
         * @description The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
         *     [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
         *     the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
         *     returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
         *     access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
         *     to the [`issues`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#issues) webhook.
         *
         *     **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
         *     reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
         *     the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
         *     request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
         */
        get: operations["issues/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update an issue
         * @description Issue owners and users with push access can edit an issue.
         */
        patch: operations["issues/update"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add assignees to an issue
         * @description Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
         */
        post: operations["issues/add-assignees"];
        /**
         * Remove assignees from an issue
         * @description Removes one or more assignees from an issue.
         */
        delete: operations["issues/remove-assignees"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List issue comments
         * @description Issue Comments are ordered by ascending ID.
         */
        get: operations["issues/list-comments"];
        put?: never;
        /**
         * Create an issue comment
         * @description This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["issues/create-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List issue events */
        get: operations["issues/list-events"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List labels for an issue */
        get: operations["issues/list-labels-on-issue"];
        /**
         * Set labels for an issue
         * @description Removes any previous labels and sets the new labels for an issue.
         */
        put: operations["issues/set-labels"];
        /** Add labels to an issue */
        post: operations["issues/add-labels"];
        /** Remove all labels from an issue */
        delete: operations["issues/remove-all-labels"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a label from an issue
         * @description Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
         */
        delete: operations["issues/remove-label"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Lock an issue
         * @description Users with push access can lock an issue or pull request's conversation.
         *
         *     Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["issues/lock"];
        post?: never;
        /**
         * Unlock an issue
         * @description Users with push access can unlock an issue's conversation.
         */
        delete: operations["issues/unlock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for an issue
         * @description List the reactions to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues).
         */
        get: operations["reactions/list-for-issue"];
        put?: never;
        /**
         * Create reaction for an issue
         * @description Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
         */
        post: operations["reactions/create-for-issue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete an issue reaction
         * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
         *
         *     Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/).
         */
        delete: operations["reactions/delete-for-issue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List timeline events for an issue */
        get: operations["issues/list-events-for-timeline"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List deploy keys */
        get: operations["repos/list-deploy-keys"];
        put?: never;
        /**
         * Create a deploy key
         * @description You can create a read-only deploy key.
         */
        post: operations["repos/create-deploy-key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a deploy key */
        get: operations["repos/get-deploy-key"];
        put?: never;
        post?: never;
        /**
         * Delete a deploy key
         * @description Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
         */
        delete: operations["repos/delete-deploy-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List labels for a repository */
        get: operations["issues/list-labels-for-repo"];
        put?: never;
        /** Create a label */
        post: operations["issues/create-label"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/labels/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a label */
        get: operations["issues/get-label"];
        put?: never;
        post?: never;
        /** Delete a label */
        delete: operations["issues/delete-label"];
        options?: never;
        head?: never;
        /** Update a label */
        patch: operations["issues/update-label"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository languages
         * @description Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
         */
        get: operations["repos/list-languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the license for a repository
         * @description This method returns the contents of the repository's license file, if one is detected.
         *
         *     Similar to [Get repository content](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
         */
        get: operations["licenses/get-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/merges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Merge a branch */
        post: operations["repos/merge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/milestones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List milestones */
        get: operations["issues/list-milestones"];
        put?: never;
        /** Create a milestone */
        post: operations["issues/create-milestone"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/milestones/{milestone_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a milestone */
        get: operations["issues/get-milestone"];
        put?: never;
        post?: never;
        /** Delete a milestone */
        delete: operations["issues/delete-milestone"];
        options?: never;
        head?: never;
        /** Update a milestone */
        patch: operations["issues/update-milestone"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List labels for issues in a milestone */
        get: operations["issues/list-labels-for-milestone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository notifications for the authenticated user
         * @description List all notifications for the current user.
         */
        get: operations["activity/list-repo-notifications-for-authenticated-user"];
        /**
         * Mark repository notifications as read
         * @description Marks all notifications in a repository as "read" removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
         */
        put: operations["activity/mark-repo-notifications-as-read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a GitHub Enterprise Server Pages site */
        get: operations["repos/get-pages"];
        /**
         * Update information about a GitHub Enterprise Server Pages site
         * @description Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
         */
        put: operations["repos/update-information-about-pages-site"];
        /**
         * Create a GitHub Enterprise Server Pages site
         * @description Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
         */
        post: operations["repos/create-pages-site"];
        /** Delete a GitHub Enterprise Server Pages site */
        delete: operations["repos/delete-pages-site"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pages/builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List GitHub Enterprise Server Pages builds */
        get: operations["repos/list-pages-builds"];
        put?: never;
        /**
         * Request a GitHub Enterprise Server Pages build
         * @description You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
         *
         *     Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
         */
        post: operations["repos/request-pages-build"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pages/builds/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest Pages build */
        get: operations["repos/get-latest-pages-build"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pages/builds/{build_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get GitHub Enterprise Server Pages build */
        get: operations["repos/get-pages-build"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pre-receive-hooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pre-receive hooks for a repository
         * @description List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
         */
        get: operations["enterprise-admin/list-pre-receive-hooks-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a pre-receive hook for a repository */
        get: operations["enterprise-admin/get-pre-receive-hook-for-repo"];
        put?: never;
        post?: never;
        /**
         * Remove pre-receive hook enforcement for a repository
         * @description Deletes any overridden enforcement on this repository for the specified hook.
         *
         *     Responds with effective values inherited from owner and/or global level.
         */
        delete: operations["enterprise-admin/remove-pre-receive-hook-enforcement-for-repo"];
        options?: never;
        head?: never;
        /**
         * Update pre-receive hook enforcement for a repository
         * @description For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
         */
        patch: operations["enterprise-admin/update-pre-receive-hook-enforcement-for-repo"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository projects
         * @description Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        get: operations["projects/list-for-repo"];
        put?: never;
        /**
         * Create a repository project
         * @description Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
         */
        post: operations["projects/create-for-repo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pull requests
         * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         */
        get: operations["pulls/list"];
        put?: never;
        /**
         * Create a pull request
         * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
         *
         *     You can create a new pull request.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
         */
        post: operations["pulls/create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List review comments in a repository
         * @description Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
         */
        get: operations["pulls/list-review-comments-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a review comment for a pull request
         * @description Provides details for a review comment.
         */
        get: operations["pulls/get-review-comment"];
        put?: never;
        post?: never;
        /**
         * Delete a review comment for a pull request
         * @description Deletes a review comment.
         */
        delete: operations["pulls/delete-review-comment"];
        options?: never;
        head?: never;
        /**
         * Update a review comment for a pull request
         * @description Enables you to edit a review comment.
         */
        patch: operations["pulls/update-review-comment"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a pull request review comment
         * @description List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
         */
        get: operations["reactions/list-for-pull-request-review-comment"];
        put?: never;
        /**
         * Create reaction for a pull request review comment
         * @description Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
         */
        post: operations["reactions/create-for-pull-request-review-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a pull request comment reaction
         * @description **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
         *
         *     Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
         */
        delete: operations["reactions/delete-for-pull-request-comment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a pull request
         * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     Lists details of a pull request by providing its number.
         *
         *     When you get, [create](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
         *
         *     The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
         *
         *     The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
         *
         *     *   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
         *     *   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
         *     *   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
         *
         *     Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
         */
        get: operations["pulls/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a pull request
         * @description Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
         */
        patch: operations["pulls/update"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List review comments on a pull request
         * @description Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
         */
        get: operations["pulls/list-review-comments"];
        put?: never;
        /**
         * Create a review comment for a pull request
         * @description
         *     Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
         *
         *     You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
         *
         *     **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["pulls/create-review-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a reply for a review comment
         * @description Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["pulls/create-reply-for-review-comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List commits on a pull request
         * @description Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) endpoint.
         */
        get: operations["pulls/list-commits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List pull requests files
         * @description **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
         */
        get: operations["pulls/list-files"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a pull request has been merged */
        get: operations["pulls/check-if-merged"];
        /**
         * Merge a pull request
         * @description This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        put: operations["pulls/merge"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List requested reviewers for a pull request */
        get: operations["pulls/list-requested-reviewers"];
        put?: never;
        /**
         * Request reviewers for a pull request
         * @description This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["pulls/request-reviewers"];
        /** Remove requested reviewers from a pull request */
        delete: operations["pulls/remove-requested-reviewers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reviews for a pull request
         * @description The list of reviews returns in chronological order.
         */
        get: operations["pulls/list-reviews"];
        put?: never;
        /**
         * Create a review for a pull request
         * @description This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         *
         *     Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
         *
         *     **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) endpoint.
         *
         *     The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
         */
        post: operations["pulls/create-review"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a review for a pull request */
        get: operations["pulls/get-review"];
        /**
         * Update a review for a pull request
         * @description Update the review summary comment with new text.
         */
        put: operations["pulls/update-review"];
        post?: never;
        /** Delete a pending review for a pull request */
        delete: operations["pulls/delete-pending-review"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List comments for a pull request review
         * @description List comments for a specific pull request review.
         */
        get: operations["pulls/list-comments-for-review"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Dismiss a review for a pull request
         * @description **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
         */
        put: operations["pulls/dismiss-review"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a review for a pull request */
        post: operations["pulls/submit-review"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a pull request branch
         * @description Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
         */
        put: operations["pulls/update-branch"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/readme": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository README
         * @description Gets the preferred README for a repository.
         *
         *     READMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
         */
        get: operations["repos/get-readme"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/readme/{dir}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a repository README for a directory
         * @description Gets the README from a repository directory.
         *
         *     READMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
         */
        get: operations["repos/get-readme-in-directory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List releases
         * @description This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-tags).
         *
         *     Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
         */
        get: operations["repos/list-releases"];
        put?: never;
        /**
         * Create a release
         * @description Users with push access to the repository can create a release.
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["repos/create-release"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a release asset
         * @description To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
         */
        get: operations["repos/get-release-asset"];
        put?: never;
        post?: never;
        /** Delete a release asset */
        delete: operations["repos/delete-release-asset"];
        options?: never;
        head?: never;
        /**
         * Update a release asset
         * @description Users with push access to the repository can edit a release asset.
         */
        patch: operations["repos/update-release-asset"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the latest release
         * @description View the latest published full release for the repository.
         *
         *     The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
         */
        get: operations["repos/get-latest-release"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases/tags/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a release by tag name
         * @description Get a published release with the specified tag.
         */
        get: operations["repos/get-release-by-tag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases/{release_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a release
         * @description **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia).
         */
        get: operations["repos/get-release"];
        put?: never;
        post?: never;
        /**
         * Delete a release
         * @description Users with push access to the repository can delete a release.
         */
        delete: operations["repos/delete-release"];
        options?: never;
        head?: never;
        /**
         * Update a release
         * @description Users with push access to the repository can edit a release.
         */
        patch: operations["repos/update-release"];
        trace?: never;
    };
    "/repos/{owner}/{repo}/releases/{release_id}/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List release assets */
        get: operations["repos/list-release-assets"];
        put?: never;
        /**
         * Upload a release asset
         * @description This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
         *     the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-release) to upload a release asset.
         *
         *     You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
         *
         *     Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
         *
         *     `application/zip`
         *
         *     GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
         *     you'll still need to pass your authentication to be able to upload an asset.
         *
         *     When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
         *
         *     **Notes:**
         *     *   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-assets-for-a-release)"
         *     endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
         *     *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
         */
        post: operations["repos/upload-release-asset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stargazers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List stargazers
         * @description Lists the people that have starred the repository.
         *
         *     You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
         */
        get: operations["activity/list-stargazers-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stats/code_frequency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the weekly commit activity
         * @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
         */
        get: operations["repos/get-code-frequency-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stats/commit_activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the last year of commit activity
         * @description Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
         */
        get: operations["repos/get-commit-activity-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stats/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all contributor commit activity
         * @description
         *     Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
         *
         *     *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
         *     *   `a` - Number of additions
         *     *   `d` - Number of deletions
         *     *   `c` - Number of commits
         */
        get: operations["repos/get-contributors-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stats/participation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the weekly commit count
         * @description Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
         *
         *     The array order is oldest week (index 0) to most recent week.
         */
        get: operations["repos/get-participation-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/stats/punch_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the hourly commit count for each day
         * @description Each array contains the day number, hour number, and number of commits:
         *
         *     *   `0-6`: Sunday - Saturday
         *     *   `0-23`: Hour of day
         *     *   Number of commits
         *
         *     For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
         */
        get: operations["repos/get-punch-card-stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/statuses/{sha}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a commit status
         * @description Users with push access in a repository can create commit statuses for a given SHA.
         *
         *     Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
         */
        post: operations["repos/create-commit-status"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List watchers
         * @description Lists the people watching the specified repository.
         */
        get: operations["activity/list-watchers-for-repo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a repository subscription */
        get: operations["activity/get-repo-subscription"];
        /**
         * Set a repository subscription
         * @description If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#delete-a-repository-subscription) completely.
         */
        put: operations["activity/set-repo-subscription"];
        post?: never;
        /**
         * Delete a repository subscription
         * @description This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#set-a-repository-subscription).
         */
        delete: operations["activity/delete-repo-subscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repository tags */
        get: operations["repos/list-tags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/tarball/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a repository archive (tar)
         * @description Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
         *     `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
         *     the `Location` header to make a second `GET` request.
         *     **Note**: For private repositories, these links are temporary and expire after five minutes.
         */
        get: operations["repos/download-tarball-archive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List repository teams */
        get: operations["repos/list-teams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all repository topics */
        get: operations["repos/get-all-topics"];
        /** Replace all repository topics */
        put: operations["repos/replace-all-topics"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer a repository
         * @description A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
         */
        post: operations["repos/transfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{owner}/{repo}/zipball/{ref}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a repository archive (zip)
         * @description Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
         *     `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
         *     the `Location` header to make a second `GET` request.
         *     **Note**: For private repositories, these links are temporary and expire after five minutes.
         */
        get: operations["repos/download-zipball-archive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repos/{template_owner}/{template_repo}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a repository using a template
         * @description Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
         *
         *     **OAuth scope requirements**
         *
         *     When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
         *
         *     *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
         *     *   `repo` scope to create a private repository
         */
        post: operations["repos/create-using-template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public repositories
         * @description Lists all public repositories in the order that they were created.
         *
         *     Note:
         *     - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
         *     - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
         */
        get: operations["repos/list-public"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search code
         * @description Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
         *
         *     `q=addClass+in:file+language:js+repo:jquery/jquery`
         *
         *     This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
         *
         *     #### Considerations for code search
         *
         *     Due to the complexity of searching code, there are a few restrictions on how searches are performed:
         *
         *     *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
         *     *   Only files smaller than 384 KB are searchable.
         *     *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
         *     language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
         */
        get: operations["search/code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/commits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search commits
         * @description Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
         *     metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
         *
         *     `q=repo:octocat/Spoon-Knife+css`
         */
        get: operations["search/commits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search issues and pull requests
         * @description Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
         *     search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
         *
         *     `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
         *
         *     This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
         *
         *     **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
         */
        get: operations["search/issues-and-pull-requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search labels
         * @description Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
         *
         *     `q=bug+defect+enhancement&repository_id=64778136`
         *
         *     The labels that best match the query appear first in the search results.
         */
        get: operations["search/labels"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search repositories
         * @description Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
         *
         *     `q=tetris+language:assembly&sort=stars&order=desc`
         *
         *     This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
         *
         *     When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
         *
         *     `q=topic:ruby+topic:rails`
         */
        get: operations["search/repos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/topics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search topics
         * @description Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
         *
         *     When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
         *
         *     `q=ruby+is:featured`
         *
         *     This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
         */
        get: operations["search/topics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search users
         * @description Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination).
         *
         *     When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/enterprise-server@3.0/rest/reference/search#text-match-metadata).
         *
         *     For example, if you're looking for a list of popular users, you might try this query:
         *
         *     `q=tom+repos:%3E42+followers:%3E1000`
         *
         *     This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
         */
        get: operations["search/users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/configcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the configuration status
         * @description This endpoint allows you to check the status of the most recent configuration process:
         *
         *     Note that you may need to wait several seconds after you start a process before you can check its status.
         *
         *     The different statuses are:
         *
         *     | Status        | Description                       |
         *     | ------------- | --------------------------------- |
         *     | `PENDING`     | The job has not started yet       |
         *     | `CONFIGURING` | The job is running                |
         *     | `DONE`        | The job has finished correctly    |
         *     | `FAILED`      | The job has finished unexpectedly |
         */
        get: operations["enterprise-admin/get-configuration-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/configure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a configuration process
         * @description This endpoint allows you to start a configuration process at any time for your updated settings to take effect:
         */
        post: operations["enterprise-admin/start-configuration-process"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/maintenance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the maintenance status
         * @description Check your installation's maintenance status:
         */
        get: operations["enterprise-admin/get-maintenance-status"];
        put?: never;
        /**
         * Enable or disable maintenance mode
         * @description **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        post: operations["enterprise-admin/enable-or-disable-maintenance-mode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get settings */
        get: operations["enterprise-admin/get-settings"];
        /**
         * Set settings
         * @description For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings).
         *
         *     **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        put: operations["enterprise-admin/set-settings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/settings/authorized-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all authorized SSH keys */
        get: operations["enterprise-admin/get-all-authorized-ssh-keys"];
        put?: never;
        /**
         * Add an authorized SSH key
         * @description **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        post: operations["enterprise-admin/add-authorized-ssh-key"];
        /**
         * Remove an authorized SSH key
         * @description **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        delete: operations["enterprise-admin/remove-authorized-ssh-key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a GitHub license
         * @description When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.
         *
         *     Note that you need to `POST` to [`/setup/api/configure`](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#start-a-configuration-process) to start the actual configuration process.
         *
         *     When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:
         *
         *     1.  If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.
         *     2.  If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.
         *
         *     **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        post: operations["enterprise-admin/create-enterprise-server-license"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/setup/api/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade a license
         * @description This API upgrades your license and also triggers the configuration process.
         *
         *     **Note:** The request body for this operation must be submitted as `application/x-www-form-urlencoded` data. You can submit a parameter value as a string, or you can use a tool such as `curl` to submit a parameter value as the contents of a text file. For more information, see the [`curl` documentation](https://curl.se/docs/manpage.html#--data-urlencode).
         */
        post: operations["enterprise-admin/upgrade-license"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a team (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-team-by-name) endpoint.
         */
        get: operations["teams/get-legacy"];
        put?: never;
        post?: never;
        /**
         * Delete a team (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-team) endpoint.
         *
         *     To delete a team, the authenticated user must be an organization owner or team maintainer.
         *
         *     If you are an organization owner, deleting a parent team will delete all of its child teams as well.
         */
        delete: operations["teams/delete-legacy"];
        options?: never;
        head?: never;
        /**
         * Update a team (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-team) endpoint.
         *
         *     To edit a team, the authenticated user must either be an organization owner or a team maintainer.
         *
         *     **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
         */
        patch: operations["teams/update-legacy"];
        trace?: never;
    };
    "/teams/{team_id}/discussions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discussions (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussions) endpoint.
         *
         *     List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["teams/list-discussions-legacy"];
        put?: never;
        /**
         * Create a discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion) endpoint.
         *
         *     Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["teams/create-discussion-legacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/discussions/{discussion_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion) endpoint.
         *
         *     Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["teams/get-discussion-legacy"];
        put?: never;
        post?: never;
        /**
         * Delete a discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion) endpoint.
         *
         *     Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["teams/delete-discussion-legacy"];
        options?: never;
        head?: never;
        /**
         * Update a discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion) endpoint.
         *
         *     Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        patch: operations["teams/update-discussion-legacy"];
        trace?: never;
    };
    "/teams/{team_id}/discussions/{discussion_number}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discussion comments (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-discussion-comments) endpoint.
         *
         *     List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["teams/list-discussion-comments-legacy"];
        put?: never;
        /**
         * Create a discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-discussion-comment) endpoint.
         *
         *     Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         *
         *     This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
         */
        post: operations["teams/create-discussion-comment-legacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-a-discussion-comment) endpoint.
         *
         *     Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["teams/get-discussion-comment-legacy"];
        put?: never;
        post?: never;
        /**
         * Delete a discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#delete-a-discussion-comment) endpoint.
         *
         *     Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["teams/delete-discussion-comment-legacy"];
        options?: never;
        head?: never;
        /**
         * Update a discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#update-a-discussion-comment) endpoint.
         *
         *     Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        patch: operations["teams/update-discussion-comment-legacy"];
        trace?: never;
    };
    "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a team discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
         *
         *     List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["reactions/list-for-team-discussion-comment-legacy"];
        put?: never;
        /**
         * Create reaction for a team discussion comment (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
         *
         *     Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
         */
        post: operations["reactions/create-for-team-discussion-comment-legacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/discussions/{discussion_number}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List reactions for a team discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
         *
         *     List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["reactions/list-for-team-discussion-legacy"];
        put?: never;
        /**
         * Create reaction for a team discussion (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
         *
         *     Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
         */
        post: operations["reactions/create-for-team-discussion-legacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team members (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-members) endpoint.
         *
         *     Team members will include the members of child teams.
         */
        get: operations["teams/list-members-legacy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/members/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team member (Legacy)
         * @deprecated
         * @description The "Get team member" endpoint (described below) is deprecated.
         *
         *     We recommend using the [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
         *
         *     To list members in a team, the team must be visible to the authenticated user.
         */
        get: operations["teams/get-member-legacy"];
        /**
         * Add team member (Legacy)
         * @deprecated
         * @description The "Add team member" endpoint (described below) is deprecated.
         *
         *     We recommend using the [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
         *
         *     Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         *
         *     Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["teams/add-member-legacy"];
        post?: never;
        /**
         * Remove team member (Legacy)
         * @deprecated
         * @description The "Remove team member" endpoint (described below) is deprecated.
         *
         *     We recommend using the [Remove team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
         *
         *     Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         */
        delete: operations["teams/remove-member-legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/memberships/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team membership for a user (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#get-team-membership-for-a-user) endpoint.
         *
         *     Team members will include the members of child teams.
         *
         *     To get a user's membership with a team, the team must be visible to the authenticated user.
         *
         *     **Note:**
         *     The response contains the `state` of the membership and the member's `role`.
         *
         *     The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team).
         */
        get: operations["teams/get-membership-for-user-legacy"];
        /**
         * Add or update team membership for a user (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
         *
         *     Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         *
         *     If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
         *
         *     If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
         */
        put: operations["teams/add-or-update-membership-for-user-legacy"];
        post?: never;
        /**
         * Remove team membership for a user (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
         *
         *     Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
         *
         *     To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
         *
         *     **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
         */
        delete: operations["teams/remove-membership-for-user-legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team projects (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-projects) endpoint.
         *
         *     Lists the organization projects for a team.
         */
        get: operations["teams/list-projects-legacy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check team permissions for a project (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
         *
         *     Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
         */
        get: operations["teams/check-permissions-for-project-legacy"];
        /**
         * Add or update team project permissions (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
         *
         *     Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
         */
        put: operations["teams/add-or-update-project-permissions-legacy"];
        post?: never;
        /**
         * Remove a project from a team (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-a-project-from-a-team) endpoint.
         *
         *     Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
         */
        delete: operations["teams/remove-project-legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team repositories (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-team-repositories) endpoint.
         */
        get: operations["teams/list-repos-legacy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/repos/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check team permissions for a repository (Legacy)
         * @deprecated
         * @description **Note**: Repositories inherited through a parent team will also be checked.
         *
         *     **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
         *
         *     You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
         */
        get: operations["teams/check-permissions-for-repo-legacy"];
        /**
         * Add or update team repository permissions (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
         *
         *     To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
         *
         *     Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["teams/add-or-update-repo-permissions-legacy"];
        post?: never;
        /**
         * Remove a repository from a team (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
         *
         *     If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
         */
        delete: operations["teams/remove-repo-legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{team_id}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List child teams (Legacy)
         * @deprecated
         * @description **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#list-child-teams) endpoint.
         */
        get: operations["teams/list-child-legacy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the authenticated user
         * @description If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
         *
         *     If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
         */
        get: operations["users/get-authenticated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update the authenticated user
         * @description **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
         */
        patch: operations["users/update-authenticated"];
        trace?: never;
    };
    "/user/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List email addresses for the authenticated user
         * @description Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
         */
        get: operations["users/list-emails-for-authenticated-user"];
        put?: never;
        /**
         * Add an email address for the authenticated user
         * @description This endpoint is accessible with the `user` scope.
         */
        post: operations["users/add-email-for-authenticated-user"];
        /**
         * Delete an email address for the authenticated user
         * @description This endpoint is accessible with the `user` scope.
         */
        delete: operations["users/delete-email-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List followers of the authenticated user
         * @description Lists the people following the authenticated user.
         */
        get: operations["users/list-followers-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the people the authenticated user follows
         * @description Lists the people who the authenticated user follows.
         */
        get: operations["users/list-followed-by-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/following/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a person is followed by the authenticated user */
        get: operations["users/check-person-is-followed-by-authenticated"];
        /**
         * Follow a user
         * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         *
         *     Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
         */
        put: operations["users/follow"];
        post?: never;
        /**
         * Unfollow a user
         * @description Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
         */
        delete: operations["users/unfollow"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/gpg_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List GPG keys for the authenticated user
         * @description Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["users/list-gpg-keys-for-authenticated-user"];
        put?: never;
        /**
         * Create a GPG key for the authenticated user
         * @description Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        post: operations["users/create-gpg-key-for-authenticated-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/gpg_keys/{gpg_key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a GPG key for the authenticated user
         * @description View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["users/get-gpg-key-for-authenticated-user"];
        put?: never;
        post?: never;
        /**
         * Delete a GPG key for the authenticated user
         * @description Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["users/delete-gpg-key-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List app installations accessible to the user access token
         * @description Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
         *
         *     You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
         *
         *     The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
         *
         *     You can find the permissions for the installation under the `permissions` key.
         */
        get: operations["apps/list-installations-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/installations/{installation_id}/repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories accessible to the user access token
         * @description List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
         *
         *     The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
         *
         *     You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
         *
         *     The access the user has to each repository is included in the hash under the `permissions` key.
         */
        get: operations["apps/list-installation-repos-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/installations/{installation_id}/repositories/{repository_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add a repository to an app installation
         * @description Add a single repository to an installation. The authenticated user must have admin access to the repository.
         *
         *     You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.0/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
         */
        put: operations["apps/add-repo-to-installation-for-authenticated-user"];
        post?: never;
        /**
         * Remove a repository from an app installation
         * @description Remove a single repository from an installation. The authenticated user must have admin access to the repository.
         *
         *     You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.0/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
         */
        delete: operations["apps/remove-repo-from-installation-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user account issues assigned to the authenticated user
         * @description List issues across owned and member repositories assigned to the authenticated user.
         *
         *     **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
         *     reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
         *     the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
         *     request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
         */
        get: operations["issues/list-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public SSH keys for the authenticated user
         * @description Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["users/list-public-ssh-keys-for-authenticated-user"];
        put?: never;
        /**
         * Create a public SSH key for the authenticated user
         * @description Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        post: operations["users/create-public-ssh-key-for-authenticated-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/keys/{key_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a public SSH key for the authenticated user
         * @description View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        get: operations["users/get-public-ssh-key-for-authenticated-user"];
        put?: never;
        post?: never;
        /**
         * Delete a public SSH key for the authenticated user
         * @description Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
         */
        delete: operations["users/delete-public-ssh-key-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/memberships/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List organization memberships for the authenticated user */
        get: operations["orgs/list-memberships-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/memberships/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an organization membership for the authenticated user */
        get: operations["orgs/get-membership-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update an organization membership for the authenticated user */
        patch: operations["orgs/update-membership-for-authenticated-user"];
        trace?: never;
    };
    "/user/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations for the authenticated user
         * @description List organizations for the authenticated user.
         *
         *     **OAuth scope requirements**
         *
         *     This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
         */
        get: operations["orgs/list-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a user project */
        post: operations["projects/create-for-authenticated-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/public_emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public email addresses for the authenticated user
         * @description Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
         */
        get: operations["users/list-public-emails-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories for the authenticated user
         * @description Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
         *
         *     The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
         */
        get: operations["repos/list-for-authenticated-user"];
        put?: never;
        /**
         * Create a repository for the authenticated user
         * @description Creates a new repository for the authenticated user.
         *
         *     **OAuth scope requirements**
         *
         *     When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
         *
         *     *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
         *     *   `repo` scope to create a private repository.
         */
        post: operations["repos/create-for-authenticated-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/repository_invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repository invitations for the authenticated user
         * @description When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
         */
        get: operations["repos/list-invitations-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/repository_invitations/{invitation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Decline a repository invitation */
        delete: operations["repos/decline-invitation-for-authenticated-user"];
        options?: never;
        head?: never;
        /** Accept a repository invitation */
        patch: operations["repos/accept-invitation-for-authenticated-user"];
        trace?: never;
    };
    "/user/starred": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories starred by the authenticated user
         * @description Lists repositories the authenticated user has starred.
         *
         *     You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
         */
        get: operations["activity/list-repos-starred-by-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/starred/{owner}/{repo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a repository is starred by the authenticated user */
        get: operations["activity/check-repo-is-starred-by-authenticated-user"];
        /**
         * Star a repository for the authenticated user
         * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["activity/star-repo-for-authenticated-user"];
        post?: never;
        /** Unstar a repository for the authenticated user */
        delete: operations["activity/unstar-repo-for-authenticated-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories watched by the authenticated user
         * @description Lists repositories the authenticated user is watching.
         */
        get: operations["activity/list-watched-repos-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List teams for the authenticated user
         * @description List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/).
         */
        get: operations["teams/list-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.
         *
         *     Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
         */
        get: operations["users/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user
         * @description Provides publicly available information about someone with a GitHub account.
         *
         *     GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"
         *
         *     The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#authentication).
         *
         *     The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.0/rest/reference/users#emails)".
         */
        get: operations["users/get-by-username"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events for the authenticated user
         * @description If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
         */
        get: operations["activity/list-events-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/events/orgs/{org}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organization events for the authenticated user
         * @description This is the user's organization dashboard. You must be authenticated as the user to view this.
         */
        get: operations["activity/list-org-events-for-authenticated-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/events/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List public events for a user */
        get: operations["activity/list-public-events-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List followers of a user
         * @description Lists the people following the specified user.
         */
        get: operations["users/list-followers-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/following": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the people a user follows
         * @description Lists the people who the specified user follows.
         */
        get: operations["users/list-following-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/following/{target_user}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a user follows another user */
        get: operations["users/check-following-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/gists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List gists for a user
         * @description Lists public gists for the specified user:
         */
        get: operations["gists/list-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/gpg_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List GPG keys for a user
         * @description Lists the GPG keys for a user. This information is accessible by anyone.
         */
        get: operations["users/list-gpg-keys-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/hovercard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contextual information for a user
         * @description Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
         *
         *     The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
         *
         *     ```shell
         *      curl -u username:token
         *       https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
         *     ```
         */
        get: operations["users/get-context-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/installation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user installation for the authenticated app
         * @description Enables an authenticated GitHub App to find the user’s installation information.
         *
         *     You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
         */
        get: operations["apps/get-user-installation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public keys for a user
         * @description Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
         */
        get: operations["users/list-public-keys-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/orgs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List organizations for a user
         * @description List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
         *
         *     This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
         */
        get: operations["orgs/list-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user projects */
        get: operations["projects/list-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/received_events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events received by the authenticated user
         * @description These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
         */
        get: operations["activity/list-received-events-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/received_events/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List public events received by a user */
        get: operations["activity/list-received-public-events-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories for a user
         * @description Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
         */
        get: operations["repos/list-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/site_admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Promote a user to be a site administrator
         * @description Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["enterprise-admin/promote-user-to-be-site-administrator"];
        post?: never;
        /**
         * Demote a site administrator
         * @description You can demote any user account except your own.
         */
        delete: operations["enterprise-admin/demote-site-administrator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/starred": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories starred by a user
         * @description Lists repositories a user has starred.
         *
         *     You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
         */
        get: operations["activity/list-repos-starred-by-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List repositories watched by a user
         * @description Lists repositories a user is watching.
         */
        get: operations["activity/list-repos-watched-by-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{username}/suspended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Suspend a user
         * @description If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.
         *
         *     You can suspend any user account except your own.
         *
         *     Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
         */
        put: operations["enterprise-admin/suspend-user"];
        post?: never;
        /**
         * Unsuspend a user
         * @description If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
         */
        delete: operations["enterprise-admin/unsuspend-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/zen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Zen of GitHub
         * @description Get a random sentence from the Zen of GitHub
         */
        get: operations["meta/get-zen"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "global-hook": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
                url?: string;
                content_type?: string;
                insecure_ssl?: string;
                secret?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
        };
        "global-hook-2": {
            type?: string;
            id?: number;
            name?: string;
            active?: boolean;
            events?: string[];
            config?: {
                url?: string;
                content_type?: string;
                insecure_ssl?: string;
            };
            updated_at?: string;
            created_at?: string;
            url?: string;
            ping_url?: string;
        };
        "public-key-full": {
            id: number;
            key: string;
            user_id: number | null;
            repository_id: number | null;
            url: string;
            title: string;
            read_only: boolean;
            verified: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            last_used: string | null;
        };
        "ldap-mapping-team": {
            ldap_dn?: string;
            id?: number;
            node_id?: string;
            url?: string;
            html_url?: string;
            name?: string;
            slug?: string;
            description?: string | null;
            privacy?: string;
            permission?: string;
            members_url?: string;
            repositories_url?: string;
            parent?: null;
        };
        /**
         * Ldap Private User
         * @description Ldap Private User
         */
        "ldap-mapping-user": {
            ldap_dn?: string;
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            /** Format: email */
            email: string | null;
            hireable: boolean | null;
            bio: string | null;
            twitter_username?: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            private_gists: number;
            total_private_repos: number;
            owned_private_repos: number;
            disk_usage: number;
            collaborators: number;
            two_factor_authentication: boolean;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            /** Format: date-time */
            suspended_at?: string;
            business_plus?: boolean;
        };
        /**
         * Organization Simple
         * @description Organization Simple
         */
        "organization-simple": {
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            repos_url: string;
            /** Format: uri */
            events_url: string;
            hooks_url: string;
            issues_url: string;
            members_url: string;
            public_members_url: string;
            avatar_url: string;
            description: string | null;
        };
        "pre-receive-environment": {
            id?: number;
            name?: string;
            image_url?: string;
            url?: string;
            html_url?: string;
            default_environment?: boolean;
            created_at?: string;
            hooks_count?: number;
            download?: {
                url?: string;
                state?: string;
                downloaded_at?: string | null;
                message?: string | null;
            };
        };
        "pre-receive-environment-download-status": {
            url?: string;
            state?: string;
            downloaded_at?: string | null;
            message?: string | null;
        };
        "pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            script?: string;
            script_repository?: {
                id?: number;
                full_name?: string;
                url?: string;
                html_url?: string;
            };
            environment?: {
                id?: number;
                name?: string;
                image_url?: string;
                url?: string;
                html_url?: string;
                default_environment?: boolean;
                created_at?: string;
                hooks_count?: number;
                download?: {
                    url?: string;
                    state?: string;
                    downloaded_at?: string | null;
                    message?: string | null;
                };
            };
            allow_downstream_configuration?: boolean;
        };
        /**
         * Simple User
         * @description Simple User
         */
        "simple-user": {
            name?: string | null;
            email?: string | null;
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            starred_at?: string;
        };
        /**
         * App Permissions
         * @description The permissions granted to the user-to-server access token.
         * @example {
         *       "contents": "read",
         *       "issues": "read",
         *       "deployments": "write",
         *       "single_file": "read"
         *     }
         */
        "app-permissions": {
            /**
             * @description The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
             * @enum {string}
             */
            actions?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
             * @enum {string}
             */
            administration?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
             * @enum {string}
             */
            checks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
             * @enum {string}
             */
            contents?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
             * @enum {string}
             */
            deployments?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
             * @enum {string}
             */
            environments?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
             * @enum {string}
             */
            issues?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
             * @enum {string}
             */
            metadata?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
             * @enum {string}
             */
            packages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
             * @enum {string}
             */
            pages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
             * @enum {string}
             */
            pull_requests?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
             * @enum {string}
             */
            repository_hooks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
             * @enum {string}
             */
            repository_projects?: "read" | "write" | "admin";
            /**
             * @description The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
             * @enum {string}
             */
            secret_scanning_alerts?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
             * @enum {string}
             */
            secrets?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
             * @enum {string}
             */
            security_events?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
             * @enum {string}
             */
            single_file?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
             * @enum {string}
             */
            statuses?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
             * @enum {string}
             */
            vulnerability_alerts?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
             * @enum {string}
             */
            workflows?: "write";
            /**
             * @description The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
             * @enum {string}
             */
            members?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_administration?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_hooks?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
             * @enum {string}
             */
            organization_plan?: "read";
            /**
             * @description The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
             * @enum {string}
             */
            organization_projects?: "read" | "write" | "admin";
            /**
             * @description The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_packages?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_secrets?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_self_hosted_runners?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
             * @enum {string}
             */
            organization_user_blocking?: "read" | "write";
            /**
             * @description The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
             * @enum {string}
             */
            team_discussions?: "read" | "write";
            /**
             * @description The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
             * @enum {string}
             */
            content_references?: "read" | "write";
        };
        /** Scoped Installation */
        "scoped-installation": {
            permissions: components["schemas"]["app-permissions"];
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection: "all" | "selected";
            single_file_name: string | null;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
            /** Format: uri */
            repositories_url: string;
            account: components["schemas"]["simple-user"];
        };
        /**
         * Authorization
         * @description The authorization for an OAuth app, GitHub App, or a Personal Access Token.
         */
        authorization: {
            id: number;
            /** Format: uri */
            url: string;
            /** @description A list of scopes that this authorization is in. */
            scopes: string[] | null;
            token: string;
            token_last_eight: string | null;
            hashed_token: string | null;
            app: {
                client_id: string;
                name: string;
                /** Format: uri */
                url: string;
            };
            note: string | null;
            /** Format: uri */
            note_url: string | null;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            fingerprint: string | null;
            user?: null | components["schemas"]["simple-user"];
            installation?: null | components["schemas"]["scoped-installation"];
        };
        /**
         * GitHub app
         * @description GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
         */
        integration: {
            /** @description Unique identifier of the GitHub app */
            id: number;
            /** @description The slug name of the GitHub app */
            slug?: string;
            node_id: string;
            owner: null | components["schemas"]["simple-user"];
            /** @description The name of the GitHub app */
            name: string;
            description: string | null;
            /** Format: uri */
            external_url: string;
            /** Format: uri */
            html_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * @description The set of permissions for the GitHub app
             * @example {
             *       "issues": "read",
             *       "deployments": "write"
             *     }
             */
            permissions: {
                issues?: string;
                checks?: string;
                metadata?: string;
                contents?: string;
                deployments?: string;
            } & {
                [key: string]: string;
            };
            /** @description The list of events for the GitHub app */
            events: string[];
            /** @description The number of installations associated with the GitHub app */
            installations_count?: number;
            client_id?: string;
            client_secret?: string;
            webhook_secret?: string | null;
            pem?: string;
        };
        /**
         * Basic Error
         * @description Basic Error
         */
        "basic-error": {
            message?: string;
            documentation_url?: string;
            url?: string;
            status?: string;
        };
        /**
         * Validation Error Simple
         * @description Validation Error Simple
         */
        "validation-error-simple": {
            message: string;
            documentation_url: string;
            errors?: string[];
        };
        /**
         * Format: uri
         * @description The URL to which the payloads will be delivered.
         */
        "webhook-config-url": string;
        /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
        "webhook-config-content-type": string;
        /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers). */
        "webhook-config-secret": string;
        "webhook-config-insecure-ssl": string | number;
        /**
         * Webhook Configuration
         * @description Configuration object of the webhook
         */
        "webhook-config": {
            url?: components["schemas"]["webhook-config-url"];
            content_type?: components["schemas"]["webhook-config-content-type"];
            secret?: components["schemas"]["webhook-config-secret"];
            insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        };
        /**
         * Enterprise
         * @description An enterprise account
         */
        enterprise: {
            /** @description A short description of the enterprise. */
            description?: string | null;
            /** Format: uri */
            html_url: string;
            /**
             * Format: uri
             * @description The enterprise's website URL.
             */
            website_url?: string | null;
            /** @description Unique identifier of the enterprise */
            id: number;
            node_id: string;
            /** @description The name of the enterprise. */
            name: string;
            /** @description The slug url identifier for the enterprise. */
            slug: string;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            /** Format: uri */
            avatar_url: string;
        };
        /**
         * Installation
         * @description Installation
         */
        installation: {
            /** @description The ID of the installation. */
            id: number;
            account: (null | (components["schemas"]["simple-user"] | components["schemas"]["enterprise"])) | components["schemas"]["simple-user"] | components["schemas"]["enterprise"];
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection: "all" | "selected";
            /** Format: uri */
            access_tokens_url: string;
            /** Format: uri */
            repositories_url: string;
            /** Format: uri */
            html_url: string;
            app_id: number;
            /** @description The ID of the user or organization this token is being scoped to. */
            target_id: number;
            target_type: string;
            permissions: components["schemas"]["app-permissions"];
            events: string[];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            single_file_name: string | null;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
            app_slug: string;
            suspended_by: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            suspended_at: string | null;
            contact_email?: string | null;
        };
        /**
         * License Simple
         * @description License Simple
         */
        "license-simple": {
            key: string;
            name: string;
            /** Format: uri */
            url: string | null;
            spdx_id: string | null;
            node_id: string;
            /** Format: uri */
            html_url?: string;
        };
        /**
         * Repository
         * @description A git repository
         */
        repository: {
            /** @description Unique identifier of the repository */
            id: number;
            node_id: string;
            /** @description The name of the repository. */
            name: string;
            full_name: string;
            license: null | components["schemas"]["license-simple"];
            organization?: null | components["schemas"]["simple-user"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            deployments_url: string;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            /** Format: uri */
            stargazers_url: string;
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            trees_url: string;
            clone_url: string;
            /** Format: uri */
            mirror_url: string | null;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            /** @description The default branch of the repository. */
            default_branch: string;
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             */
            is_template: boolean;
            topics?: string[];
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /** Format: date-time */
            pushed_at: string | null;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge: boolean;
            template_repository?: {
                id?: number;
                node_id?: string;
                name?: string;
                full_name?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    avatar_url?: string;
                    gravatar_id?: string;
                    url?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    repos_url?: string;
                    events_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                private?: boolean;
                html_url?: string;
                description?: string;
                fork?: boolean;
                url?: string;
                archive_url?: string;
                assignees_url?: string;
                blobs_url?: string;
                branches_url?: string;
                collaborators_url?: string;
                comments_url?: string;
                commits_url?: string;
                compare_url?: string;
                contents_url?: string;
                contributors_url?: string;
                deployments_url?: string;
                downloads_url?: string;
                events_url?: string;
                forks_url?: string;
                git_commits_url?: string;
                git_refs_url?: string;
                git_tags_url?: string;
                git_url?: string;
                issue_comment_url?: string;
                issue_events_url?: string;
                issues_url?: string;
                keys_url?: string;
                labels_url?: string;
                languages_url?: string;
                merges_url?: string;
                milestones_url?: string;
                notifications_url?: string;
                pulls_url?: string;
                releases_url?: string;
                ssh_url?: string;
                stargazers_url?: string;
                statuses_url?: string;
                subscribers_url?: string;
                subscription_url?: string;
                tags_url?: string;
                teams_url?: string;
                trees_url?: string;
                clone_url?: string;
                mirror_url?: string;
                hooks_url?: string;
                svn_url?: string;
                homepage?: string;
                language?: string;
                forks_count?: number;
                stargazers_count?: number;
                watchers_count?: number;
                size?: number;
                default_branch?: string;
                open_issues_count?: number;
                is_template?: boolean;
                topics?: string[];
                has_issues?: boolean;
                has_projects?: boolean;
                has_wiki?: boolean;
                has_pages?: boolean;
                has_downloads?: boolean;
                archived?: boolean;
                disabled?: boolean;
                visibility?: string;
                pushed_at?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    admin?: boolean;
                    maintain?: boolean;
                    push?: boolean;
                    triage?: boolean;
                    pull?: boolean;
                };
                allow_rebase_merge?: boolean;
                temp_clone_token?: string;
                allow_squash_merge?: boolean;
                delete_branch_on_merge?: boolean;
                allow_update_branch?: boolean;
                allow_merge_commit?: boolean;
                subscribers_count?: number;
                network_count?: number;
            } | null;
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit: boolean;
            /** @description Whether to allow forking this repo */
            allow_forking?: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
            starred_at?: string;
        };
        /**
         * Installation Token
         * @description Authentication token for a GitHub App installed on a user or org.
         */
        "installation-token": {
            token: string;
            expires_at: string;
            permissions?: components["schemas"]["app-permissions"];
            /** @enum {string} */
            repository_selection?: "all" | "selected";
            repositories?: components["schemas"]["repository"][];
            single_file?: string;
            has_multiple_single_files?: boolean;
            single_file_paths?: string[];
        };
        /**
         * Validation Error
         * @description Validation Error
         */
        "validation-error": {
            message: string;
            documentation_url: string;
            errors?: {
                resource?: string;
                field?: string;
                message?: string;
                code: string;
                index?: number;
                value?: (string | null) | (number | null) | (string[] | null);
            }[];
        };
        /**
         * Application Grant
         * @description The authorization associated with an OAuth Access.
         */
        "application-grant": {
            id: number;
            /** Format: uri */
            url: string;
            app: {
                client_id: string;
                name: string;
                /** Format: uri */
                url: string;
            };
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            scopes: string[];
            user?: null | components["schemas"]["simple-user"];
        };
        /**
         * Code Of Conduct
         * @description Code Of Conduct
         */
        "code-of-conduct": {
            key: string;
            name: string;
            /** Format: uri */
            url: string;
            body?: string;
            /** Format: uri */
            html_url: string | null;
        };
        /** @description The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see "[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.0/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)." */
        "announcement-message": string;
        /**
         * Format: date-time
         * @description The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.
         */
        "announcement-expiration": string | null;
        /**
         * Enterprise Announcement
         * @description Enterprise global announcement
         */
        announcement: {
            announcement: components["schemas"]["announcement-message"];
            expires_at?: components["schemas"]["announcement-expiration"];
        };
        "license-info": {
            seats?: string | number;
            seats_used?: number;
            seats_available?: string | number;
            kind?: string;
            days_until_expiration?: number;
            expire_at?: string;
        };
        /** Repository Enterprise Stats */
        "enterprise-repository-overview": {
            total_repos: number;
            root_repos: number;
            fork_repos: number;
            org_repos: number;
            total_pushes: number;
            total_wikis: number;
        };
        /** Hooks Enterprise Stats */
        "enterprise-hook-overview": {
            total_hooks: number;
            active_hooks: number;
            inactive_hooks: number;
        };
        /** Enterprise Pages Stats */
        "enterprise-page-overview": {
            total_pages: number;
        };
        /** Enterprise Organization Stats */
        "enterprise-organization-overview": {
            total_orgs: number;
            disabled_orgs: number;
            total_teams: number;
            total_team_members: number;
        };
        /** Enterprise User Stats */
        "enterprise-user-overview": {
            total_users: number;
            admin_users: number;
            suspended_users: number;
        };
        /** Enterprise Pull Request Stats */
        "enterprise-pull-request-overview": {
            total_pulls: number;
            merged_pulls: number;
            mergeable_pulls: number;
            unmergeable_pulls: number;
        };
        /** Enterprise Issue Stats */
        "enterprise-issue-overview": {
            total_issues: number;
            open_issues: number;
            closed_issues: number;
        };
        /** Enterprise Milestone Stats */
        "enterprise-milestone-overview": {
            total_milestones: number;
            open_milestones: number;
            closed_milestones: number;
        };
        /** Enterprise Gist Stats */
        "enterprise-gist-overview": {
            total_gists: number;
            private_gists: number;
            public_gists: number;
        };
        /** Enterprise Comment Stats */
        "enterprise-comment-overview": {
            total_commit_comments: number;
            total_gist_comments: number;
            total_issue_comments: number;
            total_pull_request_comments: number;
        };
        "enterprise-overview": {
            repos?: components["schemas"]["enterprise-repository-overview"];
            hooks?: components["schemas"]["enterprise-hook-overview"];
            pages?: components["schemas"]["enterprise-page-overview"];
            orgs?: components["schemas"]["enterprise-organization-overview"];
            users?: components["schemas"]["enterprise-user-overview"];
            pulls?: components["schemas"]["enterprise-pull-request-overview"];
            issues?: components["schemas"]["enterprise-issue-overview"];
            milestones?: components["schemas"]["enterprise-milestone-overview"];
            gists?: components["schemas"]["enterprise-gist-overview"];
            comments?: components["schemas"]["enterprise-comment-overview"];
        };
        /**
         * @description The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
         * @enum {string}
         */
        "enabled-organizations": "all" | "none" | "selected";
        /**
         * @description The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
         * @enum {string}
         */
        "allowed-actions": "all" | "local_only" | "selected";
        /** @description The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
        "selected-actions-url": string;
        "actions-enterprise-permissions": {
            enabled_organizations: components["schemas"]["enabled-organizations"];
            /** @description The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
            selected_organizations_url?: string;
            allowed_actions?: components["schemas"]["allowed-actions"];
            selected_actions_url?: components["schemas"]["selected-actions-url"];
        };
        "selected-actions": {
            /** @description Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
            github_owned_allowed: boolean;
            /** @description Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`." */
            patterns_allowed: string[];
        };
        "runner-groups-enterprise": {
            id: number;
            name: string;
            visibility: string;
            default: boolean;
            selected_organizations_url?: string;
            runners_url: string;
            allows_public_repositories: boolean;
        };
        /**
         * Self hosted runner label
         * @description A label for a self hosted runner
         */
        "runner-label": {
            /** @description Unique identifier of the label. */
            id?: number;
            /** @description Name of the label. */
            name: string;
            /**
             * @description The type of label. Read-only labels are applied automatically when the runner is configured.
             * @enum {string}
             */
            type?: "read-only" | "custom";
        };
        /**
         * Self hosted runners
         * @description A self hosted runner
         */
        runner: {
            /** @description The id of the runner. */
            id: number;
            /** @description The name of the runner. */
            name: string;
            /** @description The Operating System of the runner. */
            os: string;
            /** @description The status of the runner. */
            status: string;
            busy: boolean;
            labels: components["schemas"]["runner-label"][];
        };
        /**
         * Runner Application
         * @description Runner Application
         */
        "runner-application": {
            os: string;
            architecture: string;
            download_url: string;
            filename: string;
            /** @description A short lived bearer token used to download the runner, if needed. */
            temp_download_token?: string;
            sha256_checksum?: string;
        };
        /**
         * Authentication Token
         * @description Authentication Token
         */
        "authentication-token": {
            /** @description The token used for authentication */
            token: string;
            /**
             * Format: date-time
             * @description The time this token expires
             */
            expires_at: string;
            permissions?: Record<string, never>;
            /** @description The repositories this token has access to */
            repositories?: components["schemas"]["repository"][];
            single_file?: string | null;
            /**
             * @description Describe whether all repositories have been selected or there's a selection involved
             * @enum {string}
             */
            repository_selection?: "all" | "selected";
        };
        /**
         * Actor
         * @description Actor
         */
        actor: {
            id: number;
            login: string;
            display_login?: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            avatar_url: string;
        };
        /**
         * Milestone
         * @description A collection of related issues and pull requests.
         */
        milestone: {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            labels_url: string;
            id: number;
            node_id: string;
            /** @description The number of the milestone. */
            number: number;
            /**
             * @description The state of the milestone.
             * @default open
             * @enum {string}
             */
            state: "open" | "closed";
            /** @description The title of the milestone. */
            title: string;
            description: string | null;
            creator: null | components["schemas"]["simple-user"];
            open_issues: number;
            closed_issues: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            due_on: string | null;
        };
        /**
         * author_association
         * @description How the author is associated with the repository.
         * @enum {string}
         */
        author_association: "COLLABORATOR" | "CONTRIBUTOR" | "FIRST_TIMER" | "FIRST_TIME_CONTRIBUTOR" | "MANNEQUIN" | "MEMBER" | "NONE" | "OWNER";
        /** Reaction Rollup */
        "reaction-rollup": {
            /** Format: uri */
            url: string;
            total_count: number;
            "+1": number;
            "-1": number;
            laugh: number;
            confused: number;
            heart: number;
            hooray: number;
            eyes: number;
            rocket: number;
        };
        /**
         * Issue
         * @description Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
         */
        issue: {
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue
             */
            url: string;
            /** Format: uri */
            repository_url: string;
            labels_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            /** @description Number uniquely identifying the issue within its repository */
            number: number;
            /** @description State of the issue; either 'open' or 'closed' */
            state: string;
            /** @description Title of the issue */
            title: string;
            /** @description Contents of the issue */
            body?: string | null;
            user: null | components["schemas"]["simple-user"];
            /** @description Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
            labels: (string | {
                /** Format: int64 */
                id?: number;
                node_id?: string;
                /** Format: uri */
                url?: string;
                name?: string;
                description?: string | null;
                color?: string | null;
                default?: boolean;
            })[];
            assignee: null | components["schemas"]["simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            milestone: null | components["schemas"]["milestone"];
            locked: boolean;
            active_lock_reason?: string | null;
            comments: number;
            pull_request?: {
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                diff_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                patch_url: string | null;
                /** Format: uri */
                url: string | null;
            };
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            draft?: boolean;
            closed_by?: null | components["schemas"]["simple-user"];
            body_html?: string;
            body_text?: string;
            /** Format: uri */
            timeline_url?: string;
            repository?: components["schemas"]["repository"];
            performed_via_github_app?: null | components["schemas"]["integration"];
            author_association: components["schemas"]["author_association"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Issue Comment
         * @description Comments provide a way for people to collaborate on an issue.
         */
        "issue-comment": {
            /** @description Unique identifier of the issue comment */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue comment
             */
            url: string;
            /** @description Contents of the issue comment */
            body?: string;
            body_text?: string;
            body_html?: string;
            /** Format: uri */
            html_url: string;
            user: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            issue_url: string;
            author_association: components["schemas"]["author_association"];
            performed_via_github_app?: null | components["schemas"]["integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Event
         * @description Event
         */
        event: {
            id: string;
            type: string | null;
            actor: components["schemas"]["actor"];
            repo: {
                id: number;
                name: string;
                /** Format: uri */
                url: string;
            };
            org?: components["schemas"]["actor"];
            payload: {
                action?: string;
                issue?: components["schemas"]["issue"];
                comment?: components["schemas"]["issue-comment"];
                pages?: {
                    page_name?: string;
                    title?: string;
                    summary?: string | null;
                    action?: string;
                    sha?: string;
                    html_url?: string;
                }[];
            };
            public: boolean;
            /** Format: date-time */
            created_at: string | null;
        };
        /**
         * Link With Type
         * @description Hypermedia Link with Type
         */
        "link-with-type": {
            href: string;
            type: string;
        };
        /**
         * Feed
         * @description Feed
         */
        feed: {
            timeline_url: string;
            user_url: string;
            current_user_public_url?: string;
            current_user_url?: string;
            current_user_actor_url?: string;
            current_user_organization_url?: string;
            current_user_organization_urls?: string[];
            _links: {
                timeline: components["schemas"]["link-with-type"];
                user: components["schemas"]["link-with-type"];
                security_advisories?: components["schemas"]["link-with-type"];
                current_user?: components["schemas"]["link-with-type"];
                current_user_public?: components["schemas"]["link-with-type"];
                current_user_actor?: components["schemas"]["link-with-type"];
                current_user_organization?: components["schemas"]["link-with-type"];
                current_user_organizations?: components["schemas"]["link-with-type"][];
            };
        };
        /**
         * Base Gist
         * @description Base Gist
         */
        "base-gist": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            forks_url: string;
            /** Format: uri */
            commits_url: string;
            id: string;
            node_id: string;
            /** Format: uri */
            git_pull_url: string;
            /** Format: uri */
            git_push_url: string;
            /** Format: uri */
            html_url: string;
            files: {
                [key: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                };
            };
            public: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            description: string | null;
            comments: number;
            user: null | components["schemas"]["simple-user"];
            /** Format: uri */
            comments_url: string;
            owner?: components["schemas"]["simple-user"];
            truncated?: boolean;
            forks?: unknown[];
            history?: unknown[];
        };
        /**
         * Public User
         * @description Public User
         */
        "public-user": {
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            /** Format: email */
            email: string | null;
            hireable: boolean | null;
            bio: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            /** Format: date-time */
            suspended_at?: string | null;
            private_gists?: number;
            total_private_repos?: number;
            owned_private_repos?: number;
            disk_usage?: number;
            collaborators?: number;
        };
        /**
         * Gist History
         * @description Gist History
         */
        "gist-history": {
            user?: null | components["schemas"]["simple-user"];
            version?: string;
            /** Format: date-time */
            committed_at?: string;
            change_status?: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            /** Format: uri */
            url?: string;
        };
        /**
         * Gist Simple
         * @description Gist Simple
         */
        "gist-simple": {
            /** @deprecated */
            forks?: {
                id?: string;
                /** Format: uri */
                url?: string;
                user?: components["schemas"]["public-user"];
                /** Format: date-time */
                created_at?: string;
                /** Format: date-time */
                updated_at?: string;
            }[] | null;
            /** @deprecated */
            history?: components["schemas"]["gist-history"][] | null;
            /**
             * Gist
             * @description Gist
             */
            fork_of?: {
                /** Format: uri */
                url: string;
                /** Format: uri */
                forks_url: string;
                /** Format: uri */
                commits_url: string;
                id: string;
                node_id: string;
                /** Format: uri */
                git_pull_url: string;
                /** Format: uri */
                git_push_url: string;
                /** Format: uri */
                html_url: string;
                files: {
                    [key: string]: {
                        filename?: string;
                        type?: string;
                        language?: string;
                        raw_url?: string;
                        size?: number;
                    };
                };
                public: boolean;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string;
                description: string | null;
                comments: number;
                user: null | components["schemas"]["simple-user"];
                /** Format: uri */
                comments_url: string;
                owner?: null | components["schemas"]["simple-user"];
                truncated?: boolean;
                forks?: unknown[];
                history?: unknown[];
            } | null;
            url?: string;
            forks_url?: string;
            commits_url?: string;
            id?: string;
            node_id?: string;
            git_pull_url?: string;
            git_push_url?: string;
            html_url?: string;
            files?: {
                [key: string]: {
                    filename?: string;
                    type?: string;
                    language?: string;
                    raw_url?: string;
                    size?: number;
                    truncated?: boolean;
                    content?: string;
                } | null;
            };
            public?: boolean;
            created_at?: string;
            updated_at?: string;
            description?: string | null;
            comments?: number;
            user?: string | null;
            comments_url?: string;
            owner?: components["schemas"]["simple-user"];
            truncated?: boolean;
        };
        /**
         * Gist Comment
         * @description A comment made to a gist.
         */
        "gist-comment": {
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            /** @description The comment text. */
            body: string;
            user: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            author_association: components["schemas"]["author_association"];
        };
        /**
         * Gist Commit
         * @description Gist Commit
         */
        "gist-commit": {
            /** Format: uri */
            url: string;
            version: string;
            user: null | components["schemas"]["simple-user"];
            change_status: {
                total?: number;
                additions?: number;
                deletions?: number;
            };
            /** Format: date-time */
            committed_at: string;
        };
        /**
         * Gitignore Template
         * @description Gitignore Template
         */
        "gitignore-template": {
            name: string;
            source: string;
        };
        /**
         * License
         * @description License
         */
        license: {
            key: string;
            name: string;
            spdx_id: string | null;
            /** Format: uri */
            url: string | null;
            node_id: string;
            /** Format: uri */
            html_url: string;
            description: string;
            implementation: string;
            permissions: string[];
            conditions: string[];
            limitations: string[];
            body: string;
            featured: boolean;
        };
        /**
         * Api Overview
         * @description Api Overview
         */
        "api-overview": {
            verifiable_password_authentication: boolean;
            packages?: string[];
            dependabot?: string[];
            installed_version?: string;
        };
        /**
         * Minimal Repository
         * @description Minimal Repository
         */
        "minimal-repository": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            deployments_url: string;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url?: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url?: string;
            /** Format: uri */
            stargazers_url: string;
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            trees_url: string;
            clone_url?: string;
            mirror_url?: string | null;
            /** Format: uri */
            hooks_url: string;
            svn_url?: string;
            homepage?: string | null;
            language?: string | null;
            forks_count?: number;
            stargazers_count?: number;
            watchers_count?: number;
            size?: number;
            default_branch?: string;
            open_issues_count?: number;
            is_template?: boolean;
            topics?: string[];
            has_issues?: boolean;
            has_projects?: boolean;
            has_wiki?: boolean;
            has_pages?: boolean;
            has_downloads?: boolean;
            archived?: boolean;
            disabled?: boolean;
            visibility?: string;
            /** Format: date-time */
            pushed_at?: string | null;
            /** Format: date-time */
            created_at?: string | null;
            /** Format: date-time */
            updated_at?: string | null;
            permissions?: {
                admin?: boolean;
                maintain?: boolean;
                push?: boolean;
                triage?: boolean;
                pull?: boolean;
            };
            template_repository?: null | components["schemas"]["repository"];
            temp_clone_token?: string;
            delete_branch_on_merge?: boolean;
            subscribers_count?: number;
            network_count?: number;
            code_of_conduct?: components["schemas"]["code-of-conduct"];
            license?: {
                key?: string;
                name?: string;
                spdx_id?: string;
                url?: string;
                node_id?: string;
            } | null;
            forks?: number;
            open_issues?: number;
            watchers?: number;
            allow_forking?: boolean;
        };
        /**
         * Thread
         * @description Thread
         */
        thread: {
            id: string;
            repository: components["schemas"]["minimal-repository"];
            subject: {
                title: string;
                url: string;
                latest_comment_url: string;
                type: string;
            };
            reason: string;
            unread: boolean;
            updated_at: string;
            last_read_at: string | null;
            url: string;
            subscription_url: string;
        };
        /**
         * Thread Subscription
         * @description Thread Subscription
         */
        "thread-subscription": {
            subscribed: boolean;
            ignored: boolean;
            reason: string | null;
            /** Format: date-time */
            created_at: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            thread_url?: string;
            /** Format: uri */
            repository_url?: string;
        };
        /**
         * Organization Full
         * @description Organization Full
         */
        "organization-full": {
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            repos_url: string;
            /** Format: uri */
            events_url: string;
            hooks_url: string;
            issues_url: string;
            members_url: string;
            public_members_url: string;
            avatar_url: string;
            description: string | null;
            name?: string;
            company?: string;
            /** Format: uri */
            blog?: string;
            location?: string;
            /** Format: email */
            email?: string;
            twitter_username?: string | null;
            is_verified?: boolean;
            has_organization_projects: boolean;
            has_repository_projects: boolean;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            /** Format: uri */
            html_url: string;
            /** Format: date-time */
            created_at: string;
            type: string;
            total_private_repos?: number;
            owned_private_repos?: number;
            private_gists?: number | null;
            disk_usage?: number | null;
            collaborators?: number | null;
            /** Format: email */
            billing_email?: string | null;
            plan?: {
                name: string;
                space: number;
                private_repos: number;
                filled_seats?: number;
                seats?: number;
            };
            default_repository_permission?: string | null;
            members_can_create_repositories?: boolean | null;
            two_factor_requirement_enabled?: boolean | null;
            members_allowed_repository_creation_type?: string;
            members_can_create_public_repositories?: boolean;
            members_can_create_private_repositories?: boolean;
            members_can_create_internal_repositories?: boolean;
            members_can_create_pages?: boolean;
            members_can_create_public_pages?: boolean;
            members_can_create_private_pages?: boolean;
            members_can_fork_private_repositories?: boolean | null;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * @description The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
         * @enum {string}
         */
        "enabled-repositories": "all" | "none" | "selected";
        "actions-organization-permissions": {
            enabled_repositories: components["schemas"]["enabled-repositories"];
            /** @description The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
            selected_repositories_url?: string;
            allowed_actions?: components["schemas"]["allowed-actions"];
            selected_actions_url?: components["schemas"]["selected-actions-url"];
        };
        "runner-groups-org": {
            id: number;
            name: string;
            visibility: string;
            default: boolean;
            /** @description Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
            selected_repositories_url?: string;
            runners_url: string;
            inherited: boolean;
            inherited_allows_public_repositories?: boolean;
            allows_public_repositories: boolean;
        };
        /**
         * Actions Secret for an Organization
         * @description Secrets for GitHub Actions for an organization.
         */
        "organization-actions-secret": {
            /** @description The name of the secret. */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * @description Visibility of a secret
             * @enum {string}
             */
            visibility: "all" | "private" | "selected";
            /** Format: uri */
            selected_repositories_url?: string;
        };
        /**
         * ActionsPublicKey
         * @description The public key used for setting Actions Secrets.
         */
        "actions-public-key": {
            /** @description The identifier for the key. */
            key_id: string;
            /** @description The Base64 encoded public key. */
            key: string;
            id?: number;
            url?: string;
            title?: string;
            created_at?: string;
        };
        /**
         * Empty Object
         * @description An object without any properties.
         */
        "empty-object": Record<string, never>;
        /**
         * Org Hook
         * @description Org Hook
         */
        "org-hook": {
            id: number;
            /** Format: uri */
            url: string;
            /** Format: uri */
            ping_url: string;
            name: string;
            events: string[];
            active: boolean;
            config: {
                url?: string;
                insecure_ssl?: string;
                content_type?: string;
                secret?: string;
            };
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            type: string;
        };
        /**
         * Org Membership
         * @description Org Membership
         */
        "org-membership": {
            /** Format: uri */
            url: string;
            /**
             * @description The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
             * @enum {string}
             */
            state: "active" | "pending";
            /**
             * @description The user's membership type in the organization.
             * @enum {string}
             */
            role: "admin" | "member" | "billing_manager";
            /** Format: uri */
            organization_url: string;
            organization: components["schemas"]["organization-simple"];
            user: null | components["schemas"]["simple-user"];
            permissions?: {
                can_create_repository: boolean;
            };
        };
        "org-pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            configuration_url?: string;
            allow_downstream_configuration?: boolean;
        };
        /**
         * Project
         * @description Projects are a way to organize columns and cards of work.
         */
        project: {
            /** Format: uri */
            owner_url: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            columns_url: string;
            id: number;
            node_id: string;
            /** @description Name of the project */
            name: string;
            /** @description Body of the project */
            body: string | null;
            number: number;
            /** @description State of the project; either 'open' or 'closed' */
            state: string;
            creator: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * @description The baseline permission that all organization members have on this project. Only present if owner is an organization.
             * @enum {string}
             */
            organization_permission?: "read" | "write" | "admin" | "none";
            /** @description Whether or not this project can be seen by everyone. Only present if owner is an organization. */
            private?: boolean;
        };
        /**
         * Team Simple
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        "team-simple": {
            /** @description Unique identifier of the team */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url: string;
            members_url: string;
            /** @description Name of the team */
            name: string;
            /** @description Description of the team */
            description: string | null;
            /** @description Permission that the team will have for its repositories */
            permission: string;
            /** @description The level of privacy this team should have */
            privacy?: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            repositories_url: string;
            slug: string;
            /** @description Distinguished Name (DN) that team maps to within LDAP environment */
            ldap_dn?: string;
        };
        /**
         * Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        team: {
            id: number;
            node_id: string;
            name: string;
            slug: string;
            description: string | null;
            privacy?: string;
            permission: string;
            permissions?: {
                pull: boolean;
                triage: boolean;
                push: boolean;
                maintain: boolean;
                admin: boolean;
            };
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            members_url: string;
            /** Format: uri */
            repositories_url: string;
            parent: null | components["schemas"]["team-simple"];
        };
        /**
         * Full Team
         * @description Groups of organization members that gives permissions on specified repositories.
         */
        "team-full": {
            /** @description Unique identifier of the team */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the team
             */
            url: string;
            /** Format: uri */
            html_url: string;
            /** @description Name of the team */
            name: string;
            slug: string;
            description: string | null;
            /**
             * @description The level of privacy this team should have
             * @enum {string}
             */
            privacy?: "closed" | "secret";
            /** @description Permission that the team will have for its repositories */
            permission: string;
            members_url: string;
            /** Format: uri */
            repositories_url: string;
            parent?: null | components["schemas"]["team-simple"];
            members_count: number;
            repos_count: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            organization: components["schemas"]["organization-full"];
            /** @description Distinguished Name (DN) that team maps to within LDAP environment */
            ldap_dn?: string;
        };
        /**
         * Team Discussion
         * @description A team discussion is a persistent record of a free-form conversation within a team.
         */
        "team-discussion": {
            author: null | components["schemas"]["simple-user"];
            /** @description The main text of the discussion. */
            body: string;
            body_html: string;
            /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
            body_version: string;
            comments_count: number;
            /** Format: uri */
            comments_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            last_edited_at: string | null;
            /** Format: uri */
            html_url: string;
            node_id: string;
            /** @description The unique sequence number of a team discussion. */
            number: number;
            /** @description Whether or not this discussion should be pinned for easy retrieval. */
            pinned: boolean;
            /** @description Whether or not this discussion should be restricted to team members and organization administrators. */
            private: boolean;
            /** Format: uri */
            team_url: string;
            /** @description The title of the discussion. */
            title: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Team Discussion Comment
         * @description A reply to a discussion within a team.
         */
        "team-discussion-comment": {
            author: null | components["schemas"]["simple-user"];
            /** @description The main text of the comment. */
            body: string;
            body_html: string;
            /** @description The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
            body_version: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            last_edited_at: string | null;
            /** Format: uri */
            discussion_url: string;
            /** Format: uri */
            html_url: string;
            node_id: string;
            /** @description The unique sequence number of a team discussion comment. */
            number: number;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            url: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Reaction
         * @description Reactions to conversations provide a way to help people express their feelings more simply and effectively.
         */
        reaction: {
            id: number;
            node_id: string;
            user: null | components["schemas"]["simple-user"];
            /**
             * @description The reaction to use
             * @enum {string}
             */
            content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
            /** Format: date-time */
            created_at: string;
        };
        /**
         * Team Membership
         * @description Team Membership
         */
        "team-membership": {
            /** Format: uri */
            url: string;
            /**
             * @description The role of the user in the team.
             * @default member
             * @enum {string}
             */
            role: "member" | "maintainer";
            /**
             * @description The state of the user's membership in the team.
             * @enum {string}
             */
            state: "active" | "pending";
        };
        /**
         * Team Project
         * @description A team's access to a project.
         */
        "team-project": {
            owner_url: string;
            url: string;
            html_url: string;
            columns_url: string;
            id: number;
            node_id: string;
            name: string;
            body: string | null;
            number: number;
            state: string;
            creator: components["schemas"]["simple-user"];
            created_at: string;
            updated_at: string;
            /** @description The organization permission for this project. Only present when owner is an organization. */
            organization_permission?: string;
            /** @description Whether the project is private or not. Only present when owner is an organization. */
            private?: boolean;
            permissions: {
                read: boolean;
                write: boolean;
                admin: boolean;
            };
        };
        /**
         * Team Repository
         * @description A team's access to a repository.
         */
        "team-repository": {
            /** @description Unique identifier of the repository */
            id: number;
            node_id: string;
            /** @description The name of the repository. */
            name: string;
            full_name: string;
            license: null | components["schemas"]["license-simple"];
            forks: number;
            permissions?: {
                admin: boolean;
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
            };
            owner: null | components["schemas"]["simple-user"];
            /**
             * @description Whether the repository is private or public.
             * @default false
             */
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            deployments_url: string;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            /** Format: uri */
            stargazers_url: string;
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            trees_url: string;
            clone_url: string;
            /** Format: uri */
            mirror_url: string | null;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            /** @description The default branch of the repository. */
            default_branch: string;
            open_issues_count: number;
            /**
             * @description Whether this repository acts as a template that can be used to generate new repositories.
             * @default false
             */
            is_template: boolean;
            topics?: string[];
            /**
             * @description Whether issues are enabled.
             * @default true
             */
            has_issues: boolean;
            /**
             * @description Whether projects are enabled.
             * @default true
             */
            has_projects: boolean;
            /**
             * @description Whether the wiki is enabled.
             * @default true
             */
            has_wiki: boolean;
            has_pages: boolean;
            /**
             * @description Whether downloads are enabled.
             * @default true
             */
            has_downloads: boolean;
            /**
             * @description Whether the repository is archived.
             * @default false
             */
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /**
             * @description The repository visibility: public, private, or internal.
             * @default public
             */
            visibility: string;
            /** Format: date-time */
            pushed_at: string | null;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            /**
             * @description Whether to allow rebase merges for pull requests.
             * @default true
             */
            allow_rebase_merge: boolean;
            template_repository?: null | components["schemas"]["repository"];
            temp_clone_token?: string;
            /**
             * @description Whether to allow squash merges for pull requests.
             * @default true
             */
            allow_squash_merge: boolean;
            /**
             * @description Whether to delete head branches when pull requests are merged
             * @default false
             */
            delete_branch_on_merge: boolean;
            /**
             * @description Whether to allow merge commits for pull requests.
             * @default true
             */
            allow_merge_commit: boolean;
            /**
             * @description Whether to allow forking this repo
             * @default false
             */
            allow_forking: boolean;
            subscribers_count?: number;
            network_count?: number;
            open_issues: number;
            watchers: number;
            master_branch?: string;
        };
        /**
         * Project Card
         * @description Project cards represent a scope of work.
         */
        "project-card": {
            /** Format: uri */
            url: string;
            /** @description The project card's ID */
            id: number;
            node_id: string;
            note: string | null;
            creator: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** @description Whether or not the card is archived */
            archived?: boolean;
            column_name?: string;
            project_id?: string;
            /** Format: uri */
            column_url: string;
            /** Format: uri */
            content_url?: string;
            /** Format: uri */
            project_url: string;
        };
        /**
         * Project Column
         * @description Project columns contain cards of work.
         */
        "project-column": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            project_url: string;
            /** Format: uri */
            cards_url: string;
            /** @description The unique identifier of the project column */
            id: number;
            node_id: string;
            /** @description Name of the project column */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Project Collaborator Permission
         * @description Project Collaborator Permission
         */
        "project-collaborator-permission": {
            permission: string;
            user: null | components["schemas"]["simple-user"];
        };
        /** Rate Limit */
        "rate-limit": {
            limit: number;
            remaining: number;
            reset: number;
            used: number;
        };
        /**
         * Rate Limit Overview
         * @description Rate Limit Overview
         */
        "rate-limit-overview": {
            resources: {
                core: components["schemas"]["rate-limit"];
                graphql?: components["schemas"]["rate-limit"];
                search: components["schemas"]["rate-limit"];
                source_import?: components["schemas"]["rate-limit"];
                integration_manifest?: components["schemas"]["rate-limit"];
                code_scanning_upload?: components["schemas"]["rate-limit"];
                actions_runner_registration?: components["schemas"]["rate-limit"];
                scim?: components["schemas"]["rate-limit"];
            };
            rate: components["schemas"]["rate-limit"];
        };
        /**
         * Code Of Conduct Simple
         * @description Code of Conduct Simple
         */
        "code-of-conduct-simple": {
            /** Format: uri */
            url: string;
            key: string;
            name: string;
            /** Format: uri */
            html_url: string | null;
        };
        /**
         * Full Repository
         * @description Full Repository
         */
        "full-repository": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: components["schemas"]["simple-user"];
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            archive_url: string;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            deployments_url: string;
            /** Format: uri */
            downloads_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            forks_url: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            merges_url: string;
            milestones_url: string;
            notifications_url: string;
            pulls_url: string;
            releases_url: string;
            ssh_url: string;
            /** Format: uri */
            stargazers_url: string;
            statuses_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            /** Format: uri */
            tags_url: string;
            /** Format: uri */
            teams_url: string;
            trees_url: string;
            clone_url: string;
            /** Format: uri */
            mirror_url: string | null;
            /** Format: uri */
            hooks_url: string;
            /** Format: uri */
            svn_url: string;
            /** Format: uri */
            homepage: string | null;
            language: string | null;
            forks_count: number;
            stargazers_count: number;
            watchers_count: number;
            size: number;
            default_branch: string;
            open_issues_count: number;
            is_template?: boolean;
            topics?: string[];
            has_issues: boolean;
            has_projects: boolean;
            has_wiki: boolean;
            has_pages: boolean;
            has_downloads: boolean;
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /** @description The repository visibility: public, private, or internal. */
            visibility?: string;
            /** Format: date-time */
            pushed_at: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            allow_rebase_merge?: boolean;
            template_repository?: null | components["schemas"]["repository"];
            temp_clone_token?: string | null;
            allow_squash_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_merge_commit?: boolean;
            allow_forking?: boolean;
            subscribers_count: number;
            network_count: number;
            license: null | components["schemas"]["license-simple"];
            organization?: null | components["schemas"]["simple-user"];
            parent?: components["schemas"]["repository"];
            source?: components["schemas"]["repository"];
            forks: number;
            master_branch?: string;
            open_issues: number;
            watchers: number;
            /**
             * @description Whether anonymous git access is allowed.
             * @default true
             */
            anonymous_access_enabled: boolean;
            code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
        };
        /**
         * Artifact
         * @description An artifact
         */
        artifact: {
            id: number;
            node_id: string;
            /** @description The name of the artifact. */
            name: string;
            /** @description The size in bytes of the artifact. */
            size_in_bytes: number;
            url: string;
            archive_download_url: string;
            /** @description Whether or not the artifact has expired. */
            expired: boolean;
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            expires_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
        };
        /**
         * Job
         * @description Information of a job execution in a workflow run
         */
        job: {
            /** @description The id of the job. */
            id: number;
            /** @description The id of the associated workflow run. */
            run_id: number;
            run_url: string;
            /** @description Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run. */
            run_attempt?: number;
            node_id: string;
            /** @description The SHA of the commit that is being run. */
            head_sha: string;
            url: string;
            html_url: string | null;
            /**
             * @description The phase of the lifecycle that the job is currently in.
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed";
            /** @description The outcome of the job. */
            conclusion: string | null;
            /**
             * Format: date-time
             * @description The time that the job started, in ISO 8601 format.
             */
            started_at: string;
            /**
             * Format: date-time
             * @description The time that the job finished, in ISO 8601 format.
             */
            completed_at: string | null;
            /** @description The name of the job. */
            name: string;
            /** @description Steps in this job. */
            steps?: {
                /**
                 * @description The phase of the lifecycle that the job is currently in.
                 * @enum {string}
                 */
                status: "queued" | "in_progress" | "completed";
                /** @description The outcome of the job. */
                conclusion: string | null;
                /** @description The name of the job. */
                name: string;
                number: number;
                /**
                 * Format: date-time
                 * @description The time that the step started, in ISO 8601 format.
                 */
                started_at?: string | null;
                /**
                 * Format: date-time
                 * @description The time that the job finished, in ISO 8601 format.
                 */
                completed_at?: string | null;
            }[];
            check_run_url: string;
        };
        /** @description Whether GitHub Actions is enabled on the repository. */
        "actions-enabled": boolean;
        "actions-repository-permissions": {
            enabled: components["schemas"]["actions-enabled"];
            allowed_actions?: components["schemas"]["allowed-actions"];
            selected_actions_url?: components["schemas"]["selected-actions-url"];
        };
        /** Pull Request Minimal */
        "pull-request-minimal": {
            id: number;
            number: number;
            url: string;
            head: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
            base: {
                ref: string;
                sha: string;
                repo: {
                    id: number;
                    url: string;
                    name: string;
                };
            };
        };
        /**
         * Simple Commit
         * @description Simple Commit
         */
        "simple-commit": {
            id: string;
            tree_id: string;
            message: string;
            /** Format: date-time */
            timestamp: string;
            author: {
                name: string;
                email: string;
            } | null;
            committer: {
                name: string;
                email: string;
            } | null;
        };
        /**
         * Workflow Run
         * @description An invocation of a workflow
         */
        "workflow-run": {
            /** @description The ID of the workflow run. */
            id: number;
            /** @description The name of the workflow run. */
            name?: string | null;
            node_id: string;
            /** @description The ID of the associated check suite. */
            check_suite_id?: number;
            /** @description The node ID of the associated check suite. */
            check_suite_node_id?: string;
            head_branch: string | null;
            /** @description The SHA of the head commit that points to the version of the workflow being run. */
            head_sha: string;
            /** @description The auto incrementing run number for the workflow run. */
            run_number: number;
            /** @description Attempt number of the run, 1 for first attempt and higher if the workflow was re-run. */
            run_attempt?: number;
            event: string;
            status: string | null;
            conclusion: string | null;
            /** @description The ID of the parent workflow. */
            workflow_id: number;
            /** @description The URL to the workflow run. */
            url: string;
            html_url: string;
            pull_requests: components["schemas"]["pull-request-minimal"][] | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: date-time
             * @description The start time of the latest run. Resets on re-run.
             */
            run_started_at?: string;
            /** @description The URL to the jobs for the workflow run. */
            jobs_url: string;
            /** @description The URL to download the logs for the workflow run. */
            logs_url: string;
            /** @description The URL to the associated check suite. */
            check_suite_url: string;
            /** @description The URL to the artifacts for the workflow run. */
            artifacts_url: string;
            /** @description The URL to cancel the workflow run. */
            cancel_url: string;
            /** @description The URL to rerun the workflow run. */
            rerun_url: string;
            /** @description The URL to the previous attempted run of this workflow, if one exists. */
            previous_attempt_url?: string | null;
            /** @description The URL to the workflow. */
            workflow_url: string;
            head_commit: null | components["schemas"]["simple-commit"];
            repository: components["schemas"]["minimal-repository"];
            head_repository: components["schemas"]["minimal-repository"];
            head_repository_id?: number;
        };
        /**
         * Actions Secret
         * @description Set secrets for GitHub Actions.
         */
        "actions-secret": {
            /** @description The name of the secret. */
            name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Workflow
         * @description A GitHub Actions workflow
         */
        workflow: {
            id: number;
            node_id: string;
            name: string;
            path: string;
            /** @enum {string} */
            state: "active" | "deleted" | "disabled_fork" | "disabled_inactivity" | "disabled_manually";
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            url: string;
            html_url: string;
            badge_url: string;
            /** Format: date-time */
            deleted_at?: string;
        };
        /**
         * Protected Branch Required Status Check
         * @description Protected Branch Required Status Check
         */
        "protected-branch-required-status-check": {
            url?: string;
            enforcement_level?: string;
            contexts: string[];
            contexts_url?: string;
            strict?: boolean;
        };
        /**
         * Protected Branch Admin Enforced
         * @description Protected Branch Admin Enforced
         */
        "protected-branch-admin-enforced": {
            /** Format: uri */
            url: string;
            enabled: boolean;
        };
        /**
         * Protected Branch Pull Request Review
         * @description Protected Branch Pull Request Review
         */
        "protected-branch-pull-request-review": {
            /** Format: uri */
            url?: string;
            dismissal_restrictions?: {
                /** @description The list of users with review dismissal access. */
                users?: components["schemas"]["simple-user"][];
                /** @description The list of teams with review dismissal access. */
                teams?: components["schemas"]["team"][];
                url?: string;
                users_url?: string;
                teams_url?: string;
            };
            dismiss_stale_reviews: boolean;
            require_code_owner_reviews: boolean;
            required_approving_review_count?: number;
        };
        /**
         * Branch Restriction Policy
         * @description Branch Restriction Policy
         */
        "branch-restriction-policy": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            users_url: string;
            /** Format: uri */
            teams_url: string;
            /** Format: uri */
            apps_url: string;
            users: {
                login?: string;
                id?: number;
                node_id?: string;
                avatar_url?: string;
                gravatar_id?: string;
                url?: string;
                html_url?: string;
                followers_url?: string;
                following_url?: string;
                gists_url?: string;
                starred_url?: string;
                subscriptions_url?: string;
                organizations_url?: string;
                repos_url?: string;
                events_url?: string;
                received_events_url?: string;
                type?: string;
                site_admin?: boolean;
            }[];
            teams: {
                id?: number;
                node_id?: string;
                url?: string;
                html_url?: string;
                name?: string;
                slug?: string;
                description?: string | null;
                privacy?: string;
                permission?: string;
                members_url?: string;
                repositories_url?: string;
                parent?: string | null;
            }[];
            apps: {
                id?: number;
                slug?: string;
                node_id?: string;
                owner?: {
                    login?: string;
                    id?: number;
                    node_id?: string;
                    url?: string;
                    repos_url?: string;
                    events_url?: string;
                    hooks_url?: string;
                    issues_url?: string;
                    members_url?: string;
                    public_members_url?: string;
                    avatar_url?: string;
                    description?: string;
                    gravatar_id?: string;
                    html_url?: string;
                    followers_url?: string;
                    following_url?: string;
                    gists_url?: string;
                    starred_url?: string;
                    subscriptions_url?: string;
                    organizations_url?: string;
                    received_events_url?: string;
                    type?: string;
                    site_admin?: boolean;
                };
                name?: string;
                description?: string;
                external_url?: string;
                html_url?: string;
                created_at?: string;
                updated_at?: string;
                permissions?: {
                    metadata?: string;
                    contents?: string;
                    issues?: string;
                    single_file?: string;
                };
                events?: string[];
            }[];
        };
        /**
         * Branch Protection
         * @description Branch Protection
         */
        "branch-protection": {
            url?: string;
            enabled?: boolean;
            required_status_checks?: components["schemas"]["protected-branch-required-status-check"];
            enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
            required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
            restrictions?: components["schemas"]["branch-restriction-policy"];
            required_linear_history?: {
                enabled?: boolean;
            };
            allow_force_pushes?: {
                enabled?: boolean;
            };
            allow_deletions?: {
                enabled?: boolean;
            };
            required_conversation_resolution?: {
                enabled?: boolean;
            };
            name?: string;
            protection_url?: string;
            required_signatures?: {
                /** Format: uri */
                url: string;
                enabled: boolean;
            };
        };
        /**
         * Short Branch
         * @description Short Branch
         */
        "short-branch": {
            name: string;
            commit: {
                sha: string;
                /** Format: uri */
                url: string;
            };
            protected: boolean;
            protection?: components["schemas"]["branch-protection"];
            /** Format: uri */
            protection_url?: string;
        };
        /**
         * Git User
         * @description Metaproperties for Git author/committer information.
         */
        "git-user": {
            name?: string;
            email?: string;
            date?: string;
        };
        /** Verification */
        verification: {
            verified: boolean;
            reason: string;
            payload: string | null;
            signature: string | null;
        };
        /**
         * Diff Entry
         * @description Diff Entry
         */
        "diff-entry": {
            sha: string;
            filename: string;
            /** @enum {string} */
            status: "added" | "removed" | "modified" | "renamed" | "copied" | "changed" | "unchanged";
            additions: number;
            deletions: number;
            changes: number;
            /** Format: uri */
            blob_url: string;
            /** Format: uri */
            raw_url: string;
            /** Format: uri */
            contents_url: string;
            patch?: string;
            previous_filename?: string;
        };
        /**
         * Commit
         * @description Commit
         */
        commit: {
            /** Format: uri */
            url: string;
            sha: string;
            node_id: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            comments_url: string;
            commit: {
                /** Format: uri */
                url: string;
                author: null | components["schemas"]["git-user"];
                committer: null | components["schemas"]["git-user"];
                message: string;
                comment_count: number;
                tree: {
                    sha: string;
                    /** Format: uri */
                    url: string;
                };
                verification?: components["schemas"]["verification"];
            };
            author: null | components["schemas"]["simple-user"];
            committer: null | components["schemas"]["simple-user"];
            parents: {
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                html_url?: string;
            }[];
            stats?: {
                additions?: number;
                deletions?: number;
                total?: number;
            };
            files?: components["schemas"]["diff-entry"][];
        };
        /**
         * Branch With Protection
         * @description Branch With Protection
         */
        "branch-with-protection": {
            name: string;
            commit: components["schemas"]["commit"];
            _links: {
                html: string;
                /** Format: uri */
                self: string;
            };
            protected: boolean;
            protection: components["schemas"]["branch-protection"];
            /** Format: uri */
            protection_url: string;
            pattern?: string;
            required_approving_review_count?: number;
        };
        /**
         * Status Check Policy
         * @description Status Check Policy
         */
        "status-check-policy": {
            /** Format: uri */
            url: string;
            strict: boolean;
            contexts: string[];
            /** Format: uri */
            contexts_url: string;
        };
        /**
         * Protected Branch
         * @description Branch protections protect branches
         */
        "protected-branch": {
            /** Format: uri */
            url: string;
            required_status_checks?: components["schemas"]["status-check-policy"];
            required_pull_request_reviews?: {
                /** Format: uri */
                url: string;
                dismiss_stale_reviews?: boolean;
                require_code_owner_reviews?: boolean;
                required_approving_review_count?: number;
                dismissal_restrictions?: {
                    /** Format: uri */
                    url: string;
                    /** Format: uri */
                    users_url: string;
                    /** Format: uri */
                    teams_url: string;
                    users: components["schemas"]["simple-user"][];
                    teams: components["schemas"]["team"][];
                };
            };
            required_signatures?: {
                /** Format: uri */
                url: string;
                enabled: boolean;
            };
            enforce_admins?: {
                /** Format: uri */
                url: string;
                enabled: boolean;
            };
            required_linear_history?: {
                enabled: boolean;
            };
            allow_force_pushes?: {
                enabled: boolean;
            };
            allow_deletions?: {
                enabled: boolean;
            };
            restrictions?: components["schemas"]["branch-restriction-policy"];
            required_conversation_resolution?: {
                enabled?: boolean;
            };
        };
        /**
         * Deployment
         * @description A deployment created as the result of an Actions check run from a workflow that references an environment
         */
        "deployment-simple": {
            /** Format: uri */
            url: string;
            /** @description Unique identifier of the deployment */
            id: number;
            node_id: string;
            /** @description Parameter to specify a task to execute */
            task: string;
            original_environment?: string;
            /** @description Name for the target deployment environment. */
            environment: string;
            description: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            statuses_url: string;
            /** Format: uri */
            repository_url: string;
            /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
            transient_environment?: boolean;
            /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
            production_environment?: boolean;
            performed_via_github_app?: null | components["schemas"]["integration"];
        };
        /**
         * CheckRun
         * @description A check performed on the code of a given code change
         */
        "check-run": {
            /** @description The id of the check. */
            id: number;
            /** @description The SHA of the commit that is being checked. */
            head_sha: string;
            node_id: string;
            external_id: string | null;
            url: string;
            html_url: string | null;
            details_url: string | null;
            /**
             * @description The phase of the lifecycle that the check is currently in.
             * @enum {string}
             */
            status: "queued" | "in_progress" | "completed";
            /** @enum {string|null} */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
            /** Format: date-time */
            started_at: string | null;
            /** Format: date-time */
            completed_at: string | null;
            output: {
                title: string | null;
                summary: string | null;
                text: string | null;
                annotations_count: number;
                /** Format: uri */
                annotations_url: string;
            };
            /** @description The name of the check. */
            name: string;
            check_suite: {
                id: number;
            } | null;
            app: null | components["schemas"]["integration"];
            pull_requests: components["schemas"]["pull-request-minimal"][];
            deployment?: components["schemas"]["deployment-simple"];
        };
        /**
         * Check Annotation
         * @description Check Annotation
         */
        "check-annotation": {
            path: string;
            start_line: number;
            end_line: number;
            start_column: number | null;
            end_column: number | null;
            annotation_level: string | null;
            title: string | null;
            message: string | null;
            raw_details: string | null;
            blob_href: string;
        };
        /**
         * CheckSuite
         * @description A suite of checks performed on the code of a given code change
         */
        "check-suite": {
            id: number;
            node_id: string;
            head_branch: string | null;
            /** @description The SHA of the head commit that is being checked. */
            head_sha: string;
            /** @enum {string|null} */
            status: "queued" | "in_progress" | "completed" | null;
            /** @enum {string|null} */
            conclusion: "success" | "failure" | "neutral" | "cancelled" | "skipped" | "timed_out" | "action_required" | null;
            url: string | null;
            before: string | null;
            after: string | null;
            pull_requests: components["schemas"]["pull-request-minimal"][] | null;
            app: null | components["schemas"]["integration"];
            repository: components["schemas"]["minimal-repository"];
            /** Format: date-time */
            created_at: string | null;
            /** Format: date-time */
            updated_at: string | null;
            head_commit: components["schemas"]["simple-commit"];
            latest_check_runs_count: number;
            check_runs_url: string;
            rerequestable?: boolean;
            runs_rerequestable?: boolean;
        };
        /**
         * Check Suite Preference
         * @description Check suite configuration preferences for a repository.
         */
        "check-suite-preference": {
            preferences: {
                auto_trigger_checks?: {
                    app_id: number;
                    setting: boolean;
                }[];
            };
            repository: components["schemas"]["minimal-repository"];
        };
        /** @description The name of the tool used to generate the code scanning analysis. */
        "code-scanning-analysis-tool-name": string;
        /** @description The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
        "code-scanning-analysis-tool-guid": string | null;
        /** @description The full Git reference, formatted as `refs/heads/<branch name>`,
         *     `refs/pull/<number>/merge`, or `refs/pull/<number>/head`. */
        "code-scanning-ref": string;
        /**
         * @description State of a code scanning alert.
         * @enum {string}
         */
        "code-scanning-alert-state": "open" | "closed" | "dismissed" | "fixed";
        /** @description The security alert number. */
        "alert-number": number;
        /**
         * Format: date-time
         * @description The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "alert-created-at": string;
        /**
         * Format: uri
         * @description The REST API URL of the alert resource.
         */
        "alert-url": string;
        /**
         * Format: uri
         * @description The GitHub URL of the alert resource.
         */
        "alert-html-url": string;
        /**
         * Format: uri
         * @description The REST API URL for fetching the list of instances for an alert.
         */
        "alert-instances-url": string;
        /**
         * Format: date-time
         * @description The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "code-scanning-alert-dismissed-at": string | null;
        /**
         * @description **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
         * @enum {string|null}
         */
        "code-scanning-alert-dismissed-reason": null | "false positive" | "won't fix" | "used in tests";
        "code-scanning-alert-rule-summary": {
            /** @description A unique identifier for the rule used to detect the alert. */
            id?: string | null;
            /** @description The name of the rule used to detect the alert. */
            name?: string;
            /**
             * @description The severity of the alert.
             * @enum {string|null}
             */
            severity?: "none" | "note" | "warning" | "error" | null;
            /** @description A short description of the rule used to detect the alert. */
            description?: string;
        };
        /** @description The version of the tool used to generate the code scanning analysis. */
        "code-scanning-analysis-tool-version": string | null;
        "code-scanning-analysis-tool": {
            name?: components["schemas"]["code-scanning-analysis-tool-name"];
            version?: components["schemas"]["code-scanning-analysis-tool-version"];
            guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
        };
        /** @description Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
        "code-scanning-analysis-analysis-key": string;
        /** @description Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
        "code-scanning-alert-environment": string;
        /** @description Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code. */
        "code-scanning-analysis-category": string;
        /** @description Describe a region within a file for the alert. */
        "code-scanning-alert-location": {
            path?: string;
            start_line?: number;
            end_line?: number;
            start_column?: number;
            end_column?: number;
        };
        /**
         * @description A classification of the file. For example to identify it as generated.
         * @enum {string|null}
         */
        "code-scanning-alert-classification": "source" | "generated" | "test" | "library" | null;
        "code-scanning-alert-instance": {
            ref?: components["schemas"]["code-scanning-ref"];
            analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
            environment?: components["schemas"]["code-scanning-alert-environment"];
            category?: components["schemas"]["code-scanning-analysis-category"];
            state?: components["schemas"]["code-scanning-alert-state"];
            commit_sha?: string;
            message?: {
                text?: string;
            };
            location?: components["schemas"]["code-scanning-alert-location"];
            html_url?: string;
            /** @description Classifications that have been applied to the file that triggered the alert.
             *     For example identifying it as documentation, or a generated file. */
            classifications?: components["schemas"]["code-scanning-alert-classification"][];
        };
        "code-scanning-alert-items": {
            number: components["schemas"]["alert-number"];
            created_at: components["schemas"]["alert-created-at"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            instances_url: components["schemas"]["alert-instances-url"];
            state: components["schemas"]["code-scanning-alert-state"];
            dismissed_by: null | components["schemas"]["simple-user"];
            dismissed_at: components["schemas"]["code-scanning-alert-dismissed-at"];
            dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
            rule: components["schemas"]["code-scanning-alert-rule-summary"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
        };
        "code-scanning-alert-rule": {
            /** @description A unique identifier for the rule used to detect the alert. */
            id?: string | null;
            /** @description The name of the rule used to detect the alert. */
            name?: string;
            /**
             * @description The severity of the alert.
             * @enum {string|null}
             */
            severity?: "none" | "note" | "warning" | "error" | null;
            /** @description A short description of the rule used to detect the alert. */
            description?: string;
            /** @description description of the rule used to detect the alert. */
            full_description?: string;
            /** @description A set of tags applicable for the rule. */
            tags?: string[] | null;
            /** @description Detailed documentation for the rule as GitHub Flavored Markdown. */
            help?: string | null;
        };
        "code-scanning-alert": {
            number: components["schemas"]["alert-number"];
            created_at: components["schemas"]["alert-created-at"];
            url: components["schemas"]["alert-url"];
            html_url: components["schemas"]["alert-html-url"];
            instances_url: components["schemas"]["alert-instances-url"];
            state: components["schemas"]["code-scanning-alert-state"];
            dismissed_by: null | components["schemas"]["simple-user"];
            dismissed_at: components["schemas"]["code-scanning-alert-dismissed-at"];
            dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
            rule: components["schemas"]["code-scanning-alert-rule"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
            /** @deprecated */
            instances?: unknown;
        };
        /**
         * @description Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
         * @enum {string}
         */
        "code-scanning-alert-set-state": "open" | "dismissed";
        /** @description An identifier for the upload. */
        "code-scanning-analysis-sarif-id": string;
        /** @description The SHA of the commit to which the analysis you are uploading relates. */
        "code-scanning-analysis-commit-sha": string;
        /** @description Identifies the variable values associated with the environment in which this analysis was performed. */
        "code-scanning-analysis-environment": string;
        /**
         * Format: date-time
         * @description The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
         */
        "code-scanning-analysis-created-at": string;
        /**
         * Format: uri
         * @description The REST API URL of the analysis resource.
         */
        "code-scanning-analysis-url": string;
        "code-scanning-analysis": {
            ref: components["schemas"]["code-scanning-ref"];
            commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
            analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
            environment: components["schemas"]["code-scanning-analysis-environment"];
            category?: components["schemas"]["code-scanning-analysis-category"];
            error: string;
            created_at: components["schemas"]["code-scanning-analysis-created-at"];
            /** @description The total number of results in the analysis. */
            results_count: number;
            /** @description The total number of rules used in the analysis. */
            rules_count: number;
            /** @description Unique identifier for this analysis. */
            id: number;
            url: components["schemas"]["code-scanning-analysis-url"];
            sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
            tool: components["schemas"]["code-scanning-analysis-tool"];
            deletable: boolean;
            /** @description Warning generated when processing the analysis */
            warning: string;
            tool_name?: string;
        };
        /** @description A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.0/code-security/secure-coding/sarif-support-for-code-scanning)." */
        "code-scanning-analysis-sarif-file": string;
        "code-scanning-sarifs-receipt": {
            id?: components["schemas"]["code-scanning-analysis-sarif-id"];
            /**
             * Format: uri
             * @description The REST API URL for checking the status of the upload.
             */
            readonly url?: string;
        };
        /**
         * Collaborator
         * @description Collaborator
         */
        collaborator: {
            login: string;
            id: number;
            email?: string | null;
            name?: string | null;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            permissions?: {
                pull: boolean;
                triage?: boolean;
                push: boolean;
                maintain?: boolean;
                admin: boolean;
            };
        };
        /**
         * Repository Invitation
         * @description Repository invitations let you manage who you collaborate with.
         */
        "repository-invitation": {
            /** @description Unique identifier of the repository invitation. */
            id: number;
            repository: components["schemas"]["minimal-repository"];
            invitee: null | components["schemas"]["simple-user"];
            inviter: null | components["schemas"]["simple-user"];
            /**
             * @description The permission associated with the invitation.
             * @enum {string}
             */
            permissions: "read" | "write" | "admin" | "triage" | "maintain";
            /** Format: date-time */
            created_at: string;
            /** @description Whether or not the invitation has expired */
            expired?: boolean;
            /** @description URL for the repository invitation */
            url: string;
            html_url: string;
            node_id: string;
        };
        /**
         * Repository Collaborator Permission
         * @description Repository Collaborator Permission
         */
        "repository-collaborator-permission": {
            permission: string;
            user: null | components["schemas"]["collaborator"];
        };
        /**
         * Commit Comment
         * @description Commit Comment
         */
        "commit-comment": {
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            url: string;
            id: number;
            node_id: string;
            body: string;
            path: string | null;
            position: number | null;
            line: number | null;
            commit_id: string;
            user: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            author_association: components["schemas"]["author_association"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Scim Error
         * @description Scim Error
         */
        "scim-error": {
            message?: string | null;
            documentation_url?: string | null;
            detail?: string | null;
            status?: number;
            scimType?: string | null;
            schemas?: string[];
        };
        /**
         * Branch Short
         * @description Branch Short
         */
        "branch-short": {
            name: string;
            commit: {
                sha: string;
                url: string;
            };
            protected: boolean;
        };
        /**
         * Link
         * @description Hypermedia Link
         */
        link: {
            href: string;
        };
        /**
         * Pull Request Simple
         * @description Pull Request Simple
         */
        "pull-request-simple": {
            /** Format: uri */
            url: string;
            id: number;
            node_id: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            diff_url: string;
            /** Format: uri */
            patch_url: string;
            /** Format: uri */
            issue_url: string;
            /** Format: uri */
            commits_url: string;
            /** Format: uri */
            review_comments_url: string;
            review_comment_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            statuses_url: string;
            number: number;
            state: string;
            locked: boolean;
            title: string;
            user: null | components["schemas"]["simple-user"];
            body: string | null;
            labels: {
                /** Format: int64 */
                id: number;
                node_id: string;
                url: string;
                name: string;
                description: string;
                color: string;
                default: boolean;
            }[];
            milestone: null | components["schemas"]["milestone"];
            active_lock_reason?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            merged_at: string | null;
            merge_commit_sha: string | null;
            assignee: null | components["schemas"]["simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            requested_reviewers?: components["schemas"]["simple-user"][] | null;
            requested_teams?: components["schemas"]["team"][] | null;
            head: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: null | components["schemas"]["simple-user"];
            };
            base: {
                label: string;
                ref: string;
                repo: components["schemas"]["repository"];
                sha: string;
                user: null | components["schemas"]["simple-user"];
            };
            _links: {
                comments: components["schemas"]["link"];
                commits: components["schemas"]["link"];
                statuses: components["schemas"]["link"];
                html: components["schemas"]["link"];
                issue: components["schemas"]["link"];
                review_comments: components["schemas"]["link"];
                review_comment: components["schemas"]["link"];
                self: components["schemas"]["link"];
            };
            author_association: components["schemas"]["author_association"];
            /** @description Indicates whether or not the pull request is a draft. */
            draft?: boolean;
        };
        /** Simple Commit Status */
        "simple-commit-status": {
            description: string | null;
            id: number;
            node_id: string;
            state: string;
            context: string;
            /** Format: uri */
            target_url: string;
            required?: boolean | null;
            /** Format: uri */
            avatar_url: string | null;
            /** Format: uri */
            url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Combined Commit Status
         * @description Combined Commit Status
         */
        "combined-commit-status": {
            state: string;
            statuses: components["schemas"]["simple-commit-status"][];
            sha: string;
            total_count: number;
            repository: components["schemas"]["minimal-repository"];
            /** Format: uri */
            commit_url: string;
            /** Format: uri */
            url: string;
        };
        /**
         * Status
         * @description The status of a commit.
         */
        status: {
            url: string;
            avatar_url: string | null;
            id: number;
            node_id: string;
            state: string;
            description: string;
            target_url: string;
            context: string;
            created_at: string;
            updated_at: string;
            creator: null | components["schemas"]["simple-user"];
        };
        /**
         * Commit Comparison
         * @description Commit Comparison
         */
        "commit-comparison": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            permalink_url: string;
            /** Format: uri */
            diff_url: string;
            /** Format: uri */
            patch_url: string;
            base_commit: components["schemas"]["commit"];
            merge_base_commit: components["schemas"]["commit"];
            /** @enum {string} */
            status: "diverged" | "ahead" | "behind" | "identical";
            ahead_by: number;
            behind_by: number;
            total_commits: number;
            commits: components["schemas"]["commit"][];
            files?: components["schemas"]["diff-entry"][];
        };
        /**
         * ContentReferenceAttachment
         * @description Content Reference attachments allow you to provide context around URLs posted in comments
         */
        "content-reference-attachment": {
            /** @description The ID of the attachment */
            id: number;
            /** @description The title of the attachment */
            title: string;
            /** @description The body of the attachment */
            body: string;
            /** @description The node_id of the content attachment */
            node_id?: string;
        };
        /**
         * Content Tree
         * @description Content Tree
         */
        "content-tree": {
            type: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            entries?: {
                type: string;
                size: number;
                name: string;
                path: string;
                content?: string;
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                git_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                download_url: string | null;
                _links: {
                    /** Format: uri */
                    git: string | null;
                    /** Format: uri */
                    html: string | null;
                    /** Format: uri */
                    self: string;
                };
            }[];
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * Content Directory
         * @description A list of directory items
         */
        "content-directory": {
            type: string;
            size: number;
            name: string;
            path: string;
            content?: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        }[];
        /**
         * Content File
         * @description Content File
         */
        "content-file": {
            type: string;
            encoding: string;
            size: number;
            name: string;
            path: string;
            content: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
            target?: string;
            submodule_git_url?: string;
        };
        /**
         * Symlink Content
         * @description An object describing a symlink
         */
        "content-symlink": {
            type: string;
            target: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * Symlink Content
         * @description An object describing a symlink
         */
        "content-submodule": {
            type: string;
            /** Format: uri */
            submodule_git_url: string;
            size: number;
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            download_url: string | null;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
        };
        /**
         * File Commit
         * @description File Commit
         */
        "file-commit": {
            content: {
                name?: string;
                path?: string;
                sha?: string;
                size?: number;
                url?: string;
                html_url?: string;
                git_url?: string;
                download_url?: string;
                type?: string;
                _links?: {
                    self?: string;
                    git?: string;
                    html?: string;
                };
            } | null;
            commit: {
                sha?: string;
                node_id?: string;
                url?: string;
                html_url?: string;
                author?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                committer?: {
                    date?: string;
                    name?: string;
                    email?: string;
                };
                message?: string;
                tree?: {
                    url?: string;
                    sha?: string;
                };
                parents?: {
                    url?: string;
                    html_url?: string;
                    sha?: string;
                }[];
                verification?: {
                    verified?: boolean;
                    reason?: string;
                    signature?: string | null;
                    payload?: string | null;
                };
            };
        };
        /**
         * Contributor
         * @description Contributor
         */
        contributor: {
            login?: string;
            id?: number;
            node_id?: string;
            /** Format: uri */
            avatar_url?: string;
            gravatar_id?: string | null;
            /** Format: uri */
            url?: string;
            /** Format: uri */
            html_url?: string;
            /** Format: uri */
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            starred_url?: string;
            /** Format: uri */
            subscriptions_url?: string;
            /** Format: uri */
            organizations_url?: string;
            /** Format: uri */
            repos_url?: string;
            events_url?: string;
            /** Format: uri */
            received_events_url?: string;
            type: string;
            site_admin?: boolean;
            contributions: number;
            email?: string;
            name?: string;
        };
        /**
         * Deployment
         * @description A request for a specific ref(branch,sha,tag) to be deployed
         */
        deployment: {
            /** Format: uri */
            url: string;
            /** @description Unique identifier of the deployment */
            id: number;
            node_id: string;
            sha: string;
            /** @description The ref to deploy. This can be a branch, tag, or sha. */
            ref: string;
            /** @description Parameter to specify a task to execute */
            task: string;
            payload: {
                [key: string]: unknown;
            } | string;
            original_environment?: string;
            /** @description Name for the target deployment environment. */
            environment: string;
            description: string | null;
            creator: null | components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            statuses_url: string;
            /** Format: uri */
            repository_url: string;
            /** @description Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
            transient_environment?: boolean;
            /** @description Specifies if the given environment is one that end-users directly interact with. Default: false. */
            production_environment?: boolean;
            performed_via_github_app?: null | components["schemas"]["integration"];
        };
        /**
         * Deployment Status
         * @description The status of a deployment.
         */
        "deployment-status": {
            /** Format: uri */
            url: string;
            id: number;
            node_id: string;
            /**
             * @description The state of the status.
             * @enum {string}
             */
            state: "error" | "failure" | "inactive" | "pending" | "success" | "queued" | "in_progress";
            creator: null | components["schemas"]["simple-user"];
            /**
             * @description A short description of the status.
             * @default
             */
            description: string;
            /**
             * @description The environment of the deployment that the status is for.
             * @default
             */
            environment: string;
            /**
             * Format: uri
             * @description Deprecated: the URL to associate with this status.
             * @default
             */
            target_url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            deployment_url: string;
            /** Format: uri */
            repository_url: string;
            /**
             * Format: uri
             * @description The URL for accessing your environment.
             * @default
             */
            environment_url: string;
            /**
             * Format: uri
             * @description The URL to associate with this status.
             * @default
             */
            log_url: string;
            performed_via_github_app?: null | components["schemas"]["integration"];
        };
        /**
         * Short Blob
         * @description Short Blob
         */
        "short-blob": {
            url: string;
            sha: string;
        };
        /**
         * Blob
         * @description Blob
         */
        blob: {
            content: string;
            encoding: string;
            /** Format: uri */
            url: string;
            sha: string;
            size: number | null;
            node_id: string;
            highlighted_content?: string;
        };
        /**
         * Git Commit
         * @description Low-level Git commit operations within a repository
         */
        "git-commit": {
            /** @description SHA for the commit */
            sha: string;
            node_id: string;
            /** Format: uri */
            url: string;
            /** @description Identifying information for the git-user */
            author: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 */
                date: string;
                /** @description Git email address of the user */
                email: string;
                /** @description Name of the git user */
                name: string;
            };
            /** @description Identifying information for the git-user */
            committer: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 */
                date: string;
                /** @description Git email address of the user */
                email: string;
                /** @description Name of the git user */
                name: string;
            };
            /** @description Message describing the purpose of the commit */
            message: string;
            tree: {
                /** @description SHA for the commit */
                sha: string;
                /** Format: uri */
                url: string;
            };
            parents: {
                /** @description SHA for the commit */
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                html_url: string;
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
            };
            /** Format: uri */
            html_url: string;
        };
        /**
         * Git Reference
         * @description Git references within a repository
         */
        "git-ref": {
            ref: string;
            node_id: string;
            /** Format: uri */
            url: string;
            object: {
                type: string;
                /** @description SHA for the reference */
                sha: string;
                /** Format: uri */
                url: string;
            };
        };
        /**
         * Git Tag
         * @description Metadata for a Git tag
         */
        "git-tag": {
            node_id: string;
            /** @description Name of the tag */
            tag: string;
            sha: string;
            /**
             * Format: uri
             * @description URL for the tag
             */
            url: string;
            /** @description Message describing the purpose of the tag */
            message: string;
            tagger: {
                date: string;
                email: string;
                name: string;
            };
            object: {
                sha: string;
                type: string;
                /** Format: uri */
                url: string;
            };
            verification?: components["schemas"]["verification"];
        };
        /**
         * Git Tree
         * @description The hierarchy between files in a Git repository.
         */
        "git-tree": {
            sha: string;
            /** Format: uri */
            url: string;
            truncated: boolean;
            /** @description Objects specifying a tree structure */
            tree: {
                path?: string;
                mode?: string;
                type?: string;
                sha?: string;
                size?: number;
                url?: string;
            }[];
        };
        /** Hook Response */
        "hook-response": {
            code: number | null;
            status: string | null;
            message: string | null;
        };
        /**
         * Webhook
         * @description Webhooks for repositories.
         */
        hook: {
            type: string;
            /** @description Unique identifier of the webhook. */
            id: number;
            /** @description The name of a valid service, use 'web' for a webhook. */
            name: string;
            /** @description Determines whether the hook is actually triggered on pushes. */
            active: boolean;
            /** @description Determines what events the hook is triggered for. Default: ['push']. */
            events: string[];
            config: {
                email?: string;
                password?: string;
                room?: string;
                subdomain?: string;
                url?: components["schemas"]["webhook-config-url"];
                insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                content_type?: components["schemas"]["webhook-config-content-type"];
                digest?: string;
                secret?: components["schemas"]["webhook-config-secret"];
                token?: string;
            };
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            test_url: string;
            /** Format: uri */
            ping_url: string;
            last_response: components["schemas"]["hook-response"];
        };
        /**
         * Issue Event Label
         * @description Issue Event Label
         */
        "issue-event-label": {
            name: string | null;
            color: string | null;
        };
        /** Issue Event Dismissed Review */
        "issue-event-dismissed-review": {
            state: string;
            review_id: number;
            dismissal_message: string | null;
            dismissal_commit_id?: string | null;
        };
        /**
         * Issue Event Milestone
         * @description Issue Event Milestone
         */
        "issue-event-milestone": {
            title: string;
        };
        /**
         * Issue Event Project Card
         * @description Issue Event Project Card
         */
        "issue-event-project-card": {
            /** Format: uri */
            url: string;
            id: number;
            /** Format: uri */
            project_url: string;
            project_id: number;
            column_name: string;
            previous_column_name?: string;
        };
        /**
         * Issue Event Rename
         * @description Issue Event Rename
         */
        "issue-event-rename": {
            from: string;
            to: string;
        };
        /**
         * Issue Event
         * @description Issue Event
         */
        "issue-event": {
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            actor: null | components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            /** Format: date-time */
            created_at: string;
            issue?: null | components["schemas"]["issue"];
            label?: components["schemas"]["issue-event-label"];
            assignee?: null | components["schemas"]["simple-user"];
            assigner?: null | components["schemas"]["simple-user"];
            review_requester?: null | components["schemas"]["simple-user"];
            requested_reviewer?: null | components["schemas"]["simple-user"];
            requested_team?: components["schemas"]["team"];
            dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
            milestone?: components["schemas"]["issue-event-milestone"];
            project_card?: components["schemas"]["issue-event-project-card"];
            rename?: components["schemas"]["issue-event-rename"];
            author_association?: components["schemas"]["author_association"];
            lock_reason?: string | null;
            performed_via_github_app?: null | components["schemas"]["integration"];
        };
        /**
         * Labeled Issue Event
         * @description Labeled Issue Event
         */
        "labeled-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            label: {
                name: string;
                color: string;
            };
        };
        /**
         * Unlabeled Issue Event
         * @description Unlabeled Issue Event
         */
        "unlabeled-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            label: {
                name: string;
                color: string;
            };
        };
        /**
         * Assigned Issue Event
         * @description Assigned Issue Event
         */
        "assigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["integration"];
            assignee: components["schemas"]["simple-user"];
            assigner: components["schemas"]["simple-user"];
        };
        /**
         * Unassigned Issue Event
         * @description Unassigned Issue Event
         */
        "unassigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            assignee: components["schemas"]["simple-user"];
            assigner: components["schemas"]["simple-user"];
        };
        /**
         * Milestoned Issue Event
         * @description Milestoned Issue Event
         */
        "milestoned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            milestone: {
                title: string;
            };
        };
        /**
         * Demilestoned Issue Event
         * @description Demilestoned Issue Event
         */
        "demilestoned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            milestone: {
                title: string;
            };
        };
        /**
         * Renamed Issue Event
         * @description Renamed Issue Event
         */
        "renamed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            rename: {
                from: string;
                to: string;
            };
        };
        /**
         * Review Requested Issue Event
         * @description Review Requested Issue Event
         */
        "review-requested-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            review_requester: components["schemas"]["simple-user"];
            requested_team?: components["schemas"]["team"];
            requested_reviewer?: components["schemas"]["simple-user"];
        };
        /**
         * Review Request Removed Issue Event
         * @description Review Request Removed Issue Event
         */
        "review-request-removed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            review_requester: components["schemas"]["simple-user"];
            requested_team?: components["schemas"]["team"];
            requested_reviewer?: components["schemas"]["simple-user"];
        };
        /**
         * Review Dismissed Issue Event
         * @description Review Dismissed Issue Event
         */
        "review-dismissed-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            dismissed_review: {
                state: string;
                review_id: number;
                dismissal_message: string | null;
                dismissal_commit_id?: string;
            };
        };
        /**
         * Locked Issue Event
         * @description Locked Issue Event
         */
        "locked-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            lock_reason: string | null;
        };
        /**
         * Added to Project Issue Event
         * @description Added to Project Issue Event
         */
        "added-to-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Moved Column in Project Issue Event
         * @description Moved Column in Project Issue Event
         */
        "moved-column-in-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Removed from Project Issue Event
         * @description Removed from Project Issue Event
         */
        "removed-from-project-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Converted Note to Issue Issue Event
         * @description Converted Note to Issue Issue Event
         */
        "converted-note-to-issue-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: components["schemas"]["integration"];
            project_card?: {
                id: number;
                /** Format: uri */
                url: string;
                project_id: number;
                /** Format: uri */
                project_url: string;
                column_name: string;
                previous_column_name?: string;
            };
        };
        /**
         * Issue Event for Issue
         * @description Issue Event for Issue
         */
        "issue-event-for-issue": components["schemas"]["labeled-issue-event"] | components["schemas"]["unlabeled-issue-event"] | components["schemas"]["assigned-issue-event"] | components["schemas"]["unassigned-issue-event"] | components["schemas"]["milestoned-issue-event"] | components["schemas"]["demilestoned-issue-event"] | components["schemas"]["renamed-issue-event"] | components["schemas"]["review-requested-issue-event"] | components["schemas"]["review-request-removed-issue-event"] | components["schemas"]["review-dismissed-issue-event"] | components["schemas"]["locked-issue-event"] | components["schemas"]["added-to-project-issue-event"] | components["schemas"]["moved-column-in-project-issue-event"] | components["schemas"]["removed-from-project-issue-event"] | components["schemas"]["converted-note-to-issue-issue-event"];
        /**
         * Label
         * @description Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
         */
        label: {
            /** Format: int64 */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the label
             */
            url: string;
            /** @description The name of the label. */
            name: string;
            description: string | null;
            /** @description 6-character hex code, without the leading #, identifying the color */
            color: string;
            default: boolean;
        };
        /**
         * Timeline Comment Event
         * @description Timeline Comment Event
         */
        "timeline-comment-event": {
            event: string;
            actor: components["schemas"]["simple-user"];
            /** @description Unique identifier of the issue comment */
            id: number;
            node_id: string;
            /**
             * Format: uri
             * @description URL for the issue comment
             */
            url: string;
            /** @description Contents of the issue comment */
            body?: string;
            body_text?: string;
            body_html?: string;
            /** Format: uri */
            html_url: string;
            user: components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            issue_url: string;
            author_association: components["schemas"]["author_association"];
            performed_via_github_app?: null | components["schemas"]["integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Timeline Cross Referenced Event
         * @description Timeline Cross Referenced Event
         */
        "timeline-cross-referenced-event": {
            event: string;
            actor?: components["schemas"]["simple-user"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            source: {
                type?: string;
                issue?: components["schemas"]["issue"];
            };
        };
        /**
         * Timeline Committed Event
         * @description Timeline Committed Event
         */
        "timeline-committed-event": {
            event?: string;
            /** @description SHA for the commit */
            sha: string;
            node_id: string;
            /** Format: uri */
            url: string;
            /** @description Identifying information for the git-user */
            author: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 */
                date: string;
                /** @description Git email address of the user */
                email: string;
                /** @description Name of the git user */
                name: string;
            };
            /** @description Identifying information for the git-user */
            committer: {
                /**
                 * Format: date-time
                 * @description Timestamp of the commit
                 */
                date: string;
                /** @description Git email address of the user */
                email: string;
                /** @description Name of the git user */
                name: string;
            };
            /** @description Message describing the purpose of the commit */
            message: string;
            tree: {
                /** @description SHA for the commit */
                sha: string;
                /** Format: uri */
                url: string;
            };
            parents: {
                /** @description SHA for the commit */
                sha: string;
                /** Format: uri */
                url: string;
                /** Format: uri */
                html_url: string;
            }[];
            verification: {
                verified: boolean;
                reason: string;
                signature: string | null;
                payload: string | null;
            };
            /** Format: uri */
            html_url: string;
        };
        /**
         * Timeline Reviewed Event
         * @description Timeline Reviewed Event
         */
        "timeline-reviewed-event": {
            event: string;
            /** @description Unique identifier of the review */
            id: number;
            node_id: string;
            user: components["schemas"]["simple-user"];
            /** @description The text of the review. */
            body: string | null;
            state: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            pull_request_url: string;
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            /** Format: date-time */
            submitted_at?: string;
            /** @description A commit SHA for the review. */
            commit_id: string;
            body_html?: string;
            body_text?: string;
            author_association: components["schemas"]["author_association"];
        };
        /**
         * Pull Request Review Comment
         * @description Pull Request Review Comments are comments on a portion of the Pull Request's diff.
         */
        "pull-request-review-comment": {
            /** @description URL for the pull request review comment */
            url: string;
            /** @description The ID of the pull request review to which the comment belongs. */
            pull_request_review_id: number | null;
            /** @description The ID of the pull request review comment. */
            id: number;
            /** @description The node ID of the pull request review comment. */
            node_id: string;
            /** @description The diff of the line that the comment refers to. */
            diff_hunk: string;
            /** @description The relative path of the file to which the comment applies. */
            path: string;
            /** @description The line index in the diff to which the comment applies. */
            position: number;
            /** @description The index of the original line in the diff to which the comment applies. */
            original_position: number;
            /** @description The SHA of the commit to which the comment applies. */
            commit_id: string;
            /** @description The SHA of the original commit to which the comment applies. */
            original_commit_id: string;
            /** @description The comment ID to reply to. */
            in_reply_to_id?: number;
            user: components["schemas"]["simple-user"];
            /** @description The text of the comment. */
            body: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /**
             * Format: uri
             * @description HTML URL for the pull request review comment.
             */
            html_url: string;
            /**
             * Format: uri
             * @description URL for the pull request that the review comment belongs to.
             */
            pull_request_url: string;
            author_association: components["schemas"]["author_association"];
            _links: {
                self: {
                    /** Format: uri */
                    href: string;
                };
                html: {
                    /** Format: uri */
                    href: string;
                };
                pull_request: {
                    /** Format: uri */
                    href: string;
                };
            };
            /** @description The first line of the range for a multi-line comment. */
            start_line?: number | null;
            /** @description The first line of the range for a multi-line comment. */
            original_start_line?: number | null;
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string|null}
             */
            start_side: "LEFT" | "RIGHT" | null;
            /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            line?: number;
            /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            original_line?: number;
            /**
             * @description The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
             * @default RIGHT
             * @enum {string}
             */
            side: "LEFT" | "RIGHT";
            reactions?: components["schemas"]["reaction-rollup"];
            body_html?: string;
            body_text?: string;
        };
        /**
         * Timeline Line Commented Event
         * @description Timeline Line Commented Event
         */
        "timeline-line-commented-event": {
            event?: string;
            node_id?: string;
            comments?: components["schemas"]["pull-request-review-comment"][];
        };
        /**
         * Timeline Commit Commented Event
         * @description Timeline Commit Commented Event
         */
        "timeline-commit-commented-event": {
            event?: string;
            node_id?: string;
            commit_id?: string;
            comments?: components["schemas"]["commit-comment"][];
        };
        /**
         * Timeline Assigned Issue Event
         * @description Timeline Assigned Issue Event
         */
        "timeline-assigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            assignee: components["schemas"]["simple-user"];
        };
        /**
         * Timeline Unassigned Issue Event
         * @description Timeline Unassigned Issue Event
         */
        "timeline-unassigned-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
            assignee: components["schemas"]["simple-user"];
        };
        /**
         * State Change Issue Event
         * @description State Change Issue Event
         */
        "state-change-issue-event": {
            id: number;
            node_id: string;
            url: string;
            actor: components["schemas"]["simple-user"];
            event: string;
            commit_id: string | null;
            commit_url: string | null;
            created_at: string;
            performed_via_github_app: null | components["schemas"]["integration"];
        };
        /**
         * Timeline Event
         * @description Timeline Event
         */
        "timeline-issue-events": components["schemas"]["labeled-issue-event"] | components["schemas"]["unlabeled-issue-event"] | components["schemas"]["milestoned-issue-event"] | components["schemas"]["demilestoned-issue-event"] | components["schemas"]["renamed-issue-event"] | components["schemas"]["review-requested-issue-event"] | components["schemas"]["review-request-removed-issue-event"] | components["schemas"]["review-dismissed-issue-event"] | components["schemas"]["locked-issue-event"] | components["schemas"]["added-to-project-issue-event"] | components["schemas"]["moved-column-in-project-issue-event"] | components["schemas"]["removed-from-project-issue-event"] | components["schemas"]["converted-note-to-issue-issue-event"] | components["schemas"]["timeline-comment-event"] | components["schemas"]["timeline-cross-referenced-event"] | components["schemas"]["timeline-committed-event"] | components["schemas"]["timeline-reviewed-event"] | components["schemas"]["timeline-line-commented-event"] | components["schemas"]["timeline-commit-commented-event"] | components["schemas"]["timeline-assigned-issue-event"] | components["schemas"]["timeline-unassigned-issue-event"] | components["schemas"]["state-change-issue-event"];
        /**
         * Deploy Key
         * @description An SSH key granting access to a single repository.
         */
        "deploy-key": {
            id: number;
            key: string;
            url: string;
            title: string;
            verified: boolean;
            created_at: string;
            read_only: boolean;
        };
        /**
         * Language
         * @description Language
         */
        language: {
            [key: string]: number;
        };
        /**
         * License Content
         * @description License Content
         */
        "license-content": {
            name: string;
            path: string;
            sha: string;
            size: number;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string | null;
            /** Format: uri */
            git_url: string | null;
            /** Format: uri */
            download_url: string | null;
            type: string;
            content: string;
            encoding: string;
            _links: {
                /** Format: uri */
                git: string | null;
                /** Format: uri */
                html: string | null;
                /** Format: uri */
                self: string;
            };
            license: null | components["schemas"]["license-simple"];
        };
        /** Pages Source Hash */
        "pages-source-hash": {
            branch: string;
            path: string;
        };
        /** Pages Https Certificate */
        "pages-https-certificate": {
            /** @enum {string} */
            state: "new" | "authorization_created" | "authorization_pending" | "authorized" | "authorization_revoked" | "issued" | "uploaded" | "approved" | "errored" | "bad_authz" | "destroy_pending" | "dns_changed";
            description: string;
            /** @description Array of the domain set and its alternate name (if it is configured) */
            domains: string[];
            /** Format: date */
            expires_at?: string;
        };
        /**
         * GitHub Pages
         * @description The configuration for GitHub Pages for a repository.
         */
        page: {
            /**
             * Format: uri
             * @description The API address for accessing this Page resource.
             */
            url: string;
            /**
             * @description The status of the most recent build of the Page.
             * @enum {string|null}
             */
            status: "built" | "building" | "errored" | null;
            /** @description The Pages site's custom domain */
            cname: string | null;
            /**
             * @description The state if the domain is verified
             * @enum {string|null}
             */
            protected_domain_state?: "pending" | "verified" | "unverified" | null;
            /**
             * Format: date-time
             * @description The timestamp when a pending domain becomes unverified.
             */
            pending_domain_unverified_at?: string | null;
            /**
             * @description Whether the Page has a custom 404 page.
             * @default false
             */
            custom_404: boolean;
            /**
             * Format: uri
             * @description The web address the Page can be accessed from.
             */
            html_url?: string;
            source?: components["schemas"]["pages-source-hash"];
            /** @description Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
            public: boolean;
            https_certificate?: components["schemas"]["pages-https-certificate"];
            /** @description Whether https is enabled on the domain */
            https_enforced?: boolean;
        };
        /**
         * Page Build
         * @description Page Build
         */
        "page-build": {
            /** Format: uri */
            url: string;
            status: string;
            error: {
                message: string | null;
            };
            pusher: null | components["schemas"]["simple-user"];
            commit: string;
            duration: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        /**
         * Page Build Status
         * @description Page Build Status
         */
        "page-build-status": {
            /** Format: uri */
            url: string;
            status: string;
        };
        "repository-pre-receive-hook": {
            id?: number;
            name?: string;
            enforcement?: string;
            configuration_url?: string;
        };
        /**
         * Pull Request
         * @description Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
         */
        "pull-request": {
            /** Format: uri */
            url: string;
            id: number;
            node_id: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            diff_url: string;
            /** Format: uri */
            patch_url: string;
            /** Format: uri */
            issue_url: string;
            /** Format: uri */
            commits_url: string;
            /** Format: uri */
            review_comments_url: string;
            review_comment_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            statuses_url: string;
            /** @description Number uniquely identifying the pull request within its repository. */
            number: number;
            /**
             * @description State of this Pull Request. Either `open` or `closed`.
             * @enum {string}
             */
            state: "open" | "closed";
            locked: boolean;
            /** @description The title of the pull request. */
            title: string;
            user: null | components["schemas"]["simple-user"];
            body: string | null;
            labels: {
                /** Format: int64 */
                id: number;
                node_id: string;
                url: string;
                name: string;
                description: string | null;
                color: string;
                default: boolean;
            }[];
            milestone: null | components["schemas"]["milestone"];
            active_lock_reason?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            closed_at: string | null;
            /** Format: date-time */
            merged_at: string | null;
            merge_commit_sha: string | null;
            assignee: null | components["schemas"]["simple-user"];
            assignees?: components["schemas"]["simple-user"][] | null;
            requested_reviewers?: components["schemas"]["simple-user"][] | null;
            requested_teams?: components["schemas"]["team-simple"][] | null;
            head: {
                label: string;
                ref: string;
                repo: {
                    archive_url: string;
                    assignees_url: string;
                    blobs_url: string;
                    branches_url: string;
                    collaborators_url: string;
                    comments_url: string;
                    commits_url: string;
                    compare_url: string;
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    git_commits_url: string;
                    git_refs_url: string;
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    node_id: string;
                    issue_comment_url: string;
                    issue_events_url: string;
                    issues_url: string;
                    keys_url: string;
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    milestones_url: string;
                    name: string;
                    notifications_url: string;
                    owner: {
                        /** Format: uri */
                        avatar_url: string;
                        events_url: string;
                        /** Format: uri */
                        followers_url: string;
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string | null;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        node_id: string;
                        login: string;
                        /** Format: uri */
                        organizations_url: string;
                        /** Format: uri */
                        received_events_url: string;
                        /** Format: uri */
                        repos_url: string;
                        site_admin: boolean;
                        starred_url: string;
                        /** Format: uri */
                        subscriptions_url: string;
                        type: string;
                        /** Format: uri */
                        url: string;
                    };
                    private: boolean;
                    pulls_url: string;
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                    clone_url: string;
                    default_branch: string;
                    forks: number;
                    forks_count: number;
                    git_url: string;
                    has_downloads: boolean;
                    has_issues: boolean;
                    has_projects: boolean;
                    has_wiki: boolean;
                    has_pages: boolean;
                    /** Format: uri */
                    homepage: string | null;
                    language: string | null;
                    master_branch?: string;
                    archived: boolean;
                    disabled: boolean;
                    /** @description The repository visibility: public, private, or internal. */
                    visibility?: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    open_issues: number;
                    open_issues_count: number;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        push: boolean;
                        triage?: boolean;
                        pull: boolean;
                    };
                    temp_clone_token?: string;
                    allow_merge_commit?: boolean;
                    allow_squash_merge?: boolean;
                    allow_rebase_merge?: boolean;
                    license: {
                        key: string;
                        name: string;
                        /** Format: uri */
                        url: string | null;
                        spdx_id: string | null;
                        node_id: string;
                    } | null;
                    /** Format: date-time */
                    pushed_at: string;
                    size: number;
                    ssh_url: string;
                    stargazers_count: number;
                    /** Format: uri */
                    svn_url: string;
                    topics?: string[];
                    watchers: number;
                    watchers_count: number;
                    /** Format: date-time */
                    created_at: string;
                    /** Format: date-time */
                    updated_at: string;
                    allow_forking?: boolean;
                    is_template?: boolean;
                } | null;
                sha: string;
                user: {
                    /** Format: uri */
                    avatar_url: string;
                    events_url: string;
                    /** Format: uri */
                    followers_url: string;
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    node_id: string;
                    login: string;
                    /** Format: uri */
                    organizations_url: string;
                    /** Format: uri */
                    received_events_url: string;
                    /** Format: uri */
                    repos_url: string;
                    site_admin: boolean;
                    starred_url: string;
                    /** Format: uri */
                    subscriptions_url: string;
                    type: string;
                    /** Format: uri */
                    url: string;
                };
            };
            base: {
                label: string;
                ref: string;
                repo: {
                    archive_url: string;
                    assignees_url: string;
                    blobs_url: string;
                    branches_url: string;
                    collaborators_url: string;
                    comments_url: string;
                    commits_url: string;
                    compare_url: string;
                    contents_url: string;
                    /** Format: uri */
                    contributors_url: string;
                    /** Format: uri */
                    deployments_url: string;
                    description: string | null;
                    /** Format: uri */
                    downloads_url: string;
                    /** Format: uri */
                    events_url: string;
                    fork: boolean;
                    /** Format: uri */
                    forks_url: string;
                    full_name: string;
                    git_commits_url: string;
                    git_refs_url: string;
                    git_tags_url: string;
                    /** Format: uri */
                    hooks_url: string;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    is_template?: boolean;
                    node_id: string;
                    issue_comment_url: string;
                    issue_events_url: string;
                    issues_url: string;
                    keys_url: string;
                    labels_url: string;
                    /** Format: uri */
                    languages_url: string;
                    /** Format: uri */
                    merges_url: string;
                    milestones_url: string;
                    name: string;
                    notifications_url: string;
                    owner: {
                        /** Format: uri */
                        avatar_url: string;
                        events_url: string;
                        /** Format: uri */
                        followers_url: string;
                        following_url: string;
                        gists_url: string;
                        gravatar_id: string | null;
                        /** Format: uri */
                        html_url: string;
                        id: number;
                        node_id: string;
                        login: string;
                        /** Format: uri */
                        organizations_url: string;
                        /** Format: uri */
                        received_events_url: string;
                        /** Format: uri */
                        repos_url: string;
                        site_admin: boolean;
                        starred_url: string;
                        /** Format: uri */
                        subscriptions_url: string;
                        type: string;
                        /** Format: uri */
                        url: string;
                    };
                    private: boolean;
                    pulls_url: string;
                    releases_url: string;
                    /** Format: uri */
                    stargazers_url: string;
                    statuses_url: string;
                    /** Format: uri */
                    subscribers_url: string;
                    /** Format: uri */
                    subscription_url: string;
                    /** Format: uri */
                    tags_url: string;
                    /** Format: uri */
                    teams_url: string;
                    trees_url: string;
                    /** Format: uri */
                    url: string;
                    clone_url: string;
                    default_branch: string;
                    forks: number;
                    forks_count: number;
                    git_url: string;
                    has_downloads: boolean;
                    has_issues: boolean;
                    has_projects: boolean;
                    has_wiki: boolean;
                    has_pages: boolean;
                    /** Format: uri */
                    homepage: string | null;
                    language: string | null;
                    master_branch?: string;
                    archived: boolean;
                    disabled: boolean;
                    /** @description The repository visibility: public, private, or internal. */
                    visibility?: string;
                    /** Format: uri */
                    mirror_url: string | null;
                    open_issues: number;
                    open_issues_count: number;
                    permissions?: {
                        admin: boolean;
                        maintain?: boolean;
                        push: boolean;
                        triage?: boolean;
                        pull: boolean;
                    };
                    temp_clone_token?: string;
                    allow_merge_commit?: boolean;
                    allow_squash_merge?: boolean;
                    allow_rebase_merge?: boolean;
                    license: null | components["schemas"]["license-simple"];
                    /** Format: date-time */
                    pushed_at: string;
                    size: number;
                    ssh_url: string;
                    stargazers_count: number;
                    /** Format: uri */
                    svn_url: string;
                    topics?: string[];
                    watchers: number;
                    watchers_count: number;
                    /** Format: date-time */
                    created_at: string;
                    /** Format: date-time */
                    updated_at: string;
                    allow_forking?: boolean;
                };
                sha: string;
                user: {
                    /** Format: uri */
                    avatar_url: string;
                    events_url: string;
                    /** Format: uri */
                    followers_url: string;
                    following_url: string;
                    gists_url: string;
                    gravatar_id: string | null;
                    /** Format: uri */
                    html_url: string;
                    id: number;
                    node_id: string;
                    login: string;
                    /** Format: uri */
                    organizations_url: string;
                    /** Format: uri */
                    received_events_url: string;
                    /** Format: uri */
                    repos_url: string;
                    site_admin: boolean;
                    starred_url: string;
                    /** Format: uri */
                    subscriptions_url: string;
                    type: string;
                    /** Format: uri */
                    url: string;
                };
            };
            _links: {
                comments: components["schemas"]["link"];
                commits: components["schemas"]["link"];
                statuses: components["schemas"]["link"];
                html: components["schemas"]["link"];
                issue: components["schemas"]["link"];
                review_comments: components["schemas"]["link"];
                review_comment: components["schemas"]["link"];
                self: components["schemas"]["link"];
            };
            author_association: components["schemas"]["author_association"];
            /** @description Indicates whether or not the pull request is a draft. */
            draft?: boolean;
            merged: boolean;
            mergeable: boolean | null;
            rebaseable?: boolean | null;
            mergeable_state: string;
            merged_by: null | components["schemas"]["simple-user"];
            comments: number;
            review_comments: number;
            /** @description Indicates whether maintainers can modify the pull request. */
            maintainer_can_modify: boolean;
            commits: number;
            additions: number;
            deletions: number;
            changed_files: number;
        };
        /**
         * Pull Request Merge Result
         * @description Pull Request Merge Result
         */
        "pull-request-merge-result": {
            sha: string;
            merged: boolean;
            message: string;
        };
        /**
         * Pull Request Review Request
         * @description Pull Request Review Request
         */
        "pull-request-review-request": {
            users: components["schemas"]["simple-user"][];
            teams: components["schemas"]["team"][];
        };
        /**
         * Pull Request Review
         * @description Pull Request Reviews are reviews on pull requests.
         */
        "pull-request-review": {
            /** @description Unique identifier of the review */
            id: number;
            node_id: string;
            user: null | components["schemas"]["simple-user"];
            /** @description The text of the review. */
            body: string;
            state: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            pull_request_url: string;
            _links: {
                html: {
                    href: string;
                };
                pull_request: {
                    href: string;
                };
            };
            /** Format: date-time */
            submitted_at?: string;
            /** @description A commit SHA for the review. */
            commit_id: string;
            body_html?: string;
            body_text?: string;
            author_association: components["schemas"]["author_association"];
        };
        /**
         * Legacy Review Comment
         * @description Legacy Review Comment
         */
        "review-comment": {
            /** Format: uri */
            url: string;
            pull_request_review_id: number | null;
            id: number;
            node_id: string;
            diff_hunk: string;
            path: string;
            position: number | null;
            original_position: number;
            commit_id: string;
            original_commit_id: string;
            in_reply_to_id?: number;
            user: null | components["schemas"]["simple-user"];
            body: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            pull_request_url: string;
            author_association: components["schemas"]["author_association"];
            _links: {
                self: components["schemas"]["link"];
                html: components["schemas"]["link"];
                pull_request: components["schemas"]["link"];
            };
            body_text?: string;
            body_html?: string;
            reactions?: components["schemas"]["reaction-rollup"];
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string}
             */
            side: "LEFT" | "RIGHT";
            /**
             * @description The side of the first line of the range for a multi-line comment.
             * @default RIGHT
             * @enum {string|null}
             */
            start_side: "LEFT" | "RIGHT" | null;
            /** @description The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            line?: number;
            /** @description The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
            original_line?: number;
            /** @description The first line of the range for a multi-line comment. */
            start_line?: number | null;
            /** @description The original first line of the range for a multi-line comment. */
            original_start_line?: number | null;
        };
        /**
         * Release Asset
         * @description Data related to a release.
         */
        "release-asset": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            browser_download_url: string;
            id: number;
            node_id: string;
            /** @description The file name of the asset. */
            name: string;
            label: string | null;
            /**
             * @description State of the release asset.
             * @enum {string}
             */
            state: "uploaded" | "open";
            content_type: string;
            size: number;
            download_count: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            uploader: null | components["schemas"]["simple-user"];
        };
        /**
         * Release
         * @description A release.
         */
        release: {
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            assets_url: string;
            upload_url: string;
            /** Format: uri */
            tarball_url: string | null;
            /** Format: uri */
            zipball_url: string | null;
            id: number;
            node_id: string;
            /** @description The name of the tag. */
            tag_name: string;
            /** @description Specifies the commitish value that determines where the Git tag is created from. */
            target_commitish: string;
            name: string | null;
            body?: string | null;
            /** @description true to create a draft (unpublished) release, false to create a published one. */
            draft: boolean;
            /** @description Whether to identify the release as a prerelease or a full release. */
            prerelease: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            published_at: string | null;
            author: components["schemas"]["simple-user"];
            assets: components["schemas"]["release-asset"][];
            body_html?: string;
            body_text?: string;
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Stargazer
         * @description Stargazer
         */
        stargazer: {
            /** Format: date-time */
            starred_at: string;
            user: null | components["schemas"]["simple-user"];
        };
        /**
         * Code Frequency Stat
         * @description Code Frequency Stat
         */
        "code-frequency-stat": number[];
        /**
         * Commit Activity
         * @description Commit Activity
         */
        "commit-activity": {
            days: number[];
            total: number;
            week: number;
        };
        /**
         * Contributor Activity
         * @description Contributor Activity
         */
        "contributor-activity": {
            author: null | components["schemas"]["simple-user"];
            total: number;
            weeks: {
                w?: number;
                a?: number;
                d?: number;
                c?: number;
            }[];
        };
        /** Participation Stats */
        "participation-stats": {
            all: number[];
            owner: number[];
        };
        /**
         * Repository Invitation
         * @description Repository invitations let you manage who you collaborate with.
         */
        "repository-subscription": {
            /** @description Determines if notifications should be received from this repository. */
            subscribed: boolean;
            /** @description Determines if all notifications should be blocked from this repository. */
            ignored: boolean;
            reason: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            repository_url: string;
        };
        /**
         * Tag
         * @description Tag
         */
        tag: {
            name: string;
            commit: {
                sha: string;
                /** Format: uri */
                url: string;
            };
            /** Format: uri */
            zipball_url: string;
            /** Format: uri */
            tarball_url: string;
            node_id: string;
        };
        /**
         * Topic
         * @description A topic aggregates entities that are related to a subject.
         */
        topic: {
            names: string[];
        };
        /** Search Result Text Matches */
        "search-result-text-matches": {
            object_url?: string;
            object_type?: string | null;
            property?: string;
            fragment?: string;
            matches?: {
                text?: string;
                indices?: number[];
            }[];
        }[];
        /**
         * Code Search Result Item
         * @description Code Search Result Item
         */
        "code-search-result-item": {
            name: string;
            path: string;
            sha: string;
            /** Format: uri */
            url: string;
            /** Format: uri */
            git_url: string;
            /** Format: uri */
            html_url: string;
            repository: components["schemas"]["minimal-repository"];
            score: number;
            file_size?: number;
            language?: string | null;
            /** Format: date-time */
            last_modified_at?: string;
            line_numbers?: string[];
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Commit Search Result Item
         * @description Commit Search Result Item
         */
        "commit-search-result-item": {
            /** Format: uri */
            url: string;
            sha: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            comments_url: string;
            commit: {
                author: {
                    name: string;
                    email: string;
                    /** Format: date-time */
                    date: string;
                };
                committer: null | components["schemas"]["git-user"];
                comment_count: number;
                message: string;
                tree: {
                    sha: string;
                    /** Format: uri */
                    url: string;
                };
                /** Format: uri */
                url: string;
                verification?: components["schemas"]["verification"];
            };
            author: null | components["schemas"]["simple-user"];
            committer: null | components["schemas"]["git-user"];
            parents: {
                url?: string;
                html_url?: string;
                sha?: string;
            }[];
            repository: components["schemas"]["minimal-repository"];
            score: number;
            node_id: string;
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Issue Search Result Item
         * @description Issue Search Result Item
         */
        "issue-search-result-item": {
            /** Format: uri */
            url: string;
            /** Format: uri */
            repository_url: string;
            labels_url: string;
            /** Format: uri */
            comments_url: string;
            /** Format: uri */
            events_url: string;
            /** Format: uri */
            html_url: string;
            id: number;
            node_id: string;
            number: number;
            title: string;
            locked: boolean;
            active_lock_reason?: string | null;
            assignees?: components["schemas"]["simple-user"][] | null;
            user: null | components["schemas"]["simple-user"];
            labels: {
                /** Format: int64 */
                id?: number;
                node_id?: string;
                url?: string;
                name?: string;
                color?: string;
                default?: boolean;
                description?: string | null;
            }[];
            state: string;
            assignee: null | components["schemas"]["simple-user"];
            milestone: null | components["schemas"]["milestone"];
            comments: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            closed_at: string | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            pull_request?: {
                /** Format: date-time */
                merged_at?: string | null;
                /** Format: uri */
                diff_url: string | null;
                /** Format: uri */
                html_url: string | null;
                /** Format: uri */
                patch_url: string | null;
                /** Format: uri */
                url: string | null;
            };
            body?: string;
            score: number;
            author_association: components["schemas"]["author_association"];
            draft?: boolean;
            repository?: components["schemas"]["repository"];
            body_html?: string;
            body_text?: string;
            /** Format: uri */
            timeline_url?: string;
            performed_via_github_app?: null | components["schemas"]["integration"];
            reactions?: components["schemas"]["reaction-rollup"];
        };
        /**
         * Label Search Result Item
         * @description Label Search Result Item
         */
        "label-search-result-item": {
            id: number;
            node_id: string;
            /** Format: uri */
            url: string;
            name: string;
            color: string;
            default: boolean;
            description: string | null;
            score: number;
            text_matches?: components["schemas"]["search-result-text-matches"];
        };
        /**
         * Repo Search Result Item
         * @description Repo Search Result Item
         */
        "repo-search-result-item": {
            id: number;
            node_id: string;
            name: string;
            full_name: string;
            owner: null | components["schemas"]["simple-user"];
            private: boolean;
            /** Format: uri */
            html_url: string;
            description: string | null;
            fork: boolean;
            /** Format: uri */
            url: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            pushed_at: string;
            /** Format: uri */
            homepage: string | null;
            size: number;
            stargazers_count: number;
            watchers_count: number;
            language: string | null;
            forks_count: number;
            open_issues_count: number;
            master_branch?: string;
            default_branch: string;
            score: number;
            /** Format: uri */
            forks_url: string;
            keys_url: string;
            collaborators_url: string;
            /** Format: uri */
            teams_url: string;
            /** Format: uri */
            hooks_url: string;
            issue_events_url: string;
            /** Format: uri */
            events_url: string;
            assignees_url: string;
            branches_url: string;
            /** Format: uri */
            tags_url: string;
            blobs_url: string;
            git_tags_url: string;
            git_refs_url: string;
            trees_url: string;
            statuses_url: string;
            /** Format: uri */
            languages_url: string;
            /** Format: uri */
            stargazers_url: string;
            /** Format: uri */
            contributors_url: string;
            /** Format: uri */
            subscribers_url: string;
            /** Format: uri */
            subscription_url: string;
            commits_url: string;
            git_commits_url: string;
            comments_url: string;
            issue_comment_url: string;
            contents_url: string;
            compare_url: string;
            /** Format: uri */
            merges_url: string;
            archive_url: string;
            /** Format: uri */
            downloads_url: string;
            issues_url: string;
            pulls_url: string;
            milestones_url: string;
            notifications_url: string;
            labels_url: string;
            releases_url: string;
            /** Format: uri */
            deployments_url: string;
            git_url: string;
            ssh_url: string;
            clone_url: string;
            /** Format: uri */
            svn_url: string;
            forks: number;
            open_issues: number;
            watchers: number;
            topics?: string[];
            /** Format: uri */
            mirror_url: string | null;
            has_issues: boolean;
            has_projects: boolean;
            has_pages: boolean;
            has_wiki: boolean;
            has_downloads: boolean;
            archived: boolean;
            /** @description Returns whether or not this repository disabled. */
            disabled: boolean;
            /** @description The repository visibility: public, private, or internal. */
            visibility?: string;
            license: null | components["schemas"]["license-simple"];
            permissions?: {
                admin: boolean;
                maintain?: boolean;
                push: boolean;
                triage?: boolean;
                pull: boolean;
            };
            text_matches?: components["schemas"]["search-result-text-matches"];
            temp_clone_token?: string;
            allow_merge_commit?: boolean;
            allow_squash_merge?: boolean;
            allow_rebase_merge?: boolean;
            delete_branch_on_merge?: boolean;
            allow_forking?: boolean;
            is_template?: boolean;
        };
        /**
         * Topic Search Result Item
         * @description Topic Search Result Item
         */
        "topic-search-result-item": {
            name: string;
            display_name: string | null;
            short_description: string | null;
            description: string | null;
            created_by: string | null;
            released: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            featured: boolean;
            curated: boolean;
            score: number;
            repository_count?: number | null;
            /** Format: uri */
            logo_url?: string | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            related?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
            aliases?: {
                topic_relation?: {
                    id?: number;
                    name?: string;
                    topic_id?: number;
                    relation_type?: string;
                };
            }[] | null;
        };
        /**
         * User Search Result Item
         * @description User Search Result Item
         */
        "user-search-result-item": {
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            score: number;
            following_url: string;
            gists_url: string;
            starred_url: string;
            events_url: string;
            public_repos?: number;
            public_gists?: number;
            followers?: number;
            following?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            name?: string | null;
            bio?: string | null;
            /** Format: email */
            email?: string | null;
            location?: string | null;
            site_admin: boolean;
            hireable?: boolean | null;
            text_matches?: components["schemas"]["search-result-text-matches"];
            blog?: string | null;
            company?: string | null;
            /** Format: date-time */
            suspended_at?: string | null;
        };
        "configuration-status": {
            status?: string;
            progress?: {
                status: string;
                key: string;
            }[];
        };
        "maintenance-status": {
            status?: string;
            scheduled_time?: string;
            connection_services?: {
                name: string;
                number: number;
            }[];
        };
        "enterprise-settings": {
            enterprise?: {
                private_mode?: boolean;
                public_pages?: boolean;
                subdomain_isolation?: boolean;
                signup_enabled?: boolean;
                github_hostname?: string;
                identicons_host?: string;
                http_proxy?: string | null;
                auth_mode?: string;
                expire_sessions?: boolean;
                admin_password?: string | null;
                configuration_id?: number;
                configuration_run_count?: number;
                avatar?: {
                    enabled?: boolean;
                    uri?: string;
                };
                customer?: {
                    name?: string;
                    email?: string;
                    uuid?: string;
                    secret_key_data?: string;
                    public_key_data?: string;
                };
                license?: {
                    seats?: number;
                    evaluation?: boolean;
                    perpetual?: boolean;
                    unlimited_seating?: boolean;
                    support_key?: string;
                    ssh_allowed?: boolean;
                    cluster_support?: boolean;
                    expire_at?: string;
                };
                github_ssl?: {
                    enabled?: boolean;
                    cert?: string | null;
                    key?: string | null;
                };
                ldap?: {
                    host?: string | null;
                    port?: number;
                    base?: unknown[];
                    uid?: string | null;
                    bind_dn?: string | null;
                    password?: string | null;
                    method?: string;
                    search_strategy?: string;
                    user_groups?: unknown[];
                    admin_group?: string | null;
                    virtual_attribute_enabled?: boolean;
                    recursive_group_search?: boolean;
                    posix_support?: boolean;
                    user_sync_emails?: boolean;
                    user_sync_keys?: boolean;
                    user_sync_interval?: number;
                    team_sync_interval?: number;
                    sync_enabled?: boolean;
                    reconciliation?: {
                        user?: string | null;
                        org?: string | null;
                    };
                    profile?: {
                        uid?: string;
                        name?: string | null;
                        mail?: string | null;
                        key?: string | null;
                    };
                };
                cas?: {
                    url?: string | null;
                };
                saml?: {
                    sso_url?: string | null;
                    certificate?: string | null;
                    certificate_path?: string | null;
                    issuer?: string | null;
                    idp_initiated_sso?: boolean;
                    disable_admin_demote?: boolean;
                };
                github_oauth?: {
                    client_id?: string;
                    client_secret?: string;
                    organization_name?: string;
                    organization_team?: string;
                };
                smtp?: {
                    enabled?: boolean;
                    address?: string;
                    authentication?: string;
                    port?: string;
                    domain?: string;
                    username?: string;
                    user_name?: string;
                    enable_starttls_auto?: boolean;
                    password?: string;
                    "discard-to-noreply-address"?: boolean;
                    support_address?: string;
                    support_address_type?: string;
                    noreply_address?: string;
                };
                ntp?: {
                    primary_server?: string;
                    secondary_server?: string;
                };
                timezone?: string | null;
                snmp?: {
                    enabled?: boolean;
                    community?: string;
                };
                syslog?: {
                    enabled?: boolean;
                    server?: string | null;
                    protocol_name?: string;
                };
                assets?: string | null;
                pages?: {
                    enabled?: boolean;
                };
                collectd?: {
                    enabled?: boolean;
                    server?: string | null;
                    port?: number;
                    encryption?: string | null;
                    username?: string | null;
                    password?: string | null;
                };
                mapping?: {
                    enabled?: boolean;
                    tileserver?: string | null;
                    basemap?: string;
                    token?: string | null;
                };
                load_balancer?: string | null;
            };
            run_list?: string[];
        };
        "ssh-key": {
            key?: string;
            "pretty-print"?: string;
        };
        /**
         * Private User
         * @description Private User
         */
        "private-user": {
            login: string;
            id: number;
            node_id: string;
            /** Format: uri */
            avatar_url: string;
            gravatar_id: string | null;
            /** Format: uri */
            url: string;
            /** Format: uri */
            html_url: string;
            /** Format: uri */
            followers_url: string;
            following_url: string;
            gists_url: string;
            starred_url: string;
            /** Format: uri */
            subscriptions_url: string;
            /** Format: uri */
            organizations_url: string;
            /** Format: uri */
            repos_url: string;
            events_url: string;
            /** Format: uri */
            received_events_url: string;
            type: string;
            site_admin: boolean;
            name: string | null;
            company: string | null;
            blog: string | null;
            location: string | null;
            /** Format: email */
            email: string | null;
            hireable: boolean | null;
            bio: string | null;
            public_repos: number;
            public_gists: number;
            followers: number;
            following: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            private_gists: number;
            total_private_repos: number;
            owned_private_repos: number;
            disk_usage: number;
            collaborators: number;
            two_factor_authentication: boolean;
            plan?: {
                collaborators: number;
                name: string;
                space: number;
                private_repos: number;
            };
            /** Format: date-time */
            suspended_at?: string;
            business_plus?: boolean;
            ldap_dn?: string;
        };
        /**
         * Email
         * @description Email
         */
        email: {
            /** Format: email */
            email: string;
            primary: boolean;
            verified: boolean;
            visibility: string | null;
        };
        /**
         * GPG Key
         * @description A unique encryption key
         */
        "gpg-key": {
            id: number;
            primary_key_id: number | null;
            key_id: string;
            public_key: string;
            emails: {
                email?: string;
                verified?: boolean;
            }[];
            subkeys: {
                id?: number;
                primary_key_id?: number;
                key_id?: string;
                public_key?: string;
                emails?: unknown[];
                subkeys?: unknown[];
                can_sign?: boolean;
                can_encrypt_comms?: boolean;
                can_encrypt_storage?: boolean;
                can_certify?: boolean;
                created_at?: string;
                expires_at?: string | null;
                raw_key?: string | null;
            }[];
            can_sign: boolean;
            can_encrypt_comms: boolean;
            can_encrypt_storage: boolean;
            can_certify: boolean;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            expires_at: string | null;
            raw_key: string | null;
        };
        /**
         * Key
         * @description Key
         */
        key: {
            key: string;
            id: number;
            url: string;
            title: string;
            /** Format: date-time */
            created_at: string;
            verified: boolean;
            read_only: boolean;
        };
        /**
         * Starred Repository
         * @description Starred Repository
         */
        "starred-repository": {
            /** Format: date-time */
            starred_at: string;
            repo: components["schemas"]["repository"];
        };
        /**
         * Hovercard
         * @description Hovercard
         */
        hovercard: {
            contexts: {
                message: string;
                octicon: string;
            }[];
        };
        /**
         * Key Simple
         * @description Key Simple
         */
        "key-simple": {
            id: number;
            key: string;
        };
    };
    responses: {
        /** @description Resource not found */
        not_found: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Validation failed */
        validation_failed_simple: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["validation-error-simple"];
            };
        };
        /** @description Preview header missing */
        preview_header_missing: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message: string;
                    documentation_url: string;
                };
            };
        };
        /** @description Forbidden */
        forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Requires authentication */
        requires_authentication: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Validation failed */
        validation_failed: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["validation-error"];
            };
        };
        /** @description Not modified */
        not_modified: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Gone */
        gone: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Service unavailable */
        service_unavailable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    code?: string;
                    message?: string;
                    documentation_url?: string;
                };
            };
        };
        /** @description Forbidden Gist */
        forbidden_gist: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    block?: {
                        reason?: string;
                        created_at?: string;
                        html_url?: string | null;
                    };
                    message?: string;
                    documentation_url?: string;
                };
            };
        };
        /** @description Moved permanently */
        moved_permanently: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Conflict */
        conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Temporary Redirect */
        temporary_redirect: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Internal Error */
        internal_error: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Response if GitHub Advanced Security is not enabled for this repository */
        code_scanning_forbidden_read: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Response if the repository is archived or if github advanced security is not enabled for this repository */
        code_scanning_forbidden_write: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
            };
        };
        /** @description Bad Request */
        bad_request: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["basic-error"];
                "application/scim+json": components["schemas"]["scim-error"];
            };
        };
        /** @description Found */
        found: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Accepted */
        accepted: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": Record<string, never>;
            };
        };
        /** @description A header with no content is returned. */
        no_content: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description Results per page (max 100) */
        "per-page": number;
        /** @description Page number of the results to fetch. */
        page: number;
        "hook-id": number;
        /** @description One of `asc` (ascending) or `desc` (descending). */
        direction: "asc" | "desc";
        "key-ids": string;
        "team-id": number;
        username: string;
        org: string;
        "pre-receive-environment-id": number;
        /** @description pre_receive_hook_id parameter */
        "pre-receive-hook-id": number;
        "token-id": number;
        /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        since: string;
        /** @description installation_id parameter */
        "installation-id": number;
        /** @description grant_id parameter */
        "grant-id": number;
        /** @description The client ID of your GitHub app. */
        "client-id": string;
        "access-token": string;
        "app-slug": string;
        /** @description authorization_id parameter */
        "authorization-id": number;
        /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        enterprise: string;
        /** @description Unique identifier of an organization. */
        "org-id": number;
        /** @description Unique identifier of the self-hosted runner group. */
        "runner-group-id": number;
        /** @description Unique identifier of the self-hosted runner. */
        "runner-id": number;
        /** @description gist_id parameter */
        "gist-id": string;
        /** @description comment_id parameter */
        "comment-id": number;
        /** @description A list of comma separated label names. Example: `bug,ui,@high` */
        labels: string;
        owner: string;
        repo: string;
        /** @description If `true`, show notifications marked as read. */
        all: boolean;
        /** @description If `true`, only shows notifications in which the user is directly participating or mentioned. */
        participating: boolean;
        /** @description Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        before: string;
        /** @description thread_id parameter */
        "thread-id": number;
        /** @description An organization ID. Only return organizations with an ID greater than this ID. */
        "since-org": number;
        "repository-id": number;
        /** @description secret_name parameter */
        "secret-name": string;
        /** @description team_slug parameter */
        "team-slug": string;
        "discussion-number": number;
        "comment-number": number;
        "reaction-id": number;
        "project-id": number;
        /** @description card_id parameter */
        "card-id": number;
        /** @description column_id parameter */
        "column-id": number;
        /** @description artifact_id parameter */
        "artifact-id": number;
        /** @description job_id parameter */
        "job-id": number;
        /** @description Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        actor: string;
        /** @description Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        "workflow-run-branch": string;
        /** @description Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        event: string;
        /** @description Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run)." */
        "workflow-run-status": "completed" | "action_required" | "cancelled" | "failure" | "neutral" | "skipped" | "stale" | "success" | "timed_out" | "in_progress" | "queued" | "requested" | "waiting";
        /** @description Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.0/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
        created: string;
        /** @description If `true` pull requests are omitted from the response (empty array). */
        "exclude-pull-requests": boolean;
        /** @description The id of the workflow run. */
        "run-id": number;
        /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
        "workflow-id": number | string;
        /** @description The name of the branch. */
        branch: string;
        /** @description check_run_id parameter */
        "check-run-id": number;
        /** @description check_suite_id parameter */
        "check-suite-id": number;
        /** @description Returns check runs with the specified `name`. */
        "check-name": string;
        /** @description Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
        status: "queued" | "in_progress" | "completed";
        /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        "tool-name": components["schemas"]["code-scanning-analysis-tool-name"];
        /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        "tool-guid": components["schemas"]["code-scanning-analysis-tool-guid"];
        /** @description The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        "git-ref": components["schemas"]["code-scanning-ref"];
        /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        "alert-number": components["schemas"]["alert-number"];
        /** @description commit_sha parameter */
        "commit-sha": string;
        /** @description deployment_id parameter */
        "deployment-id": number;
        /** @description invitation_id parameter */
        "invitation-id": number;
        /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        sort: "created" | "updated";
        /** @description issue_number parameter */
        "issue-number": number;
        /** @description key_id parameter */
        "key-id": number;
        /** @description milestone_number parameter */
        "milestone-number": number;
        "pull-number": number;
        /** @description review_id parameter */
        "review-id": number;
        /** @description asset_id parameter */
        "asset-id": number;
        /** @description release_id parameter */
        "release-id": number;
        /** @description A repository ID. Only return repositories with an ID greater than this ID. */
        "since-repo": number;
        /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        order: "desc" | "asc";
        /** @description gpg_key_id parameter */
        "gpg-key-id": number;
        /** @description A user ID. Only return users with an ID greater than this ID. */
        "since-user": number;
    };
    requestBodies: never;
    headers: {
        /** @example <https://api.github.com/resource?page=2>; rel="next", <https://api.github.com/resource?page=5>; rel="last" */
        link: string;
        /** @example text/html */
        "content-type": string;
        /** @example 0.17.4 */
        "x-common-marker-version": string;
        /** @example 5000 */
        "x-rate-limit-limit": number;
        /** @example 4999 */
        "x-rate-limit-remaining": number;
        /** @example 1590701888 */
        "x-rate-limit-reset": number;
        /** @example https://pipelines.actions.githubusercontent.com/OhgS4QRKqmgx7bKC27GKU83jnQjyeqG8oIMTge8eqtheppcmw8/_apis/pipelines/1/runs/176/signedlogcontent?urlExpires=2020-01-24T18%3A10%3A31.5729946Z&urlSigningMethod=HMACV1&urlSignature=agG73JakPYkHrh06seAkvmH7rBR4Ji4c2%2B6a2ejYh3E%3D */
        location: string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "meta/root": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: uri-template */
                        current_user_url: string;
                        /** Format: uri-template */
                        current_user_authorizations_html_url: string;
                        /** Format: uri-template */
                        authorizations_url: string;
                        /** Format: uri-template */
                        code_search_url: string;
                        /** Format: uri-template */
                        commit_search_url: string;
                        /** Format: uri-template */
                        emails_url: string;
                        /** Format: uri-template */
                        emojis_url: string;
                        /** Format: uri-template */
                        events_url: string;
                        /** Format: uri-template */
                        feeds_url: string;
                        /** Format: uri-template */
                        followers_url: string;
                        /** Format: uri-template */
                        following_url: string;
                        /** Format: uri-template */
                        gists_url: string;
                        /** Format: uri-template */
                        hub_url: string;
                        /** Format: uri-template */
                        issue_search_url: string;
                        /** Format: uri-template */
                        issues_url: string;
                        /** Format: uri-template */
                        keys_url: string;
                        /** Format: uri-template */
                        label_search_url: string;
                        /** Format: uri-template */
                        notifications_url: string;
                        /** Format: uri-template */
                        organization_url: string;
                        /** Format: uri-template */
                        organization_repositories_url: string;
                        /** Format: uri-template */
                        organization_teams_url: string;
                        /** Format: uri-template */
                        public_gists_url: string;
                        /** Format: uri-template */
                        rate_limit_url: string;
                        /** Format: uri-template */
                        repository_url: string;
                        /** Format: uri-template */
                        repository_search_url: string;
                        /** Format: uri-template */
                        current_user_repositories_url: string;
                        /** Format: uri-template */
                        starred_url: string;
                        /** Format: uri-template */
                        starred_gists_url: string;
                        /** Format: uri-template */
                        topic_search_url?: string;
                        /** Format: uri-template */
                        user_url: string;
                        /** Format: uri-template */
                        user_organizations_url: string;
                        /** Format: uri-template */
                        user_repositories_url: string;
                        /** Format: uri-template */
                        user_search_url: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/list-global-webhooks": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["global-hook"][];
                };
            };
        };
    };
    "enterprise-admin/create-global-webhook": {
        parameters: {
            query?: never;
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "web",
                 *       "events": [
                 *         "organization",
                 *         "user"
                 *       ],
                 *       "config": {
                 *         "url": "https://example.com/webhook",
                 *         "content_type": "json",
                 *         "secret": "secret"
                 *       }
                 *     } */
                "application/json": {
                    /** @description Must be passed as "web". */
                    name: string;
                    /** @description Key/value pairs to provide settings for this webhook. */
                    config: {
                        /** @description The URL to which the payloads will be delivered. */
                        url: string;
                        /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
                        content_type?: string;
                        /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers) header. */
                        secret?: string;
                        /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
                        insecure_ssl?: string;
                    };
                    /** @description The [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
                    events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["global-hook"];
                };
            };
        };
    };
    "enterprise-admin/get-global-webhook": {
        parameters: {
            query?: never;
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["global-hook"];
                };
            };
        };
    };
    "enterprise-admin/delete-global-webhook": {
        parameters: {
            query?: never;
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/update-global-webhook": {
        parameters: {
            query?: never;
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "events": [
                 *         "organization"
                 *       ],
                 *       "config": {
                 *         "url": "https://example.com/webhook"
                 *       }
                 *     } */
                "application/json": {
                    /** @description Key/value pairs to provide settings for this webhook. */
                    config?: {
                        /** @description The URL to which the payloads will be delivered. */
                        url: string;
                        /** @description The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
                        content_type?: string;
                        /** @description If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers) header. */
                        secret?: string;
                        /** @description Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
                        insecure_ssl?: string;
                    };
                    /** @description The [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`. */
                    events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["global-hook-2"];
                };
            };
        };
    };
    "enterprise-admin/ping-global-webhook": {
        parameters: {
            query?: never;
            header: {
                /** @description This API is under preview and subject to change. */
                accept: string;
            };
            path: {
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/list-public-keys": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "accessed";
                /** @description Only show public keys accessed after the given time. */
                since?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["public-key-full"][];
                };
            };
        };
    };
    "enterprise-admin/delete-public-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key_ids: components["parameters"]["key-ids"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/update-ldap-mapping-for-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com"
                 *     } */
                "application/json": {
                    /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
                    ldap_dn: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ldap-mapping-team"];
                };
            };
        };
    };
    "enterprise-admin/sync-ldap-mapping-for-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/update-ldap-mapping-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
                 *     } */
                "application/json": {
                    /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. */
                    ldap_dn: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ldap-mapping-user"];
                };
            };
        };
    };
    "enterprise-admin/sync-ldap-mapping-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        status?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/create-org": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "login": "github",
                 *       "profile_name": "GitHub, Inc.",
                 *       "admin": "monalisaoctocat"
                 *     } */
                "application/json": {
                    /** @description The organization's username. */
                    login: string;
                    /** @description The login of the user who will manage this organization. */
                    admin: string;
                    /** @description The organization's display name. */
                    profile_name?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-simple"];
                };
            };
        };
    };
    "enterprise-admin/update-org-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "login": "the-new-octocats"
                 *     } */
                "application/json": {
                    /** @description The organization's new name. */
                    login: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-environments": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"][];
                };
            };
        };
    };
    "enterprise-admin/create-pre-receive-environment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "DevTools Hook Env",
                 *       "image_url": "https://my_file_server/path/to/devtools_env.tar.gz"
                 *     } */
                "application/json": {
                    /** @description The new pre-receive environment's name. */
                    name: string;
                    /** @description URL from which to download a tarball of this environment. */
                    image_url: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-environment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
        };
    };
    "enterprise-admin/delete-pre-receive-environment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Client Errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-environment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description This pre-receive environment's new name. */
                    name?: string;
                    /** @description URL from which to download a tarball of this environment. */
                    image_url?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment"];
                };
            };
            /** @description Client Errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/start-pre-receive-environment-download": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment-download-status"];
                };
            };
            /** @description Client Errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        errors?: {
                            resource?: string;
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "enterprise-admin/get-download-status-for-pre-receive-environment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pre_receive_environment_id: components["parameters"]["pre-receive-environment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-environment-download-status"];
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-hooks": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to) or `name`. */
                sort?: "created" | "updated" | "name";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/create-pre-receive-hook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Check Commits",
                 *       "script": "scripts/commit_check.sh",
                 *       "enforcement": "disabled",
                 *       "allow_downstream_configuration": false,
                 *       "script_repository": {
                 *         "full_name": "DevIT/hooks"
                 *       },
                 *       "environment": {
                 *         "id": 2
                 *       }
                 *     } */
                "application/json": {
                    /** @description The name of the hook. */
                    name: string;
                    /** @description The script that the hook runs. */
                    script: string;
                    /** @description The GitHub repository where the script is kept. */
                    script_repository: {
                        [key: string]: unknown;
                    };
                    /** @description The pre-receive environment where the script is executed. */
                    environment: {
                        [key: string]: unknown;
                    };
                    /** @description The state of enforcement for this hook. default: `disabled` */
                    enforcement?: string;
                    /** @description Whether enforcement can be overridden at the org or repo level. default: `false` */
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/delete-pre-receive-hook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Check Commits",
                 *       "environment": {
                 *         "id": 1
                 *       },
                 *       "allow_downstream_configuration": true
                 *     } */
                "application/json": {
                    /** @description The name of the hook. */
                    name?: string;
                    /** @description The script that the hook runs. */
                    script?: string;
                    /** @description The GitHub repository where the script is kept. */
                    script_repository?: {
                        [key: string]: unknown;
                    };
                    /** @description The pre-receive environment where the script is executed. */
                    environment?: {
                        [key: string]: unknown;
                    };
                    /** @description The state of enforcement for this hook. */
                    enforcement?: string;
                    /** @description Whether enforcement can be overridden at the org or repo level. */
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/list-personal-access-tokens": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"][];
                };
            };
        };
    };
    "enterprise-admin/delete-personal-access-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_id: components["parameters"]["token-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/create-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "login": "monalisa",
                 *       "email": "octocat@github.com"
                 *     } */
                "application/json": {
                    /** @description The user's username. */
                    login: string;
                    /** @description **Required for built-in authentication.** The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For details on built-in and centrally-managed authentication, see the the [GitHub authentication guide](https://docs.github.com/enterprise/2.18/admin/guides/user-management/authenticating-users-for-your-github-enterprise-server-instance/). */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"];
                };
            };
        };
    };
    "enterprise-admin/delete-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/update-username-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "login": "thenewmonalisa"
                 *     } */
                "application/json": {
                    /** @description The user's new username. */
                    login: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/create-impersonation-o-auth-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A list of [scopes](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
                    scopes?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
        };
    };
    "enterprise-admin/delete-impersonation-o-auth-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "apps/get-authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"];
                };
            };
        };
    };
    "apps/create-from-manifest": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"] & ({
                        client_id: string;
                        client_secret: string;
                        webhook_secret: string | null;
                        pem: string;
                    } & {
                        [key: string]: unknown;
                    });
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "apps/get-webhook-config-for-app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "apps/update-webhook-config-for-app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    url?: components["schemas"]["webhook-config-url"];
                    content_type?: components["schemas"]["webhook-config-content-type"];
                    secret?: components["schemas"]["webhook-config-secret"];
                    insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "apps/list-installations": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                outdated?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The permissions the installation has are included under the `permissions` key. */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation"][];
                };
            };
        };
    };
    "apps/get-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "apps/delete-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/create-installation-access-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description List of repository names that the token should have access to */
                    repositories?: string[];
                    /** @description List of repository IDs that the token should have access to */
                    repository_ids?: number[];
                    permissions?: components["schemas"]["app-permissions"];
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation-token"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/suspend-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/unsuspend-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "oauth-authorizations/list-grants": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description The client ID of your GitHub app. */
                client_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["application-grant"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "oauth-authorizations/get-grant": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description grant_id parameter */
                grant_id: components["parameters"]["grant-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["application-grant"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/delete-grant": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description grant_id parameter */
                grant_id: components["parameters"]["grant-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "apps/delete-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                 *     } */
                "application/json": {
                    /** @description The OAuth access token used to authenticate to the GitHub API. */
                    access_token: string;
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/revoke-grant-for-application": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
                access_token: components["parameters"]["access-token"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "apps/check-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The access_token of the OAuth application. */
                    access_token: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/delete-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
                 *     } */
                "application/json": {
                    /** @description The OAuth access token used to authenticate to the GitHub API. */
                    access_token: string;
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/reset-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The access_token of the OAuth application. */
                    access_token: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/scope-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The OAuth access token used to authenticate to the GitHub API. */
                    access_token: string;
                    /** @description The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */
                    target?: string;
                    /** @description The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */
                    target_id?: number;
                    /** @description The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
                    repositories?: string[];
                    /** @description The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified. */
                    repository_ids?: number[];
                    permissions?: components["schemas"]["app-permissions"];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/check-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
                access_token: components["parameters"]["access-token"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null | components["schemas"]["authorization"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/reset-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
                access_token: components["parameters"]["access-token"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
        };
    };
    "apps/revoke-authorization-for-application": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
                access_token: components["parameters"]["access-token"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "apps/get-by-slug": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                app_slug: components["parameters"]["app-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "oauth-authorizations/list-authorizations": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description The client ID of your GitHub app. */
                client_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "oauth-authorizations/create-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A list of scopes that this authorization is in. */
                    scopes?: string[] | null;
                    /** @description A note to remind you what the OAuth token is for. */
                    note?: string;
                    /** @description A URL to remind you what app the OAuth token is for. */
                    note_url?: string;
                    /** @description The OAuth app client key for which to create the token. */
                    client_id?: string;
                    /** @description The OAuth app client secret for which to create the token. */
                    client_secret?: string;
                    /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
                    fingerprint?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/authorizations/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-or-create-authorization-for-app": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The OAuth app client secret for which to create the token. */
                    client_secret: string;
                    /** @description A list of scopes that this authorization is in. */
                    scopes?: string[] | null;
                    /** @description A note to remind you what the OAuth token is for. */
                    note?: string;
                    /** @description A URL to remind you what app the OAuth token is for. */
                    note_url?: string;
                    /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
                    fingerprint?: string;
                };
            };
        };
        responses: {
            /** @description if returning an existing token */
            200: {
                headers: {
                    /** @example https://api.github.com/authorizations/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
            201: {
                headers: {
                    /** @example https://api.github.com/authorizations/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The client ID of your GitHub app. */
                client_id: components["parameters"]["client-id"];
                fingerprint: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The OAuth app client secret for which to create the token. */
                    client_secret: string;
                    /** @description A list of scopes that this authorization is in. */
                    scopes?: string[] | null;
                    /** @description A note to remind you what the OAuth token is for. */
                    note?: string;
                    /** @description A URL to remind you what app the OAuth token is for. */
                    note_url?: string;
                };
            };
        };
        responses: {
            /** @description if returning an existing token */
            200: {
                headers: {
                    /** @example https://api.github.com/authorizations/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description Response if returning a new token */
            201: {
                headers: {
                    /** @example https://api.github.com/authorizations/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "oauth-authorizations/get-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description authorization_id parameter */
                authorization_id: components["parameters"]["authorization-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/delete-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description authorization_id parameter */
                authorization_id: components["parameters"]["authorization-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "oauth-authorizations/update-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description authorization_id parameter */
                authorization_id: components["parameters"]["authorization-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description A list of scopes that this authorization is in. */
                    scopes?: string[] | null;
                    /** @description A list of scopes to add to this authorization. */
                    add_scopes?: string[];
                    /** @description A list of scopes to remove from this authorization. */
                    remove_scopes?: string[];
                    /** @description A note to remind you what the OAuth token is for. */
                    note?: string;
                    /** @description A URL to remind you what app the OAuth token is for. */
                    note_url?: string;
                    /** @description A unique string to distinguish an authorization from others created for the same client ID and user. */
                    fingerprint?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "codes-of-conduct/get-all-codes-of-conduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-of-conduct"][];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "codes-of-conduct/get-conduct-code": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-of-conduct"];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
        };
    };
    "emojis/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "enterprise-admin/get-announcement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["announcement"];
                };
            };
        };
    };
    "enterprise-admin/remove-announcement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/set-announcement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["announcement"];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["announcement"];
                };
            };
        };
    };
    "enterprise-admin/get-license-information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["license-info"];
                };
            };
        };
    };
    "enterprise-admin/get-all-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-comment-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-comment-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-gist-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-gist-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-hooks-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-hook-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-issue-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-issue-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-milestone-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-milestone-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-org-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-organization-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-pages-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-page-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-pull-request-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-pull-request-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-repo-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-repository-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-user-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-user-overview"];
                };
            };
        };
    };
    "enterprise-admin/get-github-actions-permissions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-enterprise-permissions"];
                };
            };
        };
    };
    "enterprise-admin/set-github-actions-permissions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "enabled_organizations": "all",
                 *       "allowed_actions": "selected"
                 *     } */
                "application/json": {
                    enabled_organizations: components["schemas"]["enabled-organizations"];
                    allowed_actions?: components["schemas"]["allowed-actions"];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        organizations: components["schemas"]["organization-simple"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "selected_organization_ids": [
                 *         32,
                 *         91
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of organization IDs to enable for GitHub Actions. */
                    selected_organization_ids: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/enable-selected-organization-github-actions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of an organization. */
                org_id: components["parameters"]["org-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/disable-selected-organization-github-actions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of an organization. */
                org_id: components["parameters"]["org-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/get-allowed-actions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "enterprise-admin/set-allowed-actions-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/list-self-hosted-runner-groups-for-enterprise": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runner_groups: components["schemas"]["runner-groups-enterprise"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/create-self-hosted-runner-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Expensive hardware runners",
                 *       "visibility": "selected",
                 *       "selected_organization_ids": [
                 *         32,
                 *         91
                 *       ],
                 *       "runners": [
                 *         9,
                 *         2
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Name of the runner group. */
                    name: string;
                    /**
                     * @description Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
                     * @enum {string}
                     */
                    visibility?: "selected" | "all";
                    /** @description List of organization IDs that can access the runner group. */
                    selected_organization_ids?: number[];
                    /** @description List of runner IDs to add to the runner group. */
                    runners?: number[];
                    /**
                     * @description Whether the runner group can be used by `public` repositories.
                     * @default false
                     */
                    allows_public_repositories?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-enterprise"];
                };
            };
        };
    };
    "enterprise-admin/get-self-hosted-runner-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-enterprise"];
                };
            };
        };
    };
    "enterprise-admin/delete-self-hosted-runner-group-from-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/update-self-hosted-runner-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Expensive hardware runners",
                 *       "visibility": "selected"
                 *     } */
                "application/json": {
                    /** @description Name of the runner group. */
                    name?: string;
                    /**
                     * @description Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
                     * @default all
                     * @enum {string}
                     */
                    visibility?: "selected" | "all";
                    /**
                     * @description Whether the runner group can be used by `public` repositories.
                     * @default false
                     */
                    allows_public_repositories?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-enterprise"];
                };
            };
        };
    };
    "enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        organizations: components["schemas"]["organization-simple"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "selected_organization_ids": [
                 *         32,
                 *         91
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of organization IDs that can access the runner group. */
                    selected_organization_ids: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of an organization. */
                org_id: components["parameters"]["org-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of an organization. */
                org_id: components["parameters"]["org-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runners: components["schemas"]["runner"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "runners": [
                 *         9,
                 *         2
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of runner IDs to add to the runner group. */
                    runners: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/list-self-hosted-runners-for-enterprise": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count?: number;
                        runners?: components["schemas"]["runner"][];
                    };
                };
            };
        };
    };
    "enterprise-admin/list-runner-applications-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-application"][];
                };
            };
        };
    };
    "enterprise-admin/create-registration-token-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "enterprise-admin/create-remove-token-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "enterprise-admin/get-self-hosted-runner-for-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner"];
                };
            };
        };
    };
    "enterprise-admin/delete-self-hosted-runner-from-enterprise": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
                enterprise: components["parameters"]["enterprise"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "activity/list-public-events": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "activity/get-feeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["feed"];
                };
            };
        };
    };
    "gists/list": {
        parameters: {
            query?: {
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["base-gist"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
        };
    };
    "gists/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Description of the gist */
                    description?: string;
                    /** @description Names and content for the files that make up the gist */
                    files: {
                        [key: string]: {
                            /** @description Content of the file */
                            content: string;
                        };
                    };
                    public?: boolean | ("true" | "false");
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/gists/aa5a315d61ae9438b18d */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-simple"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "gists/list-public": {
        parameters: {
            query?: {
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["base-gist"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "gists/list-starred": {
        parameters: {
            query?: {
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["base-gist"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "gists/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-simple"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden_gist"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": (({
                    /** @description Description of the gist */
                    description?: string;
                    /** @description Names of files to be updated */
                    files?: {
                        [key: string]: (({
                            /** @description The new content of the file */
                            content?: string;
                            /** @description The new filename for the file */
                            filename?: string | null;
                        } | unknown | unknown | Record<string, never>) | null) | unknown | unknown | Record<string, never>;
                    };
                } | unknown | unknown) | null) | unknown | unknown;
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-simple"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "gists/list-comments": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-comment"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/create-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The comment text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/gists/a6db0bec360bb87e9418/comments/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-comment"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/get-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-comment"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden_gist"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/delete-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/update-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The comment text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "gists/list-commits": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    /** @example <https://api.github.com/resource?page=2>; rel="next" */
                    Link?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-commit"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/list-forks": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-simple"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/fork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/gists/aa5a315d61ae9438b18d */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["base-gist"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "gists/check-is-starred": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if gist is starred */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            /** @description Not Found if gist is not starred */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "gists/star": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/unstar": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "gists/get-revision": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gist_id parameter */
                gist_id: components["parameters"]["gist-id"];
                sha: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gist-simple"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "gitignore/get-all-templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "gitignore/get-template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gitignore-template"];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "apps/list-repos-accessible-to-installation": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        repositories: components["schemas"]["repository"][];
                        repository_selection?: string;
                    };
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "apps/revoke-installation-access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/list": {
        parameters: {
            query?: {
                /** @description Indicates which sorts of issues to return. Can be one of:
                 *     \* `assigned`: Issues assigned to you
                 *     \* `created`: Issues created by you
                 *     \* `mentioned`: Issues mentioning you
                 *     \* `subscribed`: Issues you're subscribed to updates for
                 *     \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation */
                filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
                /** @description Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description A list of comma separated label names. Example: `bug,ui,@high` */
                labels?: components["parameters"]["labels"];
                /** @description What to sort results by. Can be either `created`, `updated`, `comments`. */
                sort?: "created" | "updated" | "comments";
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                collab?: boolean;
                orgs?: boolean;
                owned?: boolean;
                pulls?: boolean;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"][];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "licenses/get-all-commonly-used": {
        parameters: {
            query?: {
                featured?: boolean;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["license-simple"][];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "licenses/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                license: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["license"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "markdown/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The Markdown text to render in HTML. */
                    text: string;
                    /**
                     * @description The rendering mode. Can be either `markdown` or `gfm`.
                     * @default markdown
                     * @enum {string}
                     */
                    mode?: "markdown" | "gfm";
                    /** @description The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
                    context?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    "Content-Type": components["headers"]["content-type"];
                    /** @example 279 */
                    "Content-Length"?: string;
                    "X-CommonMarker-Version": components["headers"]["x-common-marker-version"];
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "markdown/render-raw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "text/plain": string;
                "text/x-markdown": string;
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    "X-CommonMarker-Version": components["headers"]["x-common-marker-version"];
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "meta/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["api-overview"];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "activity/list-public-events-for-repo-network": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
            301: components["responses"]["moved_permanently"];
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "activity/list-notifications-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description If `true`, show notifications marked as read. */
                all?: components["parameters"]["all"];
                /** @description If `true`, only shows notifications in which the user is directly participating or mentioned. */
                participating?: components["parameters"]["participating"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                before?: components["parameters"]["before"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["thread"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "activity/mark-notifications-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: date-time
                     * @description Describes the last point that notifications were checked.
                     */
                    last_read_at?: string;
                    /** @description Whether the notification has been read. */
                    read?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Reset Content */
            205: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/get-thread": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description thread_id parameter */
                thread_id: components["parameters"]["thread-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["thread"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/mark-thread-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description thread_id parameter */
                thread_id: components["parameters"]["thread-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reset Content */
            205: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/get-thread-subscription-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description thread_id parameter */
                thread_id: components["parameters"]["thread-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["thread-subscription"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/set-thread-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description thread_id parameter */
                thread_id: components["parameters"]["thread-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Whether to block all notifications from a thread.
                     * @default false
                     */
                    ignored?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["thread-subscription"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/delete-thread-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description thread_id parameter */
                thread_id: components["parameters"]["thread-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "meta/get-octocat": {
        parameters: {
            query?: {
                /** @description The words to show in Octocat's speech bubble */
                s?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octocat-stream": string;
                };
            };
        };
    };
    "orgs/list": {
        parameters: {
            query?: {
                /** @description An organization ID. Only return organizations with an ID greater than this ID. */
                since?: components["parameters"]["since-org"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    /** @example <https://api.github.com/organizations?since=135>; rel="next" */
                    Link?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-simple"][];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "orgs/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-full"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "billing_email": "mona@github.com",
                 *       "company": "GitHub",
                 *       "email": "mona@github.com",
                 *       "twitter_username": "github",
                 *       "location": "San Francisco",
                 *       "name": "github",
                 *       "description": "GitHub, the company.",
                 *       "default_repository_permission": "read",
                 *       "members_can_create_repositories": true,
                 *       "members_allowed_repository_creation_type": "all"
                 *     } */
                "application/json": {
                    /** @description Billing email address. This address is not publicized. */
                    billing_email?: string;
                    /** @description The company name. */
                    company?: string;
                    /** @description The publicly visible email address. */
                    email?: string;
                    /** @description The Twitter username of the company. */
                    twitter_username?: string;
                    /** @description The location. */
                    location?: string;
                    /** @description The shorthand name of the company. */
                    name?: string;
                    /** @description The description of the company. */
                    description?: string;
                    /** @description Toggles whether an organization can use organization projects. */
                    has_organization_projects?: boolean;
                    /** @description Toggles whether repositories that belong to the organization can use repository projects. */
                    has_repository_projects?: boolean;
                    /**
                     * @description Default permission level members have for organization repositories:
                     *     \* `read` - can pull, but not push to or administer this repository.
                     *     \* `write` - can pull and push, but not administer this repository.
                     *     \* `admin` - can pull, push, and administer this repository.
                     *     \* `none` - no permissions granted by default.
                     * @default read
                     * @enum {string}
                     */
                    default_repository_permission?: "read" | "write" | "admin" | "none";
                    /**
                     * @description Toggles the ability of non-admin organization members to create repositories. Can be one of:
                     *     \* `true` - all organization members can create repositories.
                     *     \* `false` - only organization owners can create repositories.
                     *     Default: `true`
                     *     **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
                     * @default true
                     */
                    members_can_create_repositories?: boolean;
                    /** @description Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
                     *     \* `true` - all organization members can create internal repositories.
                     *     \* `false` - only organization owners can create internal repositories.
                     *     Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
                    members_can_create_internal_repositories?: boolean;
                    /** @description Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
                     *     \* `true` - all organization members can create private repositories.
                     *     \* `false` - only organization owners can create private repositories.
                     *     Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
                    members_can_create_private_repositories?: boolean;
                    /** @description Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
                     *     \* `true` - all organization members can create public repositories.
                     *     \* `false` - only organization owners can create public repositories.
                     *     Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
                    members_can_create_public_repositories?: boolean;
                    /**
                     * @description Specifies which types of repositories non-admin organization members can create. Can be one of:
                     *     \* `all` - all organization members can create public and private repositories.
                     *     \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
                     *     \* `none` - only admin members can create repositories.
                     *     **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
                     * @enum {string}
                     */
                    members_allowed_repository_creation_type?: "all" | "private" | "none";
                    /**
                     * @description Toggles whether organization members can create GitHub Pages sites. Can be one of:
                     *     \* `true` - all organization members can create GitHub Pages sites.
                     *     \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
                     * @default true
                     */
                    members_can_create_pages?: boolean;
                    /**
                     * @description Toggles whether organization members can fork private organization repositories. Can be one of:
                     *     \* `true` - all organization members can fork private repositories within the organization.
                     *     \* `false` - no organization members can fork private repositories within the organization.
                     * @default false
                     */
                    members_can_fork_private_repositories?: boolean;
                    blog?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-full"];
                };
            };
            409: components["responses"]["conflict"];
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validation-error"] | components["schemas"]["validation-error-simple"];
                };
            };
        };
    };
    "actions/get-github-actions-permissions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-organization-permissions"];
                };
            };
        };
    };
    "actions/set-github-actions-permissions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "enabled_repositories": "all",
                 *       "allowed_actions": "selected"
                 *     } */
                "application/json": {
                    enabled_repositories: components["schemas"]["enabled-repositories"];
                    allowed_actions?: components["schemas"]["allowed-actions"];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-selected-repositories-enabled-github-actions-organization": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        repositories: components["schemas"]["repository"][];
                    };
                };
            };
        };
    };
    "actions/set-selected-repositories-enabled-github-actions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "selected_repository_ids": [
                 *         32,
                 *         42
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of repository IDs to enable for GitHub Actions. */
                    selected_repository_ids: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/enable-selected-repository-github-actions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/disable-selected-repository-github-actions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/get-allowed-actions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "actions/set-allowed-actions-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-self-hosted-runner-groups-for-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runner_groups: components["schemas"]["runner-groups-org"][];
                    };
                };
            };
        };
    };
    "actions/create-self-hosted-runner-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Expensive hardware runners",
                 *       "visibility": "selected",
                 *       "selected_repository_ids": [
                 *         32,
                 *         91
                 *       ],
                 *       "runners": [
                 *         9,
                 *         2
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Name of the runner group. */
                    name: string;
                    /**
                     * @description Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
                     * @default all
                     * @enum {string}
                     */
                    visibility?: "selected" | "all" | "private";
                    /** @description List of repository IDs that can access the runner group. */
                    selected_repository_ids?: number[];
                    /** @description List of runner IDs to add to the runner group. */
                    runners?: number[];
                    /**
                     * @description Whether the runner group can be used by `public` repositories.
                     * @default false
                     */
                    allows_public_repositories?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-org"];
                };
            };
        };
    };
    "actions/get-self-hosted-runner-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-org"];
                };
            };
        };
    };
    "actions/delete-self-hosted-runner-group-from-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/update-self-hosted-runner-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Expensive hardware runners",
                 *       "visibility": "selected"
                 *     } */
                "application/json": {
                    /** @description Name of the runner group. */
                    name: string;
                    /**
                     * @description Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
                     * @enum {string}
                     */
                    visibility?: "selected" | "all" | "private";
                    /**
                     * @description Whether the runner group can be used by `public` repositories.
                     * @default false
                     */
                    allows_public_repositories?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-groups-org"];
                };
            };
        };
    };
    "actions/list-repo-access-to-self-hosted-runner-group-in-org": {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        repositories: components["schemas"]["minimal-repository"][];
                    };
                };
            };
        };
    };
    "actions/set-repo-access-to-self-hosted-runner-group-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "selected_repository_ids": [
                 *         32,
                 *         91
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of repository IDs that can access the runner group. */
                    selected_repository_ids: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/add-repo-access-to-self-hosted-runner-group-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/remove-repo-access-to-self-hosted-runner-group-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-self-hosted-runners-in-group-for-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runners: components["schemas"]["runner"][];
                    };
                };
            };
        };
    };
    "actions/set-self-hosted-runners-in-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "runners": [
                 *         9,
                 *         2
                 *       ]
                 *     } */
                "application/json": {
                    /** @description List of runner IDs to add to the runner group. */
                    runners: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/add-self-hosted-runner-to-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/remove-self-hosted-runner-from-group-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner group. */
                runner_group_id: components["parameters"]["runner-group-id"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-self-hosted-runners-for-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runners: components["schemas"]["runner"][];
                    };
                };
            };
        };
    };
    "actions/list-runner-applications-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-application"][];
                };
            };
        };
    };
    "actions/create-registration-token-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "actions/create-remove-token-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "actions/get-self-hosted-runner-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner"];
                };
            };
        };
    };
    "actions/delete-self-hosted-runner-from-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-org-secrets": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        secrets: components["schemas"]["organization-actions-secret"][];
                    };
                };
            };
        };
    };
    "actions/get-org-public-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-public-key"];
                };
            };
        };
    };
    "actions/get-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-actions-secret"];
                };
            };
        };
    };
    "actions/create-or-update-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "encrypted_value": "c2VjcmV0",
                 *       "key_id": "012345678912345678",
                 *       "visibility": "selected",
                 *       "selected_repository_ids": [
                 *         "1296269",
                 *         "1296280"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-an-organization-public-key) endpoint. */
                    encrypted_value?: string;
                    /** @description ID of the key you used to encrypt the secret. */
                    key_id?: string;
                    /**
                     * @description Configures the access that repositories have to the organization secret. Can be one of:
                     *     \- `all` - All repositories in an organization can access the secret.
                     *     \- `private` - Private repositories in an organization can access the secret.
                     *     \- `selected` - Only specific repositories can access the secret.
                     * @enum {string}
                     */
                    visibility: "all" | "private" | "selected";
                    /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
                    selected_repository_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Response when creating a secret */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["empty-object"];
                };
            };
            /** @description Response when updating a secret */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/delete-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-selected-repos-for-org-secret": {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        repositories: components["schemas"]["minimal-repository"][];
                    };
                };
            };
        };
    };
    "actions/set-selected-repos-for-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "selected_repository_ids": [
                 *         64780797
                 *       ]
                 *     } */
                "application/json": {
                    /** @description An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
                    selected_repository_ids: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/add-selected-repo-to-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content when repository was added to the selected list */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict when visibility type is not set to selected */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/remove-selected-repo-from-org-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
                repository_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response when repository was removed from the selected list */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict when visibility type not set to selected */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "activity/list-public-org-events": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "orgs/list-webhooks": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-hook"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/create-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "web",
                 *       "active": true,
                 *       "events": [
                 *         "push",
                 *         "pull_request"
                 *       ],
                 *       "config": {
                 *         "url": "http://example.com/webhook",
                 *         "content_type": "json"
                 *       }
                 *     } */
                "application/json": {
                    /** @description Must be passed as "web". */
                    name: string;
                    /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#create-hook-config-params). */
                    config: {
                        url: components["schemas"]["webhook-config-url"];
                        content_type?: components["schemas"]["webhook-config-content-type"];
                        secret?: components["schemas"]["webhook-config-secret"];
                        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                        username?: string;
                        password?: string;
                    };
                    /**
                     * @description Determines what [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) the hook is triggered for.
                     * @default [
                     *       "push"
                     *     ]
                     */
                    events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/orgs/octocat/hooks/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-hook"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/get-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-hook"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/delete-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/update-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "active": true,
                 *       "events": [
                 *         "pull_request"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#update-hook-config-params). */
                    config?: {
                        url: components["schemas"]["webhook-config-url"];
                        content_type?: components["schemas"]["webhook-config-content-type"];
                        secret?: components["schemas"]["webhook-config-secret"];
                        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                    };
                    /**
                     * @description Determines what [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) the hook is triggered for.
                     * @default [
                     *       "push"
                     *     ]
                     */
                    events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                    name?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-hook"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/get-webhook-config-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "orgs/update-webhook-config-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    url?: components["schemas"]["webhook-config-url"];
                    content_type?: components["schemas"]["webhook-config-content-type"];
                    secret?: components["schemas"]["webhook-config-secret"];
                    insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "orgs/ping-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/get-org-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
        };
    };
    "orgs/list-app-installations": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
        };
    };
    "issues/list-for-org": {
        parameters: {
            query?: {
                /** @description Indicates which sorts of issues to return. Can be one of:
                 *     \* `assigned`: Issues assigned to you
                 *     \* `created`: Issues created by you
                 *     \* `mentioned`: Issues mentioning you
                 *     \* `subscribed`: Issues you're subscribed to updates for
                 *     \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation */
                filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
                /** @description Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description A list of comma separated label names. Example: `bug,ui,@high` */
                labels?: components["parameters"]["labels"];
                /** @description What to sort results by. Can be either `created`, `updated`, `comments`. */
                sort?: "created" | "updated" | "comments";
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/list-members": {
        parameters: {
            query?: {
                /** @description Filter members returned in the list. Can be one of:
                 *     \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
                 *     \* `all` - All members the authenticated user can see. */
                filter?: "2fa_disabled" | "all";
                /** @description Filter members returned by their role. Can be one of:
                 *     \* `all` - All members of the organization, regardless of role.
                 *     \* `admin` - Organization owners.
                 *     \* `member` - Non-owner organization members. */
                role?: "all" | "admin" | "member";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            /** @description Response if requester is not an organization member */
            302: {
                headers: {
                    /** @example https://api.github.com/orgs/github/public_members */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/check-membership-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if requester is an organization member and user is a member */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Response if requester is not an organization member */
            302: {
                headers: {
                    /** @example https://api.github.com/orgs/github/public_members/pezra */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if requester is an organization member and user is not a member */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "orgs/remove-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
        };
    };
    "orgs/get-membership-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-membership"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "orgs/set-membership-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The role to give the user in the organization. Can be one of:
                     *     \* `admin` - The user will become an owner of the organization.
                     *     \* `member` - The user will become a non-owner member of the organization.
                     * @default member
                     * @enum {string}
                     */
                    role?: "admin" | "member";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-membership"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/remove-membership-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "orgs/list-outside-collaborators": {
        parameters: {
            query?: {
                /** @description Filter the list of outside collaborators. Can be one of:
                 *     \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
                 *     \* `all`: All outside collaborators. */
                filter?: "2fa_disabled" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "orgs/convert-member-to-outside-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User is getting converted asynchronously */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description User was converted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden if user is the last owner of the organization or not a member of the organization */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "orgs/remove-outside-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity if user is a member of the organization */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-hooks-for-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description The sort order for the response collection. */
                sort?: "created" | "updated" | "name";
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/remove-pre-receive-hook-enforcement-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook-enforcement-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "enforcement": "enabled",
                 *       "allow_downstream_configuration": false
                 *     } */
                "application/json": {
                    /** @description The state of enforcement for the hook on this repository. */
                    enforcement?: string;
                    /** @description Whether repositories can override enforcement. */
                    allow_downstream_configuration?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-pre-receive-hook"];
                };
            };
        };
    };
    "projects/list-for-org": {
        parameters: {
            query?: {
                /** @description Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"][];
                };
            };
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "projects/create-for-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Organization Roadmap",
                 *       "body": "High-level roadmap for the upcoming year."
                 *     } */
                "application/json": {
                    /** @description The name of the project. */
                    name: string;
                    /** @description The description of the project. */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "orgs/list-public-members": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "orgs/check-public-membership-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if user is a public member */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if user is not a public member */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "orgs/set-public-membership-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
        };
    };
    "orgs/remove-public-membership-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/list-for-org": {
        parameters: {
            query?: {
                /** @description Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token. */
                type?: "all" | "public" | "private" | "forks" | "sources" | "member" | "internal";
                /** @description Can be one of `created`, `updated`, `pushed`, `full_name`. */
                sort?: "created" | "updated" | "pushed" | "full_name";
                /** @description Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */
                direction?: "asc" | "desc";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
        };
    };
    "repos/create-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Hello-World",
                 *       "description": "This is your first repository",
                 *       "homepage": "https://github.com",
                 *       "private": false,
                 *       "has_issues": true,
                 *       "has_projects": true,
                 *       "has_wiki": true
                 *     } */
                "application/json": {
                    /** @description The name of the repository. */
                    name: string;
                    /** @description A short description of the repository. */
                    description?: string;
                    /** @description A URL with more information about the repository. */
                    homepage?: string;
                    /**
                     * @description Whether the repository is private.
                     * @default false
                     */
                    private?: boolean;
                    /**
                     * @description Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
                     *     The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
                     * @enum {string}
                     */
                    visibility?: "public" | "private" | "internal";
                    /**
                     * @description Either `true` to enable issues for this repository or `false` to disable them.
                     * @default true
                     */
                    has_issues?: boolean;
                    /**
                     * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                     * @default true
                     */
                    has_projects?: boolean;
                    /**
                     * @description Either `true` to enable the wiki for this repository or `false` to disable it.
                     * @default true
                     */
                    has_wiki?: boolean;
                    /**
                     * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
                     * @default false
                     */
                    is_template?: boolean;
                    /** @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
                    team_id?: number;
                    /**
                     * @description Pass `true` to create an initial commit with empty README.
                     * @default false
                     */
                    auto_init?: boolean;
                    /** @description Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
                    gitignore_template?: string;
                    /** @description Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
                    license_template?: string;
                    /**
                     * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                     * @default true
                     */
                    allow_squash_merge?: boolean;
                    /**
                     * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                     * @default true
                     */
                    allow_merge_commit?: boolean;
                    /**
                     * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                     * @default true
                     */
                    allow_rebase_merge?: boolean;
                    /**
                     * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
                     * @default false
                     */
                    delete_branch_on_merge?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/list": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            403: components["responses"]["forbidden"];
        };
    };
    "teams/create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Justice League",
                 *       "description": "A great team",
                 *       "permission": "push",
                 *       "privacy": "closed"
                 *     } */
                "application/json": {
                    /** @description The name of the team. */
                    name: string;
                    /** @description The description of the team. */
                    description?: string;
                    /** @description List GitHub IDs for organization members who will become team maintainers. */
                    maintainers?: string[];
                    /** @description The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
                    repo_names?: string[];
                    /**
                     * @description The level of privacy this team should have. The options are:
                     *     **For a non-nested team:**
                     *     \* `secret` - only visible to organization owners and members of this team.
                     *     \* `closed` - visible to all members of this organization.
                     *     Default: `secret`
                     *     **For a parent or child team:**
                     *     \* `closed` - visible to all members of this organization.
                     *     Default for child team: `closed`
                     * @enum {string}
                     */
                    privacy?: "secret" | "closed";
                    /**
                     * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
                     *     \* `pull` - team members can pull, but not push to or administer newly-added repositories.
                     *     \* `push` - team members can pull and push, but not administer newly-added repositories.
                     * @default pull
                     * @enum {string}
                     */
                    permission?: "pull" | "push";
                    /** @description The ID of a team to set as the parent team. */
                    parent_team_id?: number;
                    /** @description The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.0/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)." */
                    ldap_dn?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/get-by-name": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/delete-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/update-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "new team name",
                 *       "description": "new team description",
                 *       "privacy": "closed"
                 *     } */
                "application/json": {
                    /** @description The name of the team. */
                    name?: string;
                    /** @description The description of the team. */
                    description?: string;
                    /**
                     * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
                     *     **For a non-nested team:**
                     *     \* `secret` - only visible to organization owners and members of this team.
                     *     \* `closed` - visible to all members of this organization.
                     *     **For a parent or child team:**
                     *     \* `closed` - visible to all members of this organization.
                     * @enum {string}
                     */
                    privacy?: "secret" | "closed";
                    /**
                     * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
                     *     \* `pull` - team members can pull, but not push to or administer newly-added repositories.
                     *     \* `push` - team members can pull and push, but not administer newly-added repositories.
                     *     \* `admin` - team members can pull, push and administer newly-added repositories.
                     * @default pull
                     * @enum {string}
                     */
                    permission?: "pull" | "push" | "admin";
                    /** @description The ID of a team to set as the parent team. */
                    parent_team_id?: number | null;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
        };
    };
    "teams/list-discussions-in-org": {
        parameters: {
            query?: {
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Pinned discussions only filter */
                pinned?: string;
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"][];
                };
            };
        };
    };
    "teams/create-discussion-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Our first team post",
                 *       "body": "Hi! This is an area for us to collaborate as a team."
                 *     } */
                "application/json": {
                    /** @description The discussion post's title. */
                    title: string;
                    /** @description The discussion post's body text. */
                    body: string;
                    /**
                     * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                     * @default false
                     */
                    private?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/get-discussion-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/delete-discussion-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/update-discussion-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "title": "Welcome to our first team post"
                 *     } */
                "application/json": {
                    /** @description The discussion post's title. */
                    title?: string;
                    /** @description The discussion post's body text. */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/list-discussion-comments-in-org": {
        parameters: {
            query?: {
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"][];
                };
            };
        };
    };
    "teams/create-discussion-comment-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Do you like apples?"
                 *     } */
                "application/json": {
                    /** @description The discussion comment's body text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "teams/get-discussion-comment-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "teams/delete-discussion-comment-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/update-discussion-comment-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Do you like pineapples?"
                 *     } */
                "application/json": {
                    /** @description The discussion comment's body text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "reactions/list-for-team-discussion-comment-in-org": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
        };
    };
    "reactions/create-for-team-discussion-comment-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion comment.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
        };
    };
    "reactions/delete-for-team-discussion-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "reactions/list-for-team-discussion-in-org": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
        };
    };
    "reactions/create-for-team-discussion-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
        };
    };
    "reactions/delete-for-team-discussion": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                discussion_number: components["parameters"]["discussion-number"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-members-in-org": {
        parameters: {
            query?: {
                /** @description Filters members returned by their role in the team. Can be one of:
                 *     \* `member` - normal members of the team.
                 *     \* `maintainer` - team maintainers.
                 *     \* `all` - all members of the team. */
                role?: "member" | "maintainer" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "teams/get-membership-for-user-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-membership"];
                };
            };
            /** @description if user has no team membership */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-or-update-membership-for-user-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The role that this user should have in the team. Can be one of:
                     *     \* `member` - a normal member of the team.
                     *     \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
                     * @default member
                     * @enum {string}
                     */
                    role?: "member" | "maintainer";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-membership"];
                };
            };
            /** @description Forbidden if team synchronization is set up */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity if you attempt to add an organization to a team */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/remove-membership-for-user-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden if team synchronization is set up */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-projects-in-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-project"][];
                };
            };
        };
    };
    "teams/check-permissions-for-project-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-project"];
                };
            };
            /** @description Not Found if project is not managed by this team */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-or-update-project-permissions-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant to the team for this project. Can be one of:
                     *     \* `read` - team members can read, but not write to or administer this project.
                     *     \* `write` - team members can read and write, but not administer this project.
                     *     \* `admin` - team members can read, write and administer this project.
                     *     Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
                     * @enum {string}
                     */
                    permission?: "read" | "write" | "admin";
                } | null;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden if the project is not owned by the organization */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
        };
    };
    "teams/remove-project-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-repos-in-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
        };
    };
    "teams/check-permissions-for-repo-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alternative response with repository permissions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-repository"];
                };
            };
            /** @description Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if team does not have permission for the repository */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-or-update-repo-permissions-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant the team on this repository. Can be one of:
                     *     \* `pull` - team members can pull, but not push to or administer this repository.
                     *     \* `push` - team members can pull and push, but not administer this repository.
                     *     \* `admin` - team members can pull, push and administer this repository.
                     *     \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
                     *     \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
                     *
                     *     If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                     * @default push
                     * @enum {string}
                     */
                    permission?: "pull" | "push" | "admin" | "maintain" | "triage";
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/remove-repo-in-org": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-child-in-org": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                org: components["parameters"]["org"];
                /** @description team_slug parameter */
                team_slug: components["parameters"]["team-slug"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if child teams exist */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
        };
    };
    "projects/get-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description card_id parameter */
                card_id: components["parameters"]["card-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-card"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "projects/delete-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description card_id parameter */
                card_id: components["parameters"]["card-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                        errors?: string[];
                    };
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "projects/update-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description card_id parameter */
                card_id: components["parameters"]["card-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The project card's note */
                    note?: string | null;
                    /** @description Whether or not the card is archived */
                    archived?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-card"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "projects/move-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description card_id parameter */
                card_id: components["parameters"]["card-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card. */
                    position: string;
                    /** @description The unique identifier of the column the card should be moved to */
                    column_id?: number;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                        errors?: {
                            code?: string;
                            message?: string;
                            resource?: string;
                            field?: string;
                        }[];
                    };
                };
            };
            422: components["responses"]["validation_failed"];
            /** @description Response */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: string;
                        message?: string;
                        documentation_url?: string;
                        errors?: {
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "projects/get-column": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-column"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "projects/delete-column": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/update-column": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the project column */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-column"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/list-cards": {
        parameters: {
            query?: {
                /** @description Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`. */
                archived_state?: "all" | "archived" | "not_archived";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-card"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/create-card": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The project card's note */
                    note: string | null;
                } | {
                    /** @description The unique identifier of the content associated with the card */
                    content_id: number;
                    /** @description The piece of content associated with the card */
                    content_type: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-card"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["validation-error"] | components["schemas"]["validation-error-simple"];
                };
            };
            /** @description Response */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        code?: string;
                        message?: string;
                        documentation_url?: string;
                        errors?: {
                            code?: string;
                            message?: string;
                        }[];
                    };
                };
            };
        };
    };
    "projects/move-column": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description column_id parameter */
                column_id: components["parameters"]["column-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column. */
                    position: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "projects/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Delete Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                        errors?: string[];
                    };
                };
            };
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "projects/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Name of the project */
                    name?: string;
                    /** @description Body of the project */
                    body?: string | null;
                    /** @description State of the project; either 'open' or 'closed' */
                    state?: string;
                    /**
                     * @description The baseline permission that all organization members have on this project
                     * @enum {string}
                     */
                    organization_permission?: "read" | "write" | "admin" | "none";
                    /** @description Whether or not this project can be seen by everyone. */
                    private?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                        errors?: string[];
                    };
                };
            };
            /** @description Not Found if the authenticated user does not have access to the project */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "projects/list-collaborators": {
        parameters: {
            query?: {
                /** @description Filters the collaborators by their affiliation. Can be one of:
                 *     \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
                 *     \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
                 *     \* `all`: All collaborators the authenticated user can see. */
                affiliation?: "outside" | "direct" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "projects/add-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant the collaborator.
                     * @default write
                     * @enum {string}
                     */
                    permission?: "read" | "write" | "admin";
                } | null;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "projects/remove-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "projects/get-permission-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-collaborator-permission"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "projects/list-columns": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-column"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/create-column": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the project column */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project-column"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "rate-limit/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    "X-RateLimit-Limit": components["headers"]["x-rate-limit-limit"];
                    "X-RateLimit-Remaining": components["headers"]["x-rate-limit-remaining"];
                    "X-RateLimit-Reset": components["headers"]["x-rate-limit-reset"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rate-limit-overview"];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
        };
    };
    "reactions/delete-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            410: components["responses"]["gone"];
        };
    };
    "repos/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["full-repository"];
                };
            };
            301: components["responses"]["moved_permanently"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            307: components["responses"]["temporary_redirect"];
            /** @description If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Hello-World",
                 *       "description": "This is your first repository",
                 *       "homepage": "https://github.com",
                 *       "private": true,
                 *       "has_issues": true,
                 *       "has_projects": true,
                 *       "has_wiki": true
                 *     } */
                "application/json": {
                    /** @description The name of the repository. */
                    name?: string;
                    /** @description A short description of the repository. */
                    description?: string;
                    /** @description A URL with more information about the repository. */
                    homepage?: string;
                    /**
                     * @description Either `true` to make the repository private or `false` to make it public. Default: `false`.
                     *     **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
                     * @default false
                     */
                    private?: boolean;
                    /**
                     * @description Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
                     * @enum {string}
                     */
                    visibility?: "public" | "private" | "internal";
                    /**
                     * @description Either `true` to enable issues for this repository or `false` to disable them.
                     * @default true
                     */
                    has_issues?: boolean;
                    /**
                     * @description Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
                     * @default true
                     */
                    has_projects?: boolean;
                    /**
                     * @description Either `true` to enable the wiki for this repository or `false` to disable it.
                     * @default true
                     */
                    has_wiki?: boolean;
                    /**
                     * @description Either `true` to make this repo available as a template repository or `false` to prevent it.
                     * @default false
                     */
                    is_template?: boolean;
                    /** @description Updates the default branch for this repository. */
                    default_branch?: string;
                    /**
                     * @description Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
                     * @default true
                     */
                    allow_squash_merge?: boolean;
                    /**
                     * @description Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
                     * @default true
                     */
                    allow_merge_commit?: boolean;
                    /**
                     * @description Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
                     * @default true
                     */
                    allow_rebase_merge?: boolean;
                    /**
                     * @description Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
                     * @default false
                     */
                    delete_branch_on_merge?: boolean;
                    /**
                     * @description `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
                     * @default false
                     */
                    archived?: boolean;
                    /**
                     * @description Either `true` to allow private forks, or `false` to prevent private forks.
                     * @default false
                     */
                    allow_forking?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["full-repository"];
                };
            };
            307: components["responses"]["temporary_redirect"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "actions/list-artifacts-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        artifacts: components["schemas"]["artifact"][];
                    };
                };
            };
        };
    };
    "actions/get-artifact": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description artifact_id parameter */
                artifact_id: components["parameters"]["artifact-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["artifact"];
                };
            };
        };
    };
    "actions/delete-artifact": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description artifact_id parameter */
                artifact_id: components["parameters"]["artifact-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/download-artifact": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description artifact_id parameter */
                artifact_id: components["parameters"]["artifact-id"];
                archive_format: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            302: {
                headers: {
                    Location: components["headers"]["location"];
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/get-job-for-workflow-run": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description job_id parameter */
                job_id: components["parameters"]["job-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["job"];
                };
            };
        };
    };
    "actions/download-job-logs-for-workflow-run": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description job_id parameter */
                job_id: components["parameters"]["job-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            302: {
                headers: {
                    /** @example https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/jobs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/get-github-actions-permissions-repository": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-repository-permissions"];
                };
            };
        };
    };
    "actions/set-github-actions-permissions-repository": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "enabled": true,
                 *       "allowed_actions": "selected"
                 *     } */
                "application/json": {
                    enabled: components["schemas"]["actions-enabled"];
                    allowed_actions?: components["schemas"]["allowed-actions"];
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/get-allowed-actions-repository": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["selected-actions"];
                };
            };
        };
    };
    "actions/set-allowed-actions-repository": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["selected-actions"];
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-self-hosted-runners-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        runners: components["schemas"]["runner"][];
                    };
                };
            };
        };
    };
    "actions/list-runner-applications-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner-application"][];
                };
            };
        };
    };
    "actions/create-registration-token-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "actions/create-remove-token-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authentication-token"];
                };
            };
        };
    };
    "actions/get-self-hosted-runner-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["runner"];
                };
            };
        };
    };
    "actions/delete-self-hosted-runner-from-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description Unique identifier of the self-hosted runner. */
                runner_id: components["parameters"]["runner-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-workflow-runs-for-repo": {
        parameters: {
            query?: {
                /** @description Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
                actor?: components["parameters"]["actor"];
                /** @description Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
                branch?: components["parameters"]["workflow-run-branch"];
                /** @description Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
                event?: components["parameters"]["event"];
                /** @description Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run)." */
                status?: components["parameters"]["workflow-run-status"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.0/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
                created?: components["parameters"]["created"];
                /** @description If `true` pull requests are omitted from the response (empty array). */
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        workflow_runs: components["schemas"]["workflow-run"][];
                    };
                };
            };
        };
    };
    "actions/get-workflow-run": {
        parameters: {
            query?: {
                /** @description If `true` pull requests are omitted from the response (empty array). */
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["workflow-run"];
                };
            };
        };
    };
    "actions/delete-workflow-run": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-workflow-run-artifacts": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        artifacts: components["schemas"]["artifact"][];
                    };
                };
            };
        };
    };
    "actions/cancel-workflow-run": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "actions/list-jobs-for-workflow-run": {
        parameters: {
            query?: {
                /** @description Filters jobs by their `completed_at` timestamp. Can be one of:
                 *     \* `latest`: Returns jobs from the most recent execution of the workflow run.
                 *     \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run. */
                filter?: "latest" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        jobs: components["schemas"]["job"][];
                    };
                };
            };
        };
    };
    "actions/download-workflow-run-logs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            302: {
                headers: {
                    /** @example https://pipelines.actions.githubusercontent.com/ab1f3cCFPB34Nd6imvFxpGZH5hNlDp2wijMwl2gDoO0bcrrlJj/_apis/pipelines/1/runs/19/signedlogcontent?urlExpires=2020-01-22T22%3A44%3A54.1389777Z&urlSigningMethod=HMACV1&urlSignature=2TUDfIg4fm36OJmfPy6km5QD5DLCOkBVzvhWZM8B%2BUY%3D */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/delete-workflow-run-logs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            500: components["responses"]["internal_error"];
        };
    };
    "actions/re-run-workflow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The id of the workflow run. */
                run_id: components["parameters"]["run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "actions/list-repo-secrets": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        secrets: components["schemas"]["actions-secret"][];
                    };
                };
            };
        };
    };
    "actions/get-repo-public-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-public-key"];
                };
            };
        };
    };
    "actions/get-repo-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["actions-secret"];
                };
            };
        };
    };
    "actions/create-or-update-repo-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "encrypted_value": "c2VjcmV0",
                 *       "key_id": "012345678912345678"
                 *     } */
                "application/json": {
                    /** @description Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-repository-public-key) endpoint. */
                    encrypted_value?: string;
                    /** @description ID of the key you used to encrypt the secret. */
                    key_id?: string;
                };
            };
        };
        responses: {
            /** @description Response when creating a secret */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Response when updating a secret */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/delete-repo-secret": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description secret_name parameter */
                secret_name: components["parameters"]["secret-name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-repo-workflows": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        workflows: components["schemas"]["workflow"][];
                    };
                };
            };
        };
    };
    "actions/get-workflow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
                workflow_id: components["parameters"]["workflow-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["workflow"];
                };
            };
        };
    };
    "actions/disable-workflow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
                workflow_id: components["parameters"]["workflow-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/create-workflow-dispatch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
                workflow_id: components["parameters"]["workflow-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ref": "topic-branch",
                 *       "inputs": {
                 *         "name": "Mona the Octocat",
                 *         "home": "San Francisco, CA"
                 *       }
                 *     } */
                "application/json": {
                    /** @description The git reference for the workflow. The reference can be a branch or tag name. */
                    ref: string;
                    /** @description Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
                    inputs?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/enable-workflow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
                workflow_id: components["parameters"]["workflow-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "actions/list-workflow-runs": {
        parameters: {
            query?: {
                /** @description Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
                actor?: components["parameters"]["actor"];
                /** @description Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
                branch?: components["parameters"]["workflow-run-branch"];
                /** @description Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
                event?: components["parameters"]["event"];
                /** @description Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run)." */
                status?: components["parameters"]["workflow-run-status"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.0/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
                created?: components["parameters"]["created"];
                /** @description If `true` pull requests are omitted from the response (empty array). */
                exclude_pull_requests?: components["parameters"]["exclude-pull-requests"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The ID of the workflow. You can also pass the workflow file name as a string. */
                workflow_id: components["parameters"]["workflow-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        workflow_runs: components["schemas"]["workflow-run"][];
                    };
                };
            };
        };
    };
    "issues/list-assignees": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/check-user-can-be-assigned": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                assignee: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Otherwise a `404` status code is returned. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["basic-error"];
                };
            };
        };
    };
    "repos/list-branches": {
        parameters: {
            query?: {
                /** @description Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
                protected?: boolean;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["short-branch"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["branch-with-protection"];
                };
            };
            301: components["responses"]["moved_permanently"];
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "repos/get-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["branch-protection"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "required_status_checks": {
                 *         "strict": true,
                 *         "contexts": [
                 *           "continuous-integration/travis-ci"
                 *         ]
                 *       },
                 *       "enforce_admins": true,
                 *       "required_pull_request_reviews": {
                 *         "dismissal_restrictions": {
                 *           "users": [
                 *             "octocat"
                 *           ],
                 *           "teams": [
                 *             "justice-league"
                 *           ]
                 *         },
                 *         "dismiss_stale_reviews": true,
                 *         "require_code_owner_reviews": true,
                 *         "required_approving_review_count": 2,
                 *         "bypass_pull_request_allowances": {
                 *           "users": [
                 *             "octocat"
                 *           ],
                 *           "teams": [
                 *             "justice-league"
                 *           ]
                 *         }
                 *       },
                 *       "restrictions": {
                 *         "users": [
                 *           "octocat"
                 *         ],
                 *         "teams": [
                 *           "justice-league"
                 *         ],
                 *         "apps": [
                 *           "super-ci"
                 *         ]
                 *       },
                 *       "required_linear_history": true,
                 *       "allow_force_pushes": true,
                 *       "allow_deletions": true,
                 *       "required_conversation_resolution": true
                 *     } */
                "application/json": {
                    /** @description Require status checks to pass before merging. Set to `null` to disable. */
                    required_status_checks: {
                        /** @description Require branches to be up to date before merging. */
                        strict: boolean;
                        /**
                         * @deprecated
                         * @description **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
                         *
                         */
                        contexts: string[];
                        /** @description The list of status checks to require in order to merge into this branch. */
                        checks?: {
                            /** @description The name of the required check */
                            context: string;
                            /** @description The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
                            app_id?: number;
                        }[];
                    } | null;
                    /** @description Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
                    enforce_admins: boolean | null;
                    /** @description Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
                    required_pull_request_reviews: {
                        /** @description Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
                        dismissal_restrictions?: {
                            /** @description The list of user `login`s with dismissal access */
                            users?: string[];
                            /** @description The list of team `slug`s with dismissal access */
                            teams?: string[];
                        };
                        /** @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
                        dismiss_stale_reviews?: boolean;
                        /** @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
                        require_code_owner_reviews?: boolean;
                        /** @description Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
                        required_approving_review_count?: number;
                    } | null;
                    /** @description Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
                    restrictions: {
                        /** @description The list of user `login`s with push access */
                        users: string[];
                        /** @description The list of team `slug`s with push access */
                        teams: string[];
                        /** @description The list of app `slug`s with push access */
                        apps?: string[];
                    } | null;
                    /** @description Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
                    required_linear_history?: boolean;
                    /** @description Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
                    allow_force_pushes?: boolean | null;
                    /** @description Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
                    allow_deletions?: boolean;
                    /** @description Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
                    required_conversation_resolution?: boolean;
                    /** @description The list of status checks to require in order to merge into this branch. */
                    contexts?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "repos/delete-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
        };
    };
    "repos/get-admin-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-admin-enforced"];
                };
            };
        };
    };
    "repos/set-admin-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-admin-enforced"];
                };
            };
        };
    };
    "repos/delete-admin-branch-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-pull-request-review-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-pull-request-review"];
                };
            };
        };
    };
    "repos/delete-pull-request-review-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-pull-request-review-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "dismissal_restrictions": {
                 *         "users": [
                 *           "octocat"
                 *         ],
                 *         "teams": [
                 *           "justice-league"
                 *         ]
                 *       },
                 *       "bypass_pull_request_allowances": {
                 *         "users": [
                 *           "octocat"
                 *         ],
                 *         "teams": [
                 *           "justice-league"
                 *         ]
                 *       },
                 *       "dismiss_stale_reviews": true,
                 *       "require_code_owner_reviews": true,
                 *       "required_approving_review_count": 2
                 *     } */
                "application/json": {
                    /** @description Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
                    dismissal_restrictions?: {
                        /** @description The list of user `login`s with dismissal access */
                        users?: string[];
                        /** @description The list of team `slug`s with dismissal access */
                        teams?: string[];
                    };
                    /** @description Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
                    dismiss_stale_reviews?: boolean;
                    /** @description Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
                    require_code_owner_reviews?: boolean;
                    /** @description Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
                    required_approving_review_count?: number;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-pull-request-review"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-commit-signature-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-admin-enforced"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-commit-signature-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["protected-branch-admin-enforced"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-commit-signature-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-status-checks-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status-check-policy"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/remove-status-check-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/update-status-check-protection": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "strict": true,
                 *       "contexts": [
                 *         "continuous-integration/travis-ci"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Require branches to be up to date before merging. */
                    strict?: boolean;
                    /**
                     * @deprecated
                     * @description The list of status checks to require in order to merge into this branch
                     */
                    contexts?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status-check-policy"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-all-status-check-contexts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/set-status-check-contexts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description contexts parameter */
                    contexts: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/add-status-check-contexts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description contexts parameter */
                    contexts: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/remove-status-check-contexts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description contexts parameter */
                    contexts: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["branch-restriction-policy"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/get-apps-with-access-to-protected-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/set-app-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description apps parameter */
                    apps: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/add-app-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description apps parameter */
                    apps: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/remove-app-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description apps parameter */
                    apps: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["integration"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-teams-with-access-to-protected-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/set-team-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description teams parameter */
                    teams: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/add-team-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description teams parameter */
                    teams: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/remove-team-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description teams parameter */
                    teams: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-users-with-access-to-protected-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/set-user-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description users parameter */
                    users: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/add-user-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description users parameter */
                    users: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/remove-user-access-restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The name of the branch. */
                branch: components["parameters"]["branch"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description users parameter */
                    users: string[];
                } | string[];
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "checks/create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the check. For example, "code-coverage". */
                    name: string;
                    /** @description The SHA of the commit. */
                    head_sha: string;
                    /** @description The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
                    details_url?: string;
                    /** @description A reference for the run on the integrator's system. */
                    external_id?: string;
                    /**
                     * @description The current status. Can be one of `queued`, `in_progress`, or `completed`.
                     * @default queued
                     * @enum {string}
                     */
                    status?: "queued" | "in_progress" | "completed";
                    /**
                     * Format: date-time
                     * @description The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    started_at?: string;
                    /**
                     * @description **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
                     *     **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
                     * @enum {string}
                     */
                    conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
                    /**
                     * Format: date-time
                     * @description The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    completed_at?: string;
                    /** @description Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object) description. */
                    output?: {
                        /** @description The title of the check run. */
                        title: string;
                        /** @description The summary of the check run. This parameter supports Markdown. */
                        summary: string;
                        /** @description The details of the check run. This parameter supports Markdown. */
                        text?: string;
                        /** @description Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#annotations-object) description for details about how to use this parameter. */
                        annotations?: {
                            /** @description The path of the file to add an annotation to. For example, `assets/css/main.css`. */
                            path: string;
                            /** @description The start line of the annotation. */
                            start_line: number;
                            /** @description The end line of the annotation. */
                            end_line: number;
                            /** @description The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
                            start_column?: number;
                            /** @description The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
                            end_column?: number;
                            /**
                             * @description The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                             * @enum {string}
                             */
                            annotation_level: "notice" | "warning" | "failure";
                            /** @description A short description of the feedback for these lines of code. The maximum size is 64 KB. */
                            message: string;
                            /** @description The title that represents the annotation. The maximum size is 255 characters. */
                            title?: string;
                            /** @description Details about this annotation. The maximum size is 64 KB. */
                            raw_details?: string;
                        }[];
                        /** @description Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#images-object) description for details. */
                        images?: {
                            /** @description The alternative text for the image. */
                            alt: string;
                            /** @description The full URL of the image. */
                            image_url: string;
                            /** @description A short image description. */
                            caption?: string;
                        }[];
                    };
                    /** @description Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs-and-requested-actions)." */
                    actions?: {
                        /** @description The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
                        label: string;
                        /** @description A short explanation of what this action would do. The maximum size is 40 characters. */
                        description: string;
                        /** @description A reference for the action on the integrator's system. The maximum size is 20 characters. */
                        identifier: string;
                    }[];
                } & (({
                    /** @enum {unknown} */
                    status: "completed";
                } & {
                    [key: string]: unknown;
                }) | ({
                    /** @enum {unknown} */
                    status?: "queued" | "in_progress";
                } & {
                    [key: string]: unknown;
                }));
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-run"];
                };
            };
        };
    };
    "checks/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_run_id parameter */
                check_run_id: components["parameters"]["check-run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-run"];
                };
            };
        };
    };
    "checks/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_run_id parameter */
                check_run_id: components["parameters"]["check-run-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "mighty_readme",
                 *       "started_at": "2018-05-04T01:14:52Z",
                 *       "status": "completed",
                 *       "conclusion": "success",
                 *       "completed_at": "2018-05-04T01:14:52Z",
                 *       "output": {
                 *         "title": "Mighty Readme report",
                 *         "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                 *         "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                 *         "annotations": [
                 *           {
                 *             "path": "README.md",
                 *             "annotation_level": "warning",
                 *             "title": "Spell Checker",
                 *             "message": "Check your spelling for 'banaas'.",
                 *             "raw_details": "Do you mean 'bananas' or 'banana'?",
                 *             "start_line": 2,
                 *             "end_line": 2
                 *           },
                 *           {
                 *             "path": "README.md",
                 *             "annotation_level": "warning",
                 *             "title": "Spell Checker",
                 *             "message": "Check your spelling for 'aples'",
                 *             "raw_details": "Do you mean 'apples' or 'Naples'",
                 *             "start_line": 4,
                 *             "end_line": 4
                 *           }
                 *         ],
                 *         "images": [
                 *           {
                 *             "alt": "Super bananas",
                 *             "image_url": "http://example.com/images/42"
                 *           }
                 *         ]
                 *       }
                 *     } */
                "application/json": {
                    /** @description The name of the check. For example, "code-coverage". */
                    name?: string;
                    /** @description The URL of the integrator's site that has the full details of the check. */
                    details_url?: string;
                    /** @description A reference for the run on the integrator's system. */
                    external_id?: string;
                    /**
                     * Format: date-time
                     * @description This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    started_at?: string;
                    /**
                     * @description The current status. Can be one of `queued`, `in_progress`, or `completed`.
                     * @enum {string}
                     */
                    status?: "queued" | "in_progress" | "completed";
                    /**
                     * @description **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.
                     *     **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
                     * @enum {string}
                     */
                    conclusion?: "action_required" | "cancelled" | "failure" | "neutral" | "success" | "skipped" | "stale" | "timed_out";
                    /**
                     * Format: date-time
                     * @description The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    completed_at?: string;
                    /** @description Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object-1) description. */
                    output?: {
                        /** @description **Required**. */
                        title?: string;
                        /** @description Can contain Markdown. */
                        summary: string;
                        /** @description Can contain Markdown. */
                        text?: string;
                        /** @description Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#annotations-object-1) description for details. */
                        annotations?: {
                            /** @description The path of the file to add an annotation to. For example, `assets/css/main.css`. */
                            path: string;
                            /** @description The start line of the annotation. */
                            start_line: number;
                            /** @description The end line of the annotation. */
                            end_line: number;
                            /** @description The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
                            start_column?: number;
                            /** @description The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
                            end_column?: number;
                            /**
                             * @description The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
                             * @enum {string}
                             */
                            annotation_level: "notice" | "warning" | "failure";
                            /** @description A short description of the feedback for these lines of code. The maximum size is 64 KB. */
                            message: string;
                            /** @description The title that represents the annotation. The maximum size is 255 characters. */
                            title?: string;
                            /** @description Details about this annotation. The maximum size is 64 KB. */
                            raw_details?: string;
                        }[];
                        /** @description Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#annotations-object-1) description for details. */
                        images?: {
                            /** @description The alternative text for the image. */
                            alt: string;
                            /** @description The full URL of the image. */
                            image_url: string;
                            /** @description A short image description. */
                            caption?: string;
                        }[];
                    };
                    /** @description Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs-and-requested-actions)." */
                    actions?: {
                        /** @description The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
                        label: string;
                        /** @description A short explanation of what this action would do. The maximum size is 40 characters. */
                        description: string;
                        /** @description A reference for the action on the integrator's system. The maximum size is 20 characters. */
                        identifier: string;
                    }[];
                } | ({
                    /** @enum {unknown} */
                    status?: "completed";
                } & {
                    [key: string]: unknown;
                }) | ({
                    /** @enum {unknown} */
                    status?: "queued" | "in_progress";
                } & {
                    [key: string]: unknown;
                });
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-run"];
                };
            };
        };
    };
    "checks/list-annotations": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_run_id parameter */
                check_run_id: components["parameters"]["check-run-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-annotation"][];
                };
            };
        };
    };
    "checks/create-suite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
                 *     } */
                "application/json": {
                    /** @description The sha of the head commit. */
                    head_sha: string;
                };
            };
        };
        responses: {
            /** @description when the suite already existed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-suite"];
                };
            };
            /** @description Response when the suite was created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-suite"];
                };
            };
        };
    };
    "checks/set-suites-preferences": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "auto_trigger_checks": [
                 *         {
                 *           "app_id": 4,
                 *           "setting": false
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#auto_trigger_checks-object) description for details. */
                    auto_trigger_checks?: {
                        /** @description The `id` of the GitHub App. */
                        app_id: number;
                        /**
                         * @description Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
                         * @default true
                         */
                        setting: boolean;
                    }[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-suite-preference"];
                };
            };
        };
    };
    "checks/get-suite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_suite_id parameter */
                check_suite_id: components["parameters"]["check-suite-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["check-suite"];
                };
            };
        };
    };
    "checks/list-for-suite": {
        parameters: {
            query?: {
                /** @description Returns check runs with the specified `name`. */
                check_name?: components["parameters"]["check-name"];
                /** @description Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
                status?: components["parameters"]["status"];
                /** @description Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
                filter?: "latest" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_suite_id parameter */
                check_suite_id: components["parameters"]["check-suite-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        check_runs: components["schemas"]["check-run"][];
                    };
                };
            };
        };
    };
    "checks/rerequest-suite": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description check_suite_id parameter */
                check_suite_id: components["parameters"]["check-suite-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "code-scanning/list-alerts-for-repo": {
        parameters: {
            query?: {
                /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
                tool_name?: components["parameters"]["tool-name"];
                /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
                tool_guid?: components["parameters"]["tool-guid"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
                ref?: components["parameters"]["git-ref"];
                /** @description Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state. */
                state?: components["schemas"]["code-scanning-alert-state"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-scanning-alert-items"][];
                };
            };
            403: components["responses"]["code_scanning_forbidden_read"];
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "code-scanning/get-alert": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
                alert_number: components["parameters"]["alert-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-scanning-alert"];
                };
            };
            403: components["responses"]["code_scanning_forbidden_read"];
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "code-scanning/update-alert": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
                alert_number: components["parameters"]["alert-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "state": "dismissed",
                 *       "dismissed_reason": "false positive"
                 *     } */
                "application/json": {
                    state: components["schemas"]["code-scanning-alert-set-state"];
                    dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-scanning-alert"];
                };
            };
            403: components["responses"]["code_scanning_forbidden_write"];
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "code-scanning/list-recent-analyses": {
        parameters: {
            query?: {
                /** @description The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
                tool_name?: components["parameters"]["tool-name"];
                /** @description The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
                tool_guid?: components["parameters"]["tool-guid"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
                ref?: components["schemas"]["code-scanning-ref"];
                /** @description Filter analyses belonging to the same SARIF upload. */
                sarif_id?: components["schemas"]["code-scanning-analysis-sarif-id"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-scanning-analysis"][];
                };
            };
            403: components["responses"]["code_scanning_forbidden_read"];
            404: components["responses"]["not_found"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "code-scanning/upload-sarif": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
                    ref: components["schemas"]["code-scanning-ref"];
                    sarif: components["schemas"]["code-scanning-analysis-sarif-file"];
                    /**
                     * Format: uri
                     * @description The base directory used in the analysis, as it appears in the SARIF file.
                     *     This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
                     */
                    checkout_uri?: string;
                    /**
                     * Format: date-time
                     * @description The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    started_at?: string;
                    /** @description The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
                    tool_name?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-scanning-sarifs-receipt"];
                };
            };
            /** @description Bad Request if the sarif field is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["code_scanning_forbidden_write"];
            404: components["responses"]["not_found"];
            /** @description Payload Too Large if the sarif field is too large */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            503: components["responses"]["service_unavailable"];
        };
    };
    "repos/list-collaborators": {
        parameters: {
            query?: {
                /** @description Filter collaborators returned by their affiliation. Can be one of:
                 *     \* `outside`: All outside collaborators of an organization-owned repository.
                 *     \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
                 *     \* `all`: All collaborators the authenticated user can see. */
                affiliation?: "outside" | "direct" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["collaborator"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/check-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if user is a collaborator */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if user is not a collaborator */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/add-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
                     *     \* `pull` - can pull, but not push to or administer this repository.
                     *     \* `push` - can pull and push, but not administer this repository.
                     *     \* `admin` - can pull, push and administer this repository.
                     *     \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
                     *     \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
                     * @default push
                     * @enum {string}
                     */
                    permission?: "pull" | "push" | "admin" | "maintain" | "triage";
                    permissions?: string;
                };
            };
        };
        responses: {
            /** @description Response when a new invitation is created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-invitation"];
                };
            };
            /** @description Response when person is already a collaborator */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/remove-collaborator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/get-collaborator-permission-level": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if user has admin permissions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-collaborator-permission"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-commit-comments-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comment"][];
                };
            };
        };
    };
    "repos/get-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Nice change"
                 *     } */
                "application/json": {
                    /** @description The contents of the comment */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "reactions/list-for-commit-comment": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "reactions/create-for-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the commit comment.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Reaction exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Reaction created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed"];
        };
    };
    "reactions/delete-for-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/list-commits": {
        parameters: {
            query?: {
                /** @description SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */
                sha?: string;
                /** @description Only commits containing this file path will be returned. */
                path?: string;
                /** @description GitHub login or email address by which to filter by commit author. */
                author?: string;
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                until?: string;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit"][];
                };
            };
            400: components["responses"]["bad_request"];
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
            500: components["responses"]["internal_error"];
        };
    };
    "repos/list-branches-for-head-commit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description commit_sha parameter */
                commit_sha: components["parameters"]["commit-sha"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["branch-short"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-comments-for-commit": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description commit_sha parameter */
                commit_sha: components["parameters"]["commit-sha"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comment"][];
                };
            };
        };
    };
    "repos/create-commit-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description commit_sha parameter */
                commit_sha: components["parameters"]["commit-sha"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Great stuff",
                 *       "path": "file1.txt",
                 *       "position": 4,
                 *       "line": 1
                 *     } */
                "application/json": {
                    /** @description The contents of the comment. */
                    body: string;
                    /** @description Relative path of the file to comment on. */
                    path?: string;
                    /** @description Line index in the diff to comment on. */
                    position?: number;
                    /** @description **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
                    line?: number;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/comments/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comment"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-pull-requests-associated-with-commit": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description commit_sha parameter */
                commit_sha: components["parameters"]["commit-sha"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-simple"][];
                };
            };
        };
    };
    "repos/get-commit": {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
            500: components["responses"]["internal_error"];
        };
    };
    "checks/list-for-ref": {
        parameters: {
            query?: {
                /** @description Returns check runs with the specified `name`. */
                check_name?: components["parameters"]["check-name"];
                /** @description Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
                status?: components["parameters"]["status"];
                /** @description Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
                filter?: "latest" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                app_id?: number;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        check_runs: components["schemas"]["check-run"][];
                    };
                };
            };
        };
    };
    "checks/list-suites-for-ref": {
        parameters: {
            query?: {
                /**
                 * @description Filters check suites by GitHub App `id`.
                 * @example 1
                 */
                app_id?: number;
                /** @description Returns check runs with the specified `name`. */
                check_name?: components["parameters"]["check-name"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        check_suites: components["schemas"]["check-suite"][];
                    };
                };
            };
        };
    };
    "repos/get-combined-status-for-ref": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["combined-commit-status"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-commit-statuses-for-ref": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status"][];
                };
            };
            301: components["responses"]["moved_permanently"];
        };
    };
    "repos/compare-commits": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The base branch and head branch to compare. This parameter expects the format `{base}...{head}`. */
                basehead: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-comparison"];
                };
            };
            404: components["responses"]["not_found"];
            500: components["responses"]["internal_error"];
        };
    };
    "apps/create-content-attachment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The owner of the repository. Determined from the `repository` `full_name` of the `content_reference` event. */
                owner: string;
                /** @description The name of the repository. Determined from the `repository` `full_name` of the `content_reference` event. */
                repo: string;
                /** @description The `id` of the `content_reference` event. */
                content_reference_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The title of the attachment */
                    title: string;
                    /** @description The body of the attachment */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content-reference-attachment"];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-content": {
        parameters: {
            query?: {
                /** @description The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
                ref?: string;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description path parameter */
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.github.v3.object": components["schemas"]["content-tree"];
                    "application/json": components["schemas"]["content-directory"] | components["schemas"]["content-file"] | components["schemas"]["content-symlink"] | components["schemas"]["content-submodule"];
                };
            };
            302: components["responses"]["found"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-or-update-file-contents": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description path parameter */
                path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The commit message. */
                    message: string;
                    /** @description The new file content, using Base64 encoding. */
                    content: string;
                    /** @description **Required if you are updating a file**. The blob SHA of the file being replaced. */
                    sha?: string;
                    /** @description The branch name. Default: the repository’s default branch (usually `master`) */
                    branch?: string;
                    /** @description The person that committed the file. Default: the authenticated user. */
                    committer?: {
                        /** @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
                        name: string;
                        /** @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
                        email: string;
                        date?: string;
                    };
                    /** @description The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
                    author?: {
                        /** @description The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
                        name: string;
                        /** @description The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
                        email: string;
                        date?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file-commit"];
                };
            };
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file-commit"];
                };
            };
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/delete-file": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description path parameter */
                path: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "message": "my commit message",
                 *       "committer": {
                 *         "name": "Monalisa Octocat",
                 *         "email": "octocat@github.com"
                 *       },
                 *       "sha": "329688480d39049927147c162b9d2deaf885005f"
                 *     } */
                "application/json": {
                    /** @description The commit message. */
                    message: string;
                    /** @description The blob SHA of the file being replaced. */
                    sha: string;
                    /** @description The branch name. Default: the repository’s default branch (usually `master`) */
                    branch?: string;
                    /** @description object containing information about the committer. */
                    committer?: {
                        /** @description The name of the author (or committer) of the commit */
                        name?: string;
                        /** @description The email of the author (or committer) of the commit */
                        email?: string;
                    };
                    /** @description object containing information about the author. */
                    author?: {
                        /** @description The name of the author (or committer) of the commit */
                        name?: string;
                        /** @description The email of the author (or committer) of the commit */
                        email?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["file-commit"];
                };
            };
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "repos/list-contributors": {
        parameters: {
            query?: {
                /** @description Set to `1` or `true` to include anonymous contributors in results. */
                anon?: string;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if repository contains content */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contributor"][];
                };
            };
            /** @description Response if repository is empty */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-deployments": {
        parameters: {
            query?: {
                /** @description The SHA recorded at creation time. */
                sha?: string;
                /** @description The name of the ref. This can be a branch, tag, or SHA. */
                ref?: string;
                /** @description The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */
                task?: string;
                /** @description The name of the environment that was deployed to (e.g., `staging` or `production`). */
                environment?: string;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment"][];
                };
            };
        };
    };
    "repos/create-deployment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The ref to deploy. This can be a branch, tag, or SHA. */
                    ref: string;
                    /**
                     * @description Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
                     * @default deploy
                     */
                    task?: string;
                    /**
                     * @description Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
                     * @default true
                     */
                    auto_merge?: boolean;
                    /** @description The [status](https://docs.github.com/enterprise-server@3.0/rest/reference/commits#commit-statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
                    required_contexts?: string[];
                    payload?: {
                        [key: string]: unknown;
                    } | string;
                    /**
                     * @description Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
                     * @default production
                     */
                    environment?: string;
                    /**
                     * @description Short description of the deployment.
                     * @default
                     */
                    description?: string | null;
                    /**
                     * @description Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
                     *     **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
                     * @default false
                     */
                    transient_environment?: boolean;
                    /** @description Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
                     *     **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type. */
                    production_environment?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment"];
                };
            };
            /** @description Merged branch response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                    };
                };
            };
            /** @description Conflict when there is a merge conflict or the commit's status checks failed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-deployment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description deployment_id parameter */
                deployment_id: components["parameters"]["deployment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-deployment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description deployment_id parameter */
                deployment_id: components["parameters"]["deployment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "repos/list-deployment-statuses": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description deployment_id parameter */
                deployment_id: components["parameters"]["deployment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment-status"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-deployment-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description deployment_id parameter */
                deployment_id: components["parameters"]["deployment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "environment": "production",
                 *       "state": "success",
                 *       "log_url": "https://example.com/deployment/42/output",
                 *       "description": "Deployment finished successfully."
                 *     } */
                "application/json": {
                    /**
                     * @description The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
                     * @enum {string}
                     */
                    state: "error" | "failure" | "inactive" | "in_progress" | "queued" | "pending" | "success";
                    /**
                     * @description The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
                     * @default
                     */
                    target_url?: string;
                    /**
                     * @description The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
                     *     **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
                     * @default
                     */
                    log_url?: string;
                    /**
                     * @description A short description of the status. The maximum description length is 140 characters.
                     * @default
                     */
                    description?: string;
                    /**
                     * @description Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
                     * @enum {string}
                     */
                    environment?: "production" | "staging" | "qa";
                    /**
                     * @description Sets the URL for accessing your environment. Default: `""`
                     *     **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
                     * @default
                     */
                    environment_url?: string;
                    /** @description Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
                     *     **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type. */
                    auto_inactive?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/example/deployments/42/statuses/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment-status"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-deployment-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description deployment_id parameter */
                deployment_id: components["parameters"]["deployment-id"];
                status_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deployment-status"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-dispatch-event": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "event_type": "on-demand-test",
                 *       "client_payload": {
                 *         "unit": false,
                 *         "integration": true
                 *       }
                 *     } */
                "application/json": {
                    /** @description A custom webhook event name. */
                    event_type: string;
                    /** @description JSON payload with extra information about the webhook event that your action or worklow may use. */
                    client_payload?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "activity/list-repo-events": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "repos/list-forks": {
        parameters: {
            query?: {
                /** @description The sort order. Can be either `newest`, `oldest`, or `stargazers`. */
                sort?: "newest" | "oldest" | "stargazers" | "watchers";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
            400: components["responses"]["bad_request"];
        };
    };
    "repos/create-fork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Optional parameter to specify the organization name if forking into an organization. */
                    organization?: string;
                } | null;
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["full-repository"];
                };
            };
            400: components["responses"]["bad_request"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "git/create-blob": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "Content of the blob",
                 *       "encoding": "utf-8"
                 *     } */
                "application/json": {
                    /** @description The new blob's content. */
                    content: string;
                    /**
                     * @description The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
                     * @default utf-8
                     */
                    encoding?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["short-blob"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
            422: components["responses"]["validation_failed"];
        };
    };
    "git/get-blob": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                file_sha: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["blob"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "git/create-commit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "message": "my commit message",
                 *       "author": {
                 *         "name": "Mona Octocat",
                 *         "email": "octocat@github.com",
                 *         "date": "2008-07-09T16:13:30+12:00"
                 *       },
                 *       "parents": [
                 *         "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
                 *       ],
                 *       "tree": "827efc6d56897b048c772eb4087f854f46256132",
                 *       "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n"
                 *     } */
                "application/json": {
                    /** @description The commit message */
                    message: string;
                    /** @description The SHA of the tree object this commit points to */
                    tree: string;
                    /** @description The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
                    parents?: string[];
                    /** @description Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
                    author?: {
                        /** @description The name of the author (or committer) of the commit */
                        name: string;
                        /** @description The email of the author (or committer) of the commit */
                        email: string;
                        /**
                         * Format: date-time
                         * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                         */
                        date?: string;
                    };
                    /** @description Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
                    committer?: {
                        /** @description The name of the author (or committer) of the commit */
                        name?: string;
                        /** @description The email of the author (or committer) of the commit */
                        email?: string;
                        /**
                         * Format: date-time
                         * @description Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                         */
                        date?: string;
                    };
                    /** @description The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
                    signature?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-commit"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "git/get-commit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description commit_sha parameter */
                commit_sha: components["parameters"]["commit-sha"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-commit"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "git/list-matching-refs": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-ref"][];
                };
            };
        };
    };
    "git/get-ref": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-ref"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "git/create-ref": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "ref": "refs/heads/featureA",
                 *       "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd"
                 *     } */
                "application/json": {
                    /** @description The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
                    ref: string;
                    /** @description The SHA1 value for this reference. */
                    sha: string;
                    key?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-ref"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "git/delete-ref": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "git/update-ref": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description ref parameter */
                ref: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                 *       "force": true
                 *     } */
                "application/json": {
                    /** @description The SHA1 value to set this reference to */
                    sha: string;
                    /**
                     * @description Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
                     * @default false
                     */
                    force?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-ref"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "git/create-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "tag": "v0.0.1",
                 *       "message": "initial version",
                 *       "object": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                 *       "type": "commit",
                 *       "tagger": {
                 *         "name": "Monalisa Octocat",
                 *         "email": "octocat@github.com",
                 *         "date": "2011-06-17T14:53:35-07:00"
                 *       }
                 *     } */
                "application/json": {
                    /** @description The tag's name. This is typically a version (e.g., "v0.0.1"). */
                    tag: string;
                    /** @description The tag message. */
                    message: string;
                    /** @description The SHA of the git object this is tagging. */
                    object: string;
                    /**
                     * @description The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
                     * @enum {string}
                     */
                    type: "commit" | "tree" | "blob";
                    /** @description An object with information about the individual creating the tag. */
                    tagger?: {
                        /** @description The name of the author of the tag */
                        name: string;
                        /** @description The email of the author of the tag */
                        email: string;
                        /**
                         * Format: date-time
                         * @description When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                         */
                        date?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-tag"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "git/get-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                tag_sha: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-tag"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "git/create-tree": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "base_tree": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                 *       "tree": [
                 *         {
                 *           "path": "file.rb",
                 *           "mode": "100644",
                 *           "type": "blob",
                 *           "sha": "44b4fc6d56897b048c772eb4087f854f46256132"
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
                    tree: {
                        /** @description The file referenced in the tree. */
                        path?: string;
                        /**
                         * @description The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
                         * @enum {string}
                         */
                        mode?: "100644" | "100755" | "040000" | "160000" | "120000";
                        /**
                         * @description Either `blob`, `tree`, or `commit`.
                         * @enum {string}
                         */
                        type?: "blob" | "tree" | "commit";
                        /** @description The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
                         *
                         *     **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error. */
                        sha?: string | null;
                        /** @description The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
                         *
                         *     **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error. */
                        content?: string;
                    }[];
                    /** @description The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
                     *     If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
                     *      */
                    base_tree?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-tree"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "git/get-tree": {
        parameters: {
            query?: {
                /** @description Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
                recursive?: string;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                tree_sha: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["git-tree"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-webhooks": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["hook"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "web",
                 *       "active": true,
                 *       "events": [
                 *         "push",
                 *         "pull_request"
                 *       ],
                 *       "config": {
                 *         "url": "https://example.com/webhook",
                 *         "content_type": "json",
                 *         "insecure_ssl": "0"
                 *       }
                 *     } */
                "application/json": {
                    /** @description Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
                    name?: string;
                    /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-hook-config-params). */
                    config?: {
                        url?: components["schemas"]["webhook-config-url"];
                        content_type?: components["schemas"]["webhook-config-content-type"];
                        secret?: components["schemas"]["webhook-config-secret"];
                        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                        token?: string;
                        digest?: string;
                    };
                    /**
                     * @description Determines what [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) the hook is triggered for.
                     * @default [
                     *       "push"
                     *     ]
                     */
                    events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                } | null;
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/hooks/12345678 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["hook"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["hook"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "active": true,
                 *       "add_events": [
                 *         "pull_request"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-hook-config-params). */
                    config?: {
                        url: components["schemas"]["webhook-config-url"];
                        content_type?: components["schemas"]["webhook-config-content-type"];
                        secret?: components["schemas"]["webhook-config-secret"];
                        insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                        address?: string;
                        room?: string;
                    };
                    /**
                     * @description Determines what [events](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
                     * @default [
                     *       "push"
                     *     ]
                     */
                    events?: string[];
                    /** @description Determines a list of events to be added to the list of events that the Hook triggers for. */
                    add_events?: string[];
                    /** @description Determines a list of events to be removed from the list of events that the Hook triggers for. */
                    remove_events?: string[];
                    /**
                     * @description Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
                     * @default true
                     */
                    active?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["hook"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-webhook-config-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "repos/update-webhook-config-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    url?: components["schemas"]["webhook-config-url"];
                    content_type?: components["schemas"]["webhook-config-content-type"];
                    secret?: components["schemas"]["webhook-config-secret"];
                    insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook-config"];
                };
            };
        };
    };
    "repos/ping-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/test-push-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                hook_id: components["parameters"]["hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "apps/get-repo-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
            301: components["responses"]["moved_permanently"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-invitations": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-invitation"][];
                };
            };
        };
    };
    "repos/delete-invitation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description invitation_id parameter */
                invitation_id: components["parameters"]["invitation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/update-invitation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description invitation_id parameter */
                invitation_id: components["parameters"]["invitation-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
                     * @enum {string}
                     */
                    permissions?: "read" | "write" | "maintain" | "triage" | "admin";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-invitation"];
                };
            };
        };
    };
    "issues/list-for-repo": {
        parameters: {
            query?: {
                /** @description If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
                milestone?: string;
                /** @description Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
                assignee?: string;
                /** @description The user that created the issue. */
                creator?: string;
                /** @description A user that's mentioned in the issue. */
                mentioned?: string;
                /** @description A list of comma separated label names. Example: `bug,ui,@high` */
                labels?: components["parameters"]["labels"];
                /** @description What to sort results by. Can be either `created`, `updated`, `comments`. */
                sort?: "created" | "updated" | "comments";
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"][];
                };
            };
            301: components["responses"]["moved_permanently"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Found a bug",
                 *       "body": "I'm having a problem with this.",
                 *       "assignees": [
                 *         "octocat"
                 *       ],
                 *       "milestone": 1,
                 *       "labels": [
                 *         "bug"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The title of the issue. */
                    title: string | number;
                    /** @description The contents of the issue. */
                    body?: string;
                    /** @description Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
                    assignee?: string | null;
                    milestone?: null | string | number;
                    /** @description Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
                    labels?: (string | {
                        id?: number;
                        name?: string;
                        description?: string | null;
                        color?: string | null;
                    })[];
                    /** @description Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
                    assignees?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/issues/1347 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "issues/list-comments-for-repo": {
        parameters: {
            query?: {
                /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
                sort?: components["parameters"]["sort"];
                /** @description Either `asc` or `desc`. Ignored without the `sort` parameter. */
                direction?: "asc" | "desc";
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-comment"][];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/get-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/delete-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/update-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Me too"
                 *     } */
                "application/json": {
                    /** @description The contents of the comment. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-comment"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "reactions/list-for-issue-comment": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "reactions/create-for-issue-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the issue comment.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Reaction exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Reaction created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "reactions/delete-for-issue-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/list-events-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-event"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/get-event": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-event"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "issues/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"];
                };
            };
            301: components["responses"]["moved_permanently"];
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "issues/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "title": "Found a bug",
                 *       "body": "I'm having a problem with this.",
                 *       "assignees": [
                 *         "octocat"
                 *       ],
                 *       "milestone": 1,
                 *       "state": "open",
                 *       "labels": [
                 *         "bug"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The title of the issue. */
                    title?: null | string | number;
                    /** @description The contents of the issue. */
                    body?: string | null;
                    /** @description Login for the user that this issue should be assigned to. **This field is deprecated.** */
                    assignee?: string | null;
                    /**
                     * @description State of the issue. Either `open` or `closed`.
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    milestone?: null | string | number;
                    /** @description Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
                    labels?: (string | {
                        id?: number;
                        name?: string;
                        description?: string | null;
                        color?: string | null;
                    })[];
                    /** @description Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
                    assignees?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"];
                };
            };
            301: components["responses"]["moved_permanently"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "issues/add-assignees": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "assignees": [
                 *         "hubot",
                 *         "other_user"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
                    assignees?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"];
                };
            };
        };
    };
    "issues/remove-assignees": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "assignees": [
                 *         "hubot",
                 *         "other_user"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
                    assignees?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"];
                };
            };
        };
    };
    "issues/list-comments": {
        parameters: {
            query?: {
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-comment"][];
                };
            };
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "issues/create-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Me too"
                 *     } */
                "application/json": {
                    /** @description The contents of the comment. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/issues/comments/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-comment"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/list-events": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue-event-for-issue"][];
                };
            };
            410: components["responses"]["gone"];
        };
    };
    "issues/list-labels-on-issue": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
            410: components["responses"]["gone"];
        };
    };
    "issues/set-labels": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "labels": [
                 *         "bug",
                 *         "enhancement"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#add-labels-to-an-issue)." */
                    labels?: string[];
                } | string[] | {
                    labels?: {
                        name: string;
                    }[];
                } | {
                    name: string;
                }[] | string;
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/add-labels": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "labels": [
                 *         "bug",
                 *         "enhancement"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#set-labels-for-an-issue)." */
                    labels?: string[];
                } | string[] | {
                    labels?: {
                        name: string;
                    }[];
                } | {
                    name: string;
                }[] | string;
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/remove-all-labels": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            410: components["responses"]["gone"];
        };
    };
    "issues/remove-label": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "issues/lock": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
                     *     \* `off-topic`
                     *     \* `too heated`
                     *     \* `resolved`
                     *     \* `spam`
                     * @enum {string}
                     */
                    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
                } | null;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "reactions/list-for-issue": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "reactions/create-for-issue": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the issue.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "reactions/delete-for-issue": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/list-events-for-timeline": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description issue_number parameter */
                issue_number: components["parameters"]["issue-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["timeline-issue-events"][];
                };
            };
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
        };
    };
    "repos/list-deploy-keys": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deploy-key"][];
                };
            };
        };
    };
    "repos/create-deploy-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "octocat@octomac",
                 *       "key": "ssh-rsa AAA...",
                 *       "read_only": true
                 *     } */
                "application/json": {
                    /** @description A name for the key. */
                    title?: string;
                    /** @description The contents of the key. */
                    key: string;
                    /** @description If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
                     *
                     *     Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)." */
                    read_only?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/keys/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deploy-key"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-deploy-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description key_id parameter */
                key_id: components["parameters"]["key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deploy-key"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-deploy-key": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description key_id parameter */
                key_id: components["parameters"]["key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/list-labels-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/create-label": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "bug",
                 *       "description": "Something isn't working",
                 *       "color": "f29513"
                 *     } */
                "application/json": {
                    /** @description The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
                    name: string;
                    /** @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
                    color?: string;
                    /** @description A short description of the label. Must be 100 characters or fewer. */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/labels/bug */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/get-label": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/delete-label": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "issues/update-label": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "new_name": "bug :bug:",
                 *       "description": "Small bug fix required",
                 *       "color": "b01f26"
                 *     } */
                "application/json": {
                    /** @description The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
                    new_name?: string;
                    /** @description The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
                    color?: string;
                    /** @description A short description of the label. Must be 100 characters or fewer. */
                    description?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"];
                };
            };
        };
    };
    "repos/list-languages": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["language"];
                };
            };
        };
    };
    "licenses/get-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["license-content"];
                };
            };
        };
    };
    "repos/merge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "base": "master",
                 *       "head": "cool_feature",
                 *       "commit_message": "Shipped cool_feature!"
                 *     } */
                "application/json": {
                    /** @description The name of the base branch that the head will be merged into. */
                    base: string;
                    /** @description The head to merge. This can be a branch name or a commit SHA1. */
                    head: string;
                    /** @description Commit message to use for the merge commit. If omitted, a default message will be used. */
                    commit_message?: string;
                };
            };
        };
        responses: {
            /** @description Successful Response (The resulting merge commit) */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit"];
                };
            };
            /** @description Response when already merged */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            /** @description Not Found when the base or head does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict when there is a merge conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/list-milestones": {
        parameters: {
            query?: {
                /** @description The state of the milestone. Either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description What to sort results by. Either `due_on` or `completeness`. */
                sort?: "due_on" | "completeness";
                /** @description The direction of the sort. Either `asc` or `desc`. */
                direction?: "asc" | "desc";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["milestone"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/create-milestone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "v1.0",
                 *       "state": "open",
                 *       "description": "Tracking milestone for version 1.0",
                 *       "due_on": "2012-10-09T23:39:01Z"
                 *     } */
                "application/json": {
                    /** @description The title of the milestone. */
                    title: string;
                    /**
                     * @description The state of the milestone. Either `open` or `closed`.
                     * @default open
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    /** @description A description of the milestone. */
                    description?: string;
                    /**
                     * Format: date-time
                     * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    due_on?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/milestones/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["milestone"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "issues/get-milestone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description milestone_number parameter */
                milestone_number: components["parameters"]["milestone-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["milestone"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/delete-milestone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description milestone_number parameter */
                milestone_number: components["parameters"]["milestone-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "issues/update-milestone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description milestone_number parameter */
                milestone_number: components["parameters"]["milestone-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "title": "v1.0",
                 *       "state": "open",
                 *       "description": "Tracking milestone for version 1.0",
                 *       "due_on": "2012-10-09T23:39:01Z"
                 *     } */
                "application/json": {
                    /** @description The title of the milestone. */
                    title?: string;
                    /**
                     * @description The state of the milestone. Either `open` or `closed`.
                     * @default open
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    /** @description A description of the milestone. */
                    description?: string;
                    /**
                     * Format: date-time
                     * @description The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
                     */
                    due_on?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["milestone"];
                };
            };
        };
    };
    "issues/list-labels-for-milestone": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description milestone_number parameter */
                milestone_number: components["parameters"]["milestone-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["label"][];
                };
            };
        };
    };
    "activity/list-repo-notifications-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description If `true`, show notifications marked as read. */
                all?: components["parameters"]["all"];
                /** @description If `true`, only shows notifications in which the user is directly participating or mentioned. */
                participating?: components["parameters"]["participating"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                before?: components["parameters"]["before"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["thread"][];
                };
            };
        };
    };
    "activity/mark-repo-notifications-as-read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: date-time
                     * @description Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
                     */
                    last_read_at?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
            /** @description Reset Content */
            205: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/get-pages": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/update-information-about-pages-site": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cname": "octocatblog.com",
                 *       "source": {
                 *         "branch": "main",
                 *         "path": "/"
                 *       }
                 *     } */
                "application/json": {
                    /** @description Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)." */
                    cname?: string | null;
                    /** @description Specify whether HTTPS should be enforced for the repository. */
                    https_enforced?: boolean;
                    /** @description Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
                    public?: boolean;
                    source?: ("gh-pages" | "master" | "master /docs") | {
                        /** @description The repository branch used to publish your site's source files. */
                        branch: string;
                        /**
                         * @description The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.
                         * @enum {string}
                         */
                        path: "/" | "/docs";
                    };
                } | unknown | unknown | unknown | unknown;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["bad_request"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/create-pages-site": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "source": {
                 *         "branch": "main",
                 *         "path": "/docs"
                 *       }
                 *     } */
                "application/json": {
                    /** @description The source branch and directory used to publish your Pages site. */
                    source: {
                        /** @description The repository branch used to publish your site's source files. */
                        branch: string;
                        /**
                         * @description The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
                         * @default /
                         * @enum {string}
                         */
                        path?: "/" | "/docs";
                    };
                } | null;
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page"];
                };
            };
            409: components["responses"]["conflict"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/delete-pages-site": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-pages-builds": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page-build"][];
                };
            };
        };
    };
    "repos/request-pages-build": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page-build-status"];
                };
            };
        };
    };
    "repos/get-latest-pages-build": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page-build"];
                };
            };
        };
    };
    "repos/get-pages-build": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                build_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["page-build"];
                };
            };
        };
    };
    "enterprise-admin/list-pre-receive-hooks-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                sort?: "created" | "updated" | "name";
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"][];
                };
            };
        };
    };
    "enterprise-admin/get-pre-receive-hook-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/remove-pre-receive-hook-enforcement-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Responds with effective values inherited from owner and/or global level. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "enterprise-admin/update-pre-receive-hook-enforcement-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description pre_receive_hook_id parameter */
                pre_receive_hook_id: components["parameters"]["pre-receive-hook-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "enforcement": "enabled"
                 *     } */
                "application/json": {
                    /**
                     * @description The state of enforcement for the hook on this repository.
                     * @enum {string}
                     */
                    enforcement?: "enabled" | "disabled" | "testing";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-pre-receive-hook"];
                };
            };
        };
    };
    "projects/list-for-repo": {
        parameters: {
            query?: {
                /** @description Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"][];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "projects/create-for-repo": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Projects Documentation",
                 *       "body": "Developer documentation project for the developer site."
                 *     } */
                "application/json": {
                    /** @description The name of the project. */
                    name: string;
                    /** @description The description of the project. */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            410: components["responses"]["gone"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/list": {
        parameters: {
            query?: {
                /** @description Either `open`, `closed`, or `all` to filter by state. */
                state?: "open" | "closed" | "all";
                /** @description Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
                head?: string;
                /** @description Filter pulls by base branch name. Example: `gh-pages`. */
                base?: string;
                /** @description What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */
                sort?: "created" | "updated" | "popularity" | "long-running";
                /** @description The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
                direction?: "asc" | "desc";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-simple"][];
                };
            };
            304: components["responses"]["not_modified"];
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Amazing new feature",
                 *       "body": "Please pull these awesome changes in!",
                 *       "head": "octocat:new-feature",
                 *       "base": "master"
                 *     } */
                "application/json": {
                    /** @description The title of the new pull request. */
                    title?: string;
                    /** @description The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
                    head: string;
                    /** @description The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
                    base: string;
                    /** @description The contents of the pull request. */
                    body?: string;
                    /** @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
                    maintainer_can_modify?: boolean;
                    /** @description Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
                    draft?: boolean;
                    issue?: number;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/pulls/1347 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/list-review-comments-for-repo": {
        parameters: {
            query?: {
                sort?: "created" | "updated" | "created_at";
                /** @description Can be either `asc` or `desc`. Ignored without `sort` parameter. */
                direction?: "asc" | "desc";
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"][];
                };
            };
        };
    };
    "pulls/get-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "pulls/delete-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
        };
    };
    "pulls/update-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "I like this too!"
                 *     } */
                "application/json": {
                    /** @description The text of the reply to the review comment. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"];
                };
            };
        };
    };
    "reactions/list-for-pull-request-review-comment": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "reactions/create-for-pull-request-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the pull request review comment.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Reaction exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            /** @description Reaction created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "reactions/delete-for-pull-request-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
                reaction_id: components["parameters"]["reaction-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "pulls/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request"];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
            500: components["responses"]["internal_error"];
        };
    };
    "pulls/update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "title": "new title",
                 *       "body": "updated body",
                 *       "state": "open",
                 *       "base": "master"
                 *     } */
                "application/json": {
                    /** @description The title of the pull request. */
                    title?: string;
                    /** @description The contents of the pull request. */
                    body?: string;
                    /**
                     * @description State of this Pull Request. Either `open` or `closed`.
                     * @enum {string}
                     */
                    state?: "open" | "closed";
                    /** @description The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
                    base?: string;
                    /** @description Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
                    maintainer_can_modify?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/list-review-comments": {
        parameters: {
            query?: {
                /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
                sort?: components["parameters"]["sort"];
                /** @description Can be either `asc` or `desc`. Ignored without `sort` parameter. */
                direction?: "asc" | "desc";
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"][];
                };
            };
        };
    };
    "pulls/create-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The text of the review comment. */
                    body: string;
                    /** @description The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
                    commit_id?: string;
                    /** @description The relative path to the file that necessitates a comment. */
                    path?: string;
                    /** @description **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
                    position?: number;
                    /**
                     * @description **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
                     * @enum {string}
                     */
                    side?: "LEFT" | "RIGHT";
                    /** @description **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
                    line?: number;
                    /** @description **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
                    start_line?: number;
                    /**
                     * @description **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
                     * @enum {string}
                     */
                    start_side?: "LEFT" | "RIGHT" | "side";
                    /** @description The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored. */
                    in_reply_to?: number;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/create-reply-for-review-comment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description comment_id parameter */
                comment_id: components["parameters"]["comment-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Great stuff!"
                 *     } */
                "application/json": {
                    /** @description The text of the review comment. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/pulls/comments/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-comment"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "pulls/list-commits": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit"][];
                };
            };
        };
    };
    "pulls/list-files": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["diff-entry"][];
                };
            };
            422: components["responses"]["validation_failed"];
            500: components["responses"]["internal_error"];
        };
    };
    "pulls/check-if-merged": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if pull request has been merged */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if pull request has not been merged */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "pulls/merge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Title for the automatic commit message. */
                    commit_title?: string;
                    /** @description Extra detail to append to automatic commit message. */
                    commit_message?: string;
                    /** @description SHA that pull request head must match to allow merge. */
                    sha?: string;
                    /**
                     * @description Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
                     * @enum {string}
                     */
                    merge_method?: "merge" | "squash" | "rebase";
                } | null;
            };
        };
        responses: {
            /** @description if merge was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-merge-result"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            /** @description Method Not Allowed if merge cannot be performed */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
            /** @description Conflict if sha was provided and pull request head did not match */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/list-requested-reviewers": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review-request"];
                };
            };
        };
    };
    "pulls/request-reviewers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "reviewers": [
                 *         "octocat",
                 *         "hubot",
                 *         "other_user"
                 *       ],
                 *       "team_reviewers": [
                 *         "justice-league"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description An array of user `login`s that will be requested. */
                    reviewers?: string[];
                    /** @description An array of team `slug`s that will be requested. */
                    team_reviewers?: string[];
                } | unknown | unknown;
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-simple"];
                };
            };
            403: components["responses"]["forbidden"];
            /** @description Unprocessable Entity if user is not a collaborator */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "pulls/remove-requested-reviewers": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "reviewers": [
                 *         "octocat",
                 *         "hubot",
                 *         "other_user"
                 *       ],
                 *       "team_reviewers": [
                 *         "justice-league"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description An array of user `login`s that will be removed. */
                    reviewers: string[];
                    /** @description An array of team `slug`s that will be removed. */
                    team_reviewers?: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-simple"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "pulls/list-reviews": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of reviews returns in chronological order. */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"][];
                };
            };
        };
    };
    "pulls/create-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                 *       "body": "This is close to perfect! Please address the suggested inline change.",
                 *       "event": "REQUEST_CHANGES",
                 *       "comments": [
                 *         {
                 *           "path": "file.md",
                 *           "position": 6,
                 *           "body": "Please add more information here, and fix this typo."
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
                    commit_id?: string;
                    /** @description **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
                    body?: string;
                    /**
                     * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
                     * @enum {string}
                     */
                    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
                    /** @description Use the following table to specify the location, destination, and contents of the draft review comment. */
                    comments?: {
                        /** @description The relative path to the file that necessitates a review comment. */
                        path: string;
                        /** @description The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
                        position?: number;
                        /** @description Text of the review comment. */
                        body: string;
                        line?: number;
                        side?: string;
                        start_line?: number;
                        start_side?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/get-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "pulls/update-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "This is close to perfect! Please address the suggested inline change. And add more about this."
                 *     } */
                "application/json": {
                    /** @description The body text of the pull request review. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/delete-pending-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/list-comments-for-review": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["review-comment"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "pulls/dismiss-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The message for the pull request review dismissal */
                    message: string;
                    event?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/submit-review": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
                /** @description review_id parameter */
                review_id: components["parameters"]["review-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The body text of the pull request review */
                    body?: string;
                    /**
                     * @description The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
                     * @enum {string}
                     */
                    event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pull-request-review"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "pulls/update-branch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                pull_number: components["parameters"]["pull-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "expected_head_sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                 *     } */
                "application/json": {
                    /** @description The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
                    expected_head_sha?: string;
                } | null;
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        url?: string;
                    };
                };
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-readme": {
        parameters: {
            query?: {
                /** @description The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
                ref?: string;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content-file"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-readme-in-directory": {
        parameters: {
            query?: {
                /** @description The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
                ref?: string;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description The alternate path to look for a README file */
                dir: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content-file"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-releases": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/create-release": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "tag_name": "v1.0.0",
                 *       "target_commitish": "master",
                 *       "name": "v1.0.0",
                 *       "body": "Description of the release",
                 *       "draft": false,
                 *       "prerelease": false
                 *     } */
                "application/json": {
                    /** @description The name of the tag. */
                    tag_name: string;
                    /** @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
                    target_commitish?: string;
                    /** @description The name of the release. */
                    name?: string;
                    /** @description Text describing the contents of the tag. */
                    body?: string;
                    /**
                     * @description `true` to create a draft (unpublished) release, `false` to create a published one.
                     * @default false
                     */
                    draft?: boolean;
                    /**
                     * @description `true` to identify the release as a prerelease. `false` to identify the release as a full release.
                     * @default false
                     */
                    prerelease?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/releases/1 */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-release-asset": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description asset_id parameter */
                asset_id: components["parameters"]["asset-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release-asset"];
                };
            };
            302: components["responses"]["found"];
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "repos/delete-release-asset": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description asset_id parameter */
                asset_id: components["parameters"]["asset-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/update-release-asset": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description asset_id parameter */
                asset_id: components["parameters"]["asset-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "foo-1.0.0-osx.zip",
                 *       "label": "Mac binary"
                 *     } */
                "application/json": {
                    /** @description The file name of the asset. */
                    name?: string;
                    /** @description An alternate short description of the asset. Used in place of the filename. */
                    label?: string;
                    state?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release-asset"];
                };
            };
        };
    };
    "repos/get-latest-release": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
        };
    };
    "repos/get-release-by-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description tag parameter */
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-release": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description release_id parameter */
                release_id: components["parameters"]["release-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/delete-release": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description release_id parameter */
                release_id: components["parameters"]["release-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/update-release": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description release_id parameter */
                release_id: components["parameters"]["release-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "tag_name": "v1.0.0",
                 *       "target_commitish": "master",
                 *       "name": "v1.0.0",
                 *       "body": "Description of the release",
                 *       "draft": false,
                 *       "prerelease": false
                 *     } */
                "application/json": {
                    /** @description The name of the tag. */
                    tag_name?: string;
                    /** @description Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
                    target_commitish?: string;
                    /** @description The name of the release. */
                    name?: string;
                    /** @description Text describing the contents of the tag. */
                    body?: string;
                    /** @description `true` makes the release a draft, and `false` publishes the release. */
                    draft?: boolean;
                    /** @description `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
                    prerelease?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release"];
                };
            };
        };
    };
    "repos/list-release-assets": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description release_id parameter */
                release_id: components["parameters"]["release-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release-asset"][];
                };
            };
        };
    };
    "repos/upload-release-asset": {
        parameters: {
            query: {
                name: string;
                label?: string;
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                /** @description release_id parameter */
                release_id: components["parameters"]["release-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "*/*": string;
            };
        };
        responses: {
            /** @description Response for successful upload */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["release-asset"];
                };
            };
            /** @description Response if you upload an asset with the same filename as another uploaded asset */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "activity/list-stargazers-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][] | components["schemas"]["stargazer"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/get-code-frequency-stats": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-frequency-stat"][];
                };
            };
            202: components["responses"]["accepted"];
            204: components["responses"]["no_content"];
        };
    };
    "repos/get-commit-activity-stats": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["commit-activity"][];
                };
            };
            202: components["responses"]["accepted"];
            204: components["responses"]["no_content"];
        };
    };
    "repos/get-contributors-stats": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
             *     *   `a` - Number of additions
             *     *   `d` - Number of deletions
             *     *   `c` - Number of commits */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contributor-activity"][];
                };
            };
            202: components["responses"]["accepted"];
            204: components["responses"]["no_content"];
        };
    };
    "repos/get-participation-stats": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The array order is oldest week (index 0) to most recent week. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["participation-stats"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "repos/get-punch-card-stats": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["code-frequency-stat"][];
                };
            };
            204: components["responses"]["no_content"];
        };
    };
    "repos/create-commit-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                sha: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "state": "success",
                 *       "target_url": "https://example.com/build/status",
                 *       "description": "The build succeeded!",
                 *       "context": "continuous-integration/jenkins"
                 *     } */
                "application/json": {
                    /**
                     * @description The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
                     * @enum {string}
                     */
                    state: "error" | "failure" | "pending" | "success";
                    /** @description The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
                     *     For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
                     *     `http://ci.example.com/user/repo/build/sha` */
                    target_url?: string;
                    /** @description A short description of the status. */
                    description?: string;
                    /**
                     * @description A string label to differentiate this status from the status of other systems. This field is case-insensitive.
                     * @default default
                     */
                    context?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["status"];
                };
            };
        };
    };
    "activity/list-watchers-for-repo": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "activity/get-repo-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if you subscribe to the repository */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-subscription"];
                };
            };
            403: components["responses"]["forbidden"];
            /** @description Not Found if you don't subscribe to the repository */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "activity/set-repo-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Determines if notifications should be received from this repository. */
                    subscribed?: boolean;
                    /** @description Determines if all notifications should be blocked from this repository. */
                    ignored?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-subscription"];
                };
            };
        };
    };
    "activity/delete-repo-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/list-tags": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"][];
                };
            };
        };
    };
    "repos/download-tarball-archive": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            302: {
                headers: {
                    /** @example https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/list-teams": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
        };
    };
    "repos/get-all-topics": {
        parameters: {
            query?: {
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topic"];
                };
            };
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "repos/replace-all-topics": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "names": [
                 *         "octocat",
                 *         "atom",
                 *         "electron",
                 *         "api"
                 *       ]
                 *     } */
                "application/json": {
                    /** @description An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
                    names: string[];
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["topic"];
                };
            };
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "repos/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "new_owner": "github",
                 *       "team_ids": [
                 *         12,
                 *         345
                 *       ]
                 *     } */
                "application/json": {
                    /** @description The username or organization name the repository will be transferred to. */
                    new_owner: string;
                    /** @description ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
                    team_ids?: number[];
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"];
                };
            };
        };
    };
    "repos/download-zipball-archive": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
                ref: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            302: {
                headers: {
                    /** @example https://codeload.github.com/me/myprivate/legacy.zip/master?login=me&token=thistokenexpires */
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "repos/create-using-template": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_owner: string;
                template_repo: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "owner": "octocat",
                 *       "name": "Hello-World",
                 *       "description": "This is your first repository",
                 *       "include_all_branches": false,
                 *       "private": false
                 *     } */
                "application/json": {
                    /** @description The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
                    owner?: string;
                    /** @description The name of the new repository. */
                    name: string;
                    /** @description A short description of the new repository. */
                    description?: string;
                    /**
                     * @description Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
                     * @default false
                     */
                    include_all_branches?: boolean;
                    /**
                     * @description Either `true` to create a new private repository or `false` to create a new public one.
                     * @default false
                     */
                    private?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository"];
                };
            };
        };
    };
    "repos/list-public": {
        parameters: {
            query?: {
                /** @description A repository ID. Only return repositories with an ID greater than this ID. */
                since?: components["parameters"]["since-repo"];
                /** @description Specifies the types of repositories to return. Can be one of `all` or `public`. Default: `public`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. */
                visibility?: "all" | "public";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    /** @example <https://api.github.com/repositories?since=364>; rel="next" */
                    Link?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
            304: components["responses"]["not_modified"];
            422: components["responses"]["validation_failed"];
        };
    };
    "search/code": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/articles/searching-code/)" for a detailed list of qualifiers. */
                q: string;
                /** @description Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "indexed";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["code-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "search/commits": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/articles/searching-commits/)" for a detailed list of qualifiers. */
                q: string;
                /** @description Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "author-date" | "committer-date";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["commit-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "search/issues-and-pull-requests": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers. */
                q: string;
                /** @description Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "comments" | "reactions" | "reactions-+1" | "reactions--1" | "reactions-smile" | "reactions-thinking_face" | "reactions-heart" | "reactions-tada" | "interactions" | "created" | "updated";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["issue-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "search/labels": {
        parameters: {
            query: {
                /** @description The id of the repository. */
                repository_id: number;
                /** @description The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). */
                q: string;
                /** @description Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "created" | "updated";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["label-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "search/repos": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
                q: string;
                /** @description Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["repo-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "search/topics": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). */
                q: string;
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["topic-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "search/users": {
        parameters: {
            query: {
                /** @description The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.0/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/articles/searching-users/)" for a detailed list of qualifiers. */
                q: string;
                /** @description Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.0/rest/reference/search#ranking-search-results) */
                sort?: "followers" | "repositories" | "joined";
                /** @description Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
                order?: components["parameters"]["order"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        incomplete_results: boolean;
                        items: components["schemas"]["user-search-result-item"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            422: components["responses"]["validation_failed"];
            503: components["responses"]["service_unavailable"];
        };
    };
    "enterprise-admin/get-configuration-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["configuration-status"];
                };
            };
        };
    };
    "enterprise-admin/start-configuration-process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/get-maintenance-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["maintenance-status"];
                };
            };
        };
    };
    "enterprise-admin/enable-or-disable-maintenance-mode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "maintenance": "{\"enabled\":true, \"when\":\"now\"}"
                 *     } */
                "application/x-www-form-urlencoded": {
                    /** @description A JSON string with the attributes `enabled` and `when`.
                     *
                     *     The possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.
                     *
                     *     The possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic). */
                    maintenance: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["maintenance-status"];
                };
            };
        };
    };
    "enterprise-admin/get-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["enterprise-settings"];
                };
            };
        };
    };
    "enterprise-admin/set-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "settings": "{ \"enterprise\": { \"public_pages\": true }}"
                 *     } */
                "application/x-www-form-urlencoded": {
                    /** @description A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings). */
                    settings: string;
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/get-all-authorized-ssh-keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/add-authorized-ssh-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
                 *     } */
                "application/x-www-form-urlencoded": {
                    /** @description The public SSH key. */
                    authorized_key: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/remove-authorized-ssh-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
                 *     } */
                "application/x-www-form-urlencoded": {
                    /** @description The public SSH key. */
                    authorized_key: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ssh-key"][];
                };
            };
        };
    };
    "enterprise-admin/create-enterprise-server-license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The content of your _.ghl_ license file. */
                    license: string;
                    /** @description You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter. */
                    password?: string;
                    /** @description An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#get-settings). */
                    settings?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/upgrade-license": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description The content of your new _.ghl_ license file. */
                    license?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/get-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/delete-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/update-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "new team name",
                 *       "description": "new team description",
                 *       "privacy": "closed"
                 *     } */
                "application/json": {
                    /** @description The name of the team. */
                    name: string;
                    /** @description The description of the team. */
                    description?: string;
                    /**
                     * @description The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
                     *     **For a non-nested team:**
                     *     \* `secret` - only visible to organization owners and members of this team.
                     *     \* `closed` - visible to all members of this organization.
                     *     **For a parent or child team:**
                     *     \* `closed` - visible to all members of this organization.
                     * @enum {string}
                     */
                    privacy?: "secret" | "closed";
                    /**
                     * @description **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
                     *     \* `pull` - team members can pull, but not push to or administer newly-added repositories.
                     *     \* `push` - team members can pull and push, but not administer newly-added repositories.
                     *     \* `admin` - team members can pull, push and administer newly-added repositories.
                     * @default pull
                     * @enum {string}
                     */
                    permission?: "pull" | "push" | "admin";
                    /** @description The ID of a team to set as the parent team. */
                    parent_team_id?: number | null;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/list-discussions-legacy": {
        parameters: {
            query?: {
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"][];
                };
            };
        };
    };
    "teams/create-discussion-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "title": "Our first team post",
                 *       "body": "Hi! This is an area for us to collaborate as a team."
                 *     } */
                "application/json": {
                    /** @description The discussion post's title. */
                    title: string;
                    /** @description The discussion post's body text. */
                    body: string;
                    /**
                     * @description Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
                     * @default false
                     */
                    private?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/get-discussion-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/delete-discussion-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/update-discussion-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "title": "Welcome to our first team post"
                 *     } */
                "application/json": {
                    /** @description The discussion post's title. */
                    title?: string;
                    /** @description The discussion post's body text. */
                    body?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion"];
                };
            };
        };
    };
    "teams/list-discussion-comments-legacy": {
        parameters: {
            query?: {
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"][];
                };
            };
        };
    };
    "teams/create-discussion-comment-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Do you like apples?"
                 *     } */
                "application/json": {
                    /** @description The discussion comment's body text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "teams/get-discussion-comment-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "teams/delete-discussion-comment-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/update-discussion-comment-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "body": "Do you like pineapples?"
                 *     } */
                "application/json": {
                    /** @description The discussion comment's body text. */
                    body: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-discussion-comment"];
                };
            };
        };
    };
    "reactions/list-for-team-discussion-comment-legacy": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
        };
    };
    "reactions/create-for-team-discussion-comment-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
                comment_number: components["parameters"]["comment-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion comment.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
        };
    };
    "reactions/list-for-team-discussion-legacy": {
        parameters: {
            query?: {
                /** @description Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
                content?: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"][];
                };
            };
        };
    };
    "reactions/create-for-team-discussion-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                discussion_number: components["parameters"]["discussion-number"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "content": "heart"
                 *     } */
                "application/json": {
                    /**
                     * @description The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion.
                     * @enum {string}
                     */
                    content: "+1" | "-1" | "laugh" | "confused" | "heart" | "hooray" | "rocket" | "eyes";
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["reaction"];
                };
            };
        };
    };
    "teams/list-members-legacy": {
        parameters: {
            query?: {
                /** @description Filters members returned by their role in the team. Can be one of:
                 *     \* `member` - normal members of the team.
                 *     \* `maintainer` - team maintainers.
                 *     \* `all` - all members of the team. */
                role?: "member" | "maintainer" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/get-member-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if user is a member */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description if user is not a member */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-member-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            /** @description Not Found if team synchronization is set up */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/remove-member-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if team synchronization is setup */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/get-membership-for-user-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-membership"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/add-or-update-membership-for-user-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The role that this user should have in the team. Can be one of:
                     *     \* `member` - a normal member of the team.
                     *     \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
                     * @default member
                     * @enum {string}
                     */
                    role?: "member" | "maintainer";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-membership"];
                };
            };
            /** @description Forbidden if team synchronization is set up */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
            /** @description Unprocessable Entity if you attempt to add an organization to a team */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/remove-membership-for-user-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description if team synchronization is set up */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-projects-legacy": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-project"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/check-permissions-for-project-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-project"];
                };
            };
            /** @description Not Found if project is not managed by this team */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-or-update-project-permissions-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant to the team for this project. Can be one of:
                     *     \* `read` - team members can read, but not write to or administer this project.
                     *     \* `write` - team members can read and write, but not administer this project.
                     *     \* `admin` - team members can read, write and administer this project.
                     *     Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
                     * @enum {string}
                     */
                    permission?: "read" | "write" | "admin";
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden if the project is not owned by the organization */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        documentation_url?: string;
                    };
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/remove-project-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                project_id: components["parameters"]["project-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: components["responses"]["not_found"];
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/list-repos-legacy": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "teams/check-permissions-for-repo-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Alternative response with extra repository information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-repository"];
                };
            };
            /** @description Response if repository is managed by this team */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found if repository is not managed by this team */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/add-or-update-repo-permissions-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The permission to grant the team on this repository. Can be one of:
                     *     \* `pull` - team members can pull, but not push to or administer this repository.
                     *     \* `push` - team members can pull and push, but not administer this repository.
                     *     \* `admin` - team members can pull, push and administer this repository.
                     *
                     *     If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
                     * @enum {string}
                     */
                    permission?: "pull" | "push" | "admin";
                };
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "teams/remove-repo-legacy": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "teams/list-child-legacy": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                team_id: components["parameters"]["team-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if child teams exist */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"][];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/get-authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["private-user"] | components["schemas"]["public-user"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "users/update-authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The new name of the user. */
                    name?: string;
                    /** @description The publicly visible email address of the user. */
                    email?: string;
                    /** @description The new blog URL of the user. */
                    blog?: string;
                    /** @description The new Twitter username of the user. */
                    twitter_username?: string | null;
                    /** @description The new company of the user. */
                    company?: string;
                    /** @description The new location of the user. */
                    location?: string;
                    /** @description The new hiring availability of the user. */
                    hireable?: boolean;
                    /** @description The new short biography of the user. */
                    bio?: string;
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["private-user"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/list-emails-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["email"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/add-email-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key. */
                    emails: string[];
                } | string[] | string;
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["email"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/delete-email-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Email addresses associated with the GitHub user account. */
                    emails: string[];
                } | string[] | string;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/list-followers-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "users/list-followed-by-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "users/check-person-is-followed-by-authenticated": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if the person is followed by the authenticated user */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            /** @description if the person is not followed by the authenticated user */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["basic-error"];
                };
            };
        };
    };
    "users/follow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/unfollow": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/list-gpg-keys-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gpg-key"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/create-gpg-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A GPG key in ASCII-armored format. */
                    armored_public_key: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gpg-key"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/get-gpg-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gpg_key_id parameter */
                gpg_key_id: components["parameters"]["gpg-key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gpg-key"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/delete-gpg-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description gpg_key_id parameter */
                gpg_key_id: components["parameters"]["gpg-key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/list-installations-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description You can find the permissions for the installation under the `permissions` key. */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            415: components["responses"]["preview_header_missing"];
        };
    };
    "apps/list-installation-repos-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The access the user has to each repository is included in the hash under the `permissions` key. */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        total_count: number;
                        repository_selection?: string;
                        repositories: components["schemas"]["repository"][];
                    };
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "apps/add-repo-to-installation-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "apps/remove-repo-from-installation-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description installation_id parameter */
                installation_id: components["parameters"]["installation-id"];
                repository_id: components["parameters"]["repository-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "issues/list-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Indicates which sorts of issues to return. Can be one of:
                 *     \* `assigned`: Issues assigned to you
                 *     \* `created`: Issues created by you
                 *     \* `mentioned`: Issues mentioning you
                 *     \* `subscribed`: Issues you're subscribed to updates for
                 *     \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation */
                filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all";
                /** @description Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description A list of comma separated label names. Example: `bug,ui,@high` */
                labels?: components["parameters"]["labels"];
                /** @description What to sort results by. Can be either `created`, `updated`, `comments`. */
                sort?: "created" | "updated" | "comments";
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["issue"][];
                };
            };
            304: components["responses"]["not_modified"];
            404: components["responses"]["not_found"];
        };
    };
    "users/list-public-ssh-keys-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["key"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/create-public-ssh-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description A descriptive name for the new key. */
                    title?: string;
                    /** @description The public SSH key to add to your GitHub account. */
                    key: string;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["key"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "users/get-public-ssh-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description key_id parameter */
                key_id: components["parameters"]["key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["key"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/delete-public-ssh-key-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description key_id parameter */
                key_id: components["parameters"]["key-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "orgs/list-memberships-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships. */
                state?: "active" | "pending";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-membership"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/get-membership-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-membership"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "orgs/update-membership-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "state": "active"
                 *     } */
                "application/json": {
                    /**
                     * @description The state that the membership should be in. Only `"active"` will be accepted.
                     * @enum {string}
                     */
                    state: "active";
                };
            };
        };
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["org-membership"];
                };
            };
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "orgs/list-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-simple"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "projects/create-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the project */
                    name: string;
                    /** @description Body of the project */
                    body?: string | null;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            415: components["responses"]["preview_header_missing"];
            422: components["responses"]["validation_failed_simple"];
        };
    };
    "users/list-public-emails-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["email"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/list-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`. */
                visibility?: "all" | "public" | "private";
                /** @description Comma-separated list of values. Can include:
                 *     \* `owner`: Repositories that are owned by the authenticated user.
                 *     \* `collaborator`: Repositories that the user has been added to as a collaborator.
                 *     \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
                affiliation?: string;
                /** @description Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
                 *
                 *     Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */
                type?: "all" | "owner" | "public" | "private" | "member";
                /** @description Can be one of `created`, `updated`, `pushed`, `full_name`. */
                sort?: "created" | "updated" | "pushed" | "full_name";
                /** @description Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
                direction?: "asc" | "desc";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                before?: components["parameters"]["before"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/create-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The name of the repository. */
                    name: string;
                    /** @description A short description of the repository. */
                    description?: string;
                    /** @description A URL with more information about the repository. */
                    homepage?: string;
                    /**
                     * @description Whether the repository is private.
                     * @default false
                     */
                    private?: boolean;
                    /**
                     * @description Whether issues are enabled.
                     * @default true
                     */
                    has_issues?: boolean;
                    /**
                     * @description Whether projects are enabled.
                     * @default true
                     */
                    has_projects?: boolean;
                    /**
                     * @description Whether the wiki is enabled.
                     * @default true
                     */
                    has_wiki?: boolean;
                    /** @description The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
                    team_id?: number;
                    /**
                     * @description Whether the repository is initialized with a minimal README.
                     * @default false
                     */
                    auto_init?: boolean;
                    /** @description The desired language or platform to apply to the .gitignore. */
                    gitignore_template?: string;
                    /** @description The license keyword of the open source license for this repository. */
                    license_template?: string;
                    /**
                     * @description Whether to allow squash merges for pull requests.
                     * @default true
                     */
                    allow_squash_merge?: boolean;
                    /**
                     * @description Whether to allow merge commits for pull requests.
                     * @default true
                     */
                    allow_merge_commit?: boolean;
                    /**
                     * @description Whether to allow rebase merges for pull requests.
                     * @default true
                     */
                    allow_rebase_merge?: boolean;
                    /**
                     * @description Whether to delete head branches when pull requests are merged
                     * @default false
                     */
                    delete_branch_on_merge?: boolean;
                    /**
                     * @description Whether downloads are enabled.
                     * @default true
                     */
                    has_downloads?: boolean;
                    /**
                     * @description Whether this repository acts as a template that can be used to generate new repositories.
                     * @default false
                     */
                    is_template?: boolean;
                };
            };
        };
        responses: {
            /** @description Response */
            201: {
                headers: {
                    /** @example https://api.github.com/repos/octocat/Hello-World */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository"];
                };
            };
            304: components["responses"]["not_modified"];
            400: components["responses"]["bad_request"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "repos/list-invitations-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository-invitation"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "repos/decline-invitation-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description invitation_id parameter */
                invitation_id: components["parameters"]["invitation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
        };
    };
    "repos/accept-invitation-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description invitation_id parameter */
                invitation_id: components["parameters"]["invitation-id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
            409: components["responses"]["conflict"];
        };
    };
    "activity/list-repos-starred-by-authenticated-user": {
        parameters: {
            query?: {
                /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
                sort?: components["parameters"]["sort"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["repository"][];
                    "application/vnd.github.v3.star+json": components["schemas"]["starred-repository"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "activity/check-repo-is-starred-by-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response if this repository is starred by you */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            /** @description Not Found if this repository is not starred by you */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["basic-error"];
                };
            };
        };
    };
    "activity/star-repo-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "activity/unstar-repo-for-authenticated-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                owner: components["parameters"]["owner"];
                repo: components["parameters"]["repo"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "activity/list-watched-repos-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
            304: components["responses"]["not_modified"];
            401: components["responses"]["requires_authentication"];
            403: components["responses"]["forbidden"];
        };
    };
    "teams/list-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team-full"][];
                };
            };
            304: components["responses"]["not_modified"];
            403: components["responses"]["forbidden"];
            404: components["responses"]["not_found"];
        };
    };
    "users/list": {
        parameters: {
            query?: {
                /** @description A user ID. Only return users with an ID greater than this ID. */
                since?: components["parameters"]["since-user"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    /** @example <https://api.github.com/users?since=135>; rel="next" */
                    Link?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
            304: components["responses"]["not_modified"];
        };
    };
    "users/get-by-username": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["private-user"] | components["schemas"]["public-user"];
                };
            };
            404: components["responses"]["not_found"];
        };
    };
    "activity/list-events-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "activity/list-org-events-for-authenticated-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
                org: components["parameters"]["org"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "activity/list-public-events-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "users/list-followers-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "users/list-following-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["simple-user"][];
                };
            };
        };
    };
    "users/check-following-for-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
                target_user: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description if the user follows the target user */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description if the user does not follow the target user */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gists/list-for-user": {
        parameters: {
            query?: {
                /** @description Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
                since?: components["parameters"]["since"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["base-gist"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "users/list-gpg-keys-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gpg-key"][];
                };
            };
        };
    };
    "users/get-context-for-user": {
        parameters: {
            query?: {
                /** @description Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
                subject_type?: "organization" | "repository" | "issue" | "pull_request";
                /** @description Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
                subject_id?: string;
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["hovercard"];
                };
            };
            404: components["responses"]["not_found"];
            422: components["responses"]["validation_failed"];
        };
    };
    "apps/get-user-installation": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation"];
                };
            };
        };
    };
    "users/list-public-keys-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["key-simple"][];
                };
            };
        };
    };
    "orgs/list-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["organization-simple"][];
                };
            };
        };
    };
    "projects/list-for-user": {
        parameters: {
            query?: {
                /** @description Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
                state?: "open" | "closed" | "all";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["project"][];
                };
            };
            422: components["responses"]["validation_failed"];
        };
    };
    "activity/list-received-events-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "activity/list-received-public-events-for-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
        };
    };
    "repos/list-for-user": {
        parameters: {
            query?: {
                /** @description Can be one of `all`, `owner`, `member`. */
                type?: "all" | "owner" | "member";
                /** @description Can be one of `created`, `updated`, `pushed`, `full_name`. */
                sort?: "created" | "updated" | "pushed" | "full_name";
                /** @description Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
                direction?: "asc" | "desc";
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
        };
    };
    "enterprise-admin/promote-user-to-be-site-administrator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/demote-site-administrator": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "activity/list-repos-starred-by-user": {
        parameters: {
            query?: {
                /** @description One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
                sort?: components["parameters"]["sort"];
                /** @description One of `asc` (ascending) or `desc` (descending). */
                direction?: components["parameters"]["direction"];
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["starred-repository"][] | components["schemas"]["repository"][];
                };
            };
        };
    };
    "activity/list-repos-watched-by-user": {
        parameters: {
            query?: {
                /** @description Results per page (max 100) */
                per_page?: components["parameters"]["per-page"];
                /** @description Page number of the results to fetch. */
                page?: components["parameters"]["page"];
            };
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    Link: components["headers"]["link"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["minimal-repository"][];
                };
            };
        };
    };
    "enterprise-admin/suspend-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Suspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
                    reason?: string;
                } | null;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-admin/unsuspend-user": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: components["parameters"]["username"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to "Unsuspended via API by _SITE\_ADMINISTRATOR_", where _SITE\_ADMINISTRATOR_ is the person who performed the action. */
                    reason?: string;
                } | null;
            };
        };
        responses: {
            /** @description Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "meta/get-zen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
